/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2013 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.pay;

@SuppressWarnings("all")
public final class PaymentRequestCardDetails implements android.os.Parcelable, com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  public com.clover.sdk.v3.payments.CardType getCardType() {
    return cacheGet(CacheKey.cardType);
  }
  public com.clover.sdk.v3.payments.CardEntryType getEntryType() {
    return cacheGet(CacheKey.entryType);
  }
  public java.lang.String getTrack1() {
    return cacheGet(CacheKey.track1);
  }
  public java.lang.String getTrack2() {
    return cacheGet(CacheKey.track2);
  }
  public java.lang.String getTrack3() {
    return cacheGet(CacheKey.track3);
  }
  public java.lang.Boolean getEncrypted() {
    return cacheGet(CacheKey.encrypted);
  }
  public java.lang.Boolean getManualEntered() {
    return cacheGet(CacheKey.manualEntered);
  }
  public java.lang.Boolean getAsync() {
    return cacheGet(CacheKey.async);
  }
  public java.lang.String getMaskedTrack1() {
    return cacheGet(CacheKey.maskedTrack1);
  }
  public java.lang.String getMaskedTrack2() {
    return cacheGet(CacheKey.maskedTrack2);
  }
  public java.lang.String getMaskedTrack3() {
    return cacheGet(CacheKey.maskedTrack3);
  }
  public java.lang.String getUniqueToken() {
    return cacheGet(CacheKey.uniqueToken);
  }
  public java.lang.String getPan() {
    return cacheGet(CacheKey.pan);
  }
  public java.lang.String getFirstName() {
    return cacheGet(CacheKey.firstName);
  }
  public java.lang.String getLastName() {
    return cacheGet(CacheKey.lastName);
  }
  public java.lang.String getCountryCode() {
    return cacheGet(CacheKey.countryCode);
  }
  public java.lang.String getExp() {
    return cacheGet(CacheKey.exp);
  }
  public java.lang.String getStreetNumber() {
    return cacheGet(CacheKey.streetNumber);
  }
  public java.lang.String getZip() {
    return cacheGet(CacheKey.zip);
  }
  public java.lang.String getCvv() {
    return cacheGet(CacheKey.cvv);
  }
  public java.lang.String getLast4() {
    return cacheGet(CacheKey.last4);
  }
  public java.lang.String getFirst4() {
    return cacheGet(CacheKey.first4);
  }
  public java.lang.String getDukptSerial() {
    return cacheGet(CacheKey.dukptSerial);
  }
  public java.lang.String getSwipeStatus() {
    return cacheGet(CacheKey.swipeStatus);
  }
  public java.lang.String getFingerprint() {
    return cacheGet(CacheKey.fingerprint);
  }
  public java.lang.String getDeviceSerial() {
    return cacheGet(CacheKey.deviceSerial);
  }
  public com.clover.sdk.v3.pay.TransactionData getTransactionData() {
    return cacheGet(CacheKey.transactionData);
  }


  private enum CacheKey {
    cardType {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractCardType();
      }
    },
    entryType {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractEntryType();
      }
    },
    track1 {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractTrack1();
      }
    },
    track2 {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractTrack2();
      }
    },
    track3 {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractTrack3();
      }
    },
    encrypted {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractEncrypted();
      }
    },
    manualEntered {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractManualEntered();
      }
    },
    async {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractAsync();
      }
    },
    maskedTrack1 {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractMaskedTrack1();
      }
    },
    maskedTrack2 {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractMaskedTrack2();
      }
    },
    maskedTrack3 {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractMaskedTrack3();
      }
    },
    uniqueToken {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractUniqueToken();
      }
    },
    pan {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractPan();
      }
    },
    firstName {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractFirstName();
      }
    },
    lastName {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractLastName();
      }
    },
    countryCode {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractCountryCode();
      }
    },
    exp {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractExp();
      }
    },
    streetNumber {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractStreetNumber();
      }
    },
    zip {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractZip();
      }
    },
    cvv {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractCvv();
      }
    },
    last4 {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractLast4();
      }
    },
    first4 {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractFirst4();
      }
    },
    dukptSerial {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractDukptSerial();
      }
    },
    swipeStatus {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractSwipeStatus();
      }
    },
    fingerprint {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractFingerprint();
      }
    },
    deviceSerial {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractDeviceSerial();
      }
    },
    transactionData {
      @Override
      public Object extractValue(PaymentRequestCardDetails instance) {
        return instance.extractTransactionData();
      }
    },
    ;

    public abstract Object extractValue(PaymentRequestCardDetails instance);
  }

  private org.json.JSONObject jsonObject = null;
  private android.os.Bundle bundle = null;
  private android.os.Bundle changeLog = null;
  private Object[] cache = null;
  private byte[] cacheState = null;

  private static final byte STATE_NOT_CACHED = 0;
  private static final byte STATE_CACHED_NO_VALUE = 1;
  private static final byte STATE_CACHED_VALUE = 2;

  /**
   * Constructs a new empty instance.
   */
  public PaymentRequestCardDetails() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public PaymentRequestCardDetails(String json) throws java.lang.IllegalArgumentException {
    try {
      this.jsonObject = new org.json.JSONObject(json);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public PaymentRequestCardDetails(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public PaymentRequestCardDetails(PaymentRequestCardDetails src) {
    if (src.jsonObject != null) {
      this.jsonObject = com.clover.sdk.v3.JsonHelper.deepCopy(src.getJSONObject());
    }
  }

  private <T> T cacheGet(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return (T) cache[index];
  }

  private boolean cacheValueIsNotNull(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cache[index] != null;
  }

  private boolean cacheHasKey(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cacheState[index] == STATE_CACHED_VALUE;
  }

  private void cacheRemoveValue(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    cache[index] = null;
    cacheState[index] = STATE_CACHED_NO_VALUE;
  }

  private void cacheMarkDirty(CacheKey key) {
    if (cache != null) {
      int index = key.ordinal();
      cache[index] = null;
      cacheState[index] = STATE_NOT_CACHED;
    }
  }

  private void populateCache(int index) {
    if (cache == null) {
      int size = CacheKey.values().length;
      cache = new Object[size];
      cacheState = new byte[size];
    }

    if (cacheState[index] == STATE_NOT_CACHED) {
      CacheKey key = CacheKey.values()[index];

      if (getJSONObject().has(key.name())) {
        cache[index] = key.extractValue(this);
        cacheState[index] = STATE_CACHED_VALUE;
      } else {
        cacheState[index] = STATE_CACHED_NO_VALUE;
      }
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    if (jsonObject == null) {
      jsonObject = new org.json.JSONObject();
    }
    return jsonObject;
  }


  @Override
  public void validate() {
  }



  private com.clover.sdk.v3.payments.CardType extractCardType() {
    if (!getJSONObject().isNull("cardType")) {
      try {
        return com.clover.sdk.v3.payments.CardType.valueOf(getJSONObject().optString("cardType"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private com.clover.sdk.v3.payments.CardEntryType extractEntryType() {
    if (!getJSONObject().isNull("entryType")) {
      try {
        return com.clover.sdk.v3.payments.CardEntryType.valueOf(getJSONObject().optString("entryType"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private java.lang.String extractTrack1() {
    return getJSONObject().isNull("track1") ? null :
      getJSONObject().optString("track1");
  }


  private java.lang.String extractTrack2() {
    return getJSONObject().isNull("track2") ? null :
      getJSONObject().optString("track2");
  }


  private java.lang.String extractTrack3() {
    return getJSONObject().isNull("track3") ? null :
      getJSONObject().optString("track3");
  }


  private java.lang.Boolean extractEncrypted() {
    return getJSONObject().isNull("encrypted") ? null :
      getJSONObject().optBoolean("encrypted");
  }


  private java.lang.Boolean extractManualEntered() {
    return getJSONObject().isNull("manualEntered") ? null :
      getJSONObject().optBoolean("manualEntered");
  }


  private java.lang.Boolean extractAsync() {
    return getJSONObject().isNull("async") ? null :
      getJSONObject().optBoolean("async");
  }


  private java.lang.String extractMaskedTrack1() {
    return getJSONObject().isNull("maskedTrack1") ? null :
      getJSONObject().optString("maskedTrack1");
  }


  private java.lang.String extractMaskedTrack2() {
    return getJSONObject().isNull("maskedTrack2") ? null :
      getJSONObject().optString("maskedTrack2");
  }


  private java.lang.String extractMaskedTrack3() {
    return getJSONObject().isNull("maskedTrack3") ? null :
      getJSONObject().optString("maskedTrack3");
  }


  private java.lang.String extractUniqueToken() {
    return getJSONObject().isNull("uniqueToken") ? null :
      getJSONObject().optString("uniqueToken");
  }


  private java.lang.String extractPan() {
    return getJSONObject().isNull("pan") ? null :
      getJSONObject().optString("pan");
  }


  private java.lang.String extractFirstName() {
    return getJSONObject().isNull("firstName") ? null :
      getJSONObject().optString("firstName");
  }


  private java.lang.String extractLastName() {
    return getJSONObject().isNull("lastName") ? null :
      getJSONObject().optString("lastName");
  }


  private java.lang.String extractCountryCode() {
    return getJSONObject().isNull("countryCode") ? null :
      getJSONObject().optString("countryCode");
  }


  private java.lang.String extractExp() {
    return getJSONObject().isNull("exp") ? null :
      getJSONObject().optString("exp");
  }


  private java.lang.String extractStreetNumber() {
    return getJSONObject().isNull("streetNumber") ? null :
      getJSONObject().optString("streetNumber");
  }


  private java.lang.String extractZip() {
    return getJSONObject().isNull("zip") ? null :
      getJSONObject().optString("zip");
  }


  private java.lang.String extractCvv() {
    return getJSONObject().isNull("cvv") ? null :
      getJSONObject().optString("cvv");
  }


  private java.lang.String extractLast4() {
    return getJSONObject().isNull("last4") ? null :
      getJSONObject().optString("last4");
  }


  private java.lang.String extractFirst4() {
    return getJSONObject().isNull("first4") ? null :
      getJSONObject().optString("first4");
  }


  private java.lang.String extractDukptSerial() {
    return getJSONObject().isNull("dukptSerial") ? null :
      getJSONObject().optString("dukptSerial");
  }


  private java.lang.String extractSwipeStatus() {
    return getJSONObject().isNull("swipeStatus") ? null :
      getJSONObject().optString("swipeStatus");
  }


  private java.lang.String extractFingerprint() {
    return getJSONObject().isNull("fingerprint") ? null :
      getJSONObject().optString("fingerprint");
  }


  private java.lang.String extractDeviceSerial() {
    return getJSONObject().isNull("deviceSerial") ? null :
      getJSONObject().optString("deviceSerial");
  }


  private com.clover.sdk.v3.pay.TransactionData extractTransactionData() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("transactionData");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.pay.TransactionData(getJSONObject().optJSONObject("transactionData"));
    }
    return null;
  }


  /** Checks whether the 'cardType' field is set and is not null */
  public boolean isNotNullCardType() {
    return cacheValueIsNotNull(CacheKey.cardType);
  }

  /** Checks whether the 'entryType' field is set and is not null */
  public boolean isNotNullEntryType() {
    return cacheValueIsNotNull(CacheKey.entryType);
  }

  /** Checks whether the 'track1' field is set and is not null */
  public boolean isNotNullTrack1() {
    return cacheValueIsNotNull(CacheKey.track1);
  }

  /** Checks whether the 'track2' field is set and is not null */
  public boolean isNotNullTrack2() {
    return cacheValueIsNotNull(CacheKey.track2);
  }

  /** Checks whether the 'track3' field is set and is not null */
  public boolean isNotNullTrack3() {
    return cacheValueIsNotNull(CacheKey.track3);
  }

  /** Checks whether the 'encrypted' field is set and is not null */
  public boolean isNotNullEncrypted() {
    return cacheValueIsNotNull(CacheKey.encrypted);
  }

  /** Checks whether the 'manualEntered' field is set and is not null */
  public boolean isNotNullManualEntered() {
    return cacheValueIsNotNull(CacheKey.manualEntered);
  }

  /** Checks whether the 'async' field is set and is not null */
  public boolean isNotNullAsync() {
    return cacheValueIsNotNull(CacheKey.async);
  }

  /** Checks whether the 'maskedTrack1' field is set and is not null */
  public boolean isNotNullMaskedTrack1() {
    return cacheValueIsNotNull(CacheKey.maskedTrack1);
  }

  /** Checks whether the 'maskedTrack2' field is set and is not null */
  public boolean isNotNullMaskedTrack2() {
    return cacheValueIsNotNull(CacheKey.maskedTrack2);
  }

  /** Checks whether the 'maskedTrack3' field is set and is not null */
  public boolean isNotNullMaskedTrack3() {
    return cacheValueIsNotNull(CacheKey.maskedTrack3);
  }

  /** Checks whether the 'uniqueToken' field is set and is not null */
  public boolean isNotNullUniqueToken() {
    return cacheValueIsNotNull(CacheKey.uniqueToken);
  }

  /** Checks whether the 'pan' field is set and is not null */
  public boolean isNotNullPan() {
    return cacheValueIsNotNull(CacheKey.pan);
  }

  /** Checks whether the 'firstName' field is set and is not null */
  public boolean isNotNullFirstName() {
    return cacheValueIsNotNull(CacheKey.firstName);
  }

  /** Checks whether the 'lastName' field is set and is not null */
  public boolean isNotNullLastName() {
    return cacheValueIsNotNull(CacheKey.lastName);
  }

  /** Checks whether the 'countryCode' field is set and is not null */
  public boolean isNotNullCountryCode() {
    return cacheValueIsNotNull(CacheKey.countryCode);
  }

  /** Checks whether the 'exp' field is set and is not null */
  public boolean isNotNullExp() {
    return cacheValueIsNotNull(CacheKey.exp);
  }

  /** Checks whether the 'streetNumber' field is set and is not null */
  public boolean isNotNullStreetNumber() {
    return cacheValueIsNotNull(CacheKey.streetNumber);
  }

  /** Checks whether the 'zip' field is set and is not null */
  public boolean isNotNullZip() {
    return cacheValueIsNotNull(CacheKey.zip);
  }

  /** Checks whether the 'cvv' field is set and is not null */
  public boolean isNotNullCvv() {
    return cacheValueIsNotNull(CacheKey.cvv);
  }

  /** Checks whether the 'last4' field is set and is not null */
  public boolean isNotNullLast4() {
    return cacheValueIsNotNull(CacheKey.last4);
  }

  /** Checks whether the 'first4' field is set and is not null */
  public boolean isNotNullFirst4() {
    return cacheValueIsNotNull(CacheKey.first4);
  }

  /** Checks whether the 'dukptSerial' field is set and is not null */
  public boolean isNotNullDukptSerial() {
    return cacheValueIsNotNull(CacheKey.dukptSerial);
  }

  /** Checks whether the 'swipeStatus' field is set and is not null */
  public boolean isNotNullSwipeStatus() {
    return cacheValueIsNotNull(CacheKey.swipeStatus);
  }

  /** Checks whether the 'fingerprint' field is set and is not null */
  public boolean isNotNullFingerprint() {
    return cacheValueIsNotNull(CacheKey.fingerprint);
  }

  /** Checks whether the 'deviceSerial' field is set and is not null */
  public boolean isNotNullDeviceSerial() {
    return cacheValueIsNotNull(CacheKey.deviceSerial);
  }

  /** Checks whether the 'transactionData' field is set and is not null */
  public boolean isNotNullTransactionData() {
    return cacheValueIsNotNull(CacheKey.transactionData);
  }


  /** Checks whether the 'cardType' field has been set, however the value could be null */
  public boolean hasCardType() {
    return cacheHasKey(CacheKey.cardType);
  }

  /** Checks whether the 'entryType' field has been set, however the value could be null */
  public boolean hasEntryType() {
    return cacheHasKey(CacheKey.entryType);
  }

  /** Checks whether the 'track1' field has been set, however the value could be null */
  public boolean hasTrack1() {
    return cacheHasKey(CacheKey.track1);
  }

  /** Checks whether the 'track2' field has been set, however the value could be null */
  public boolean hasTrack2() {
    return cacheHasKey(CacheKey.track2);
  }

  /** Checks whether the 'track3' field has been set, however the value could be null */
  public boolean hasTrack3() {
    return cacheHasKey(CacheKey.track3);
  }

  /** Checks whether the 'encrypted' field has been set, however the value could be null */
  public boolean hasEncrypted() {
    return cacheHasKey(CacheKey.encrypted);
  }

  /** Checks whether the 'manualEntered' field has been set, however the value could be null */
  public boolean hasManualEntered() {
    return cacheHasKey(CacheKey.manualEntered);
  }

  /** Checks whether the 'async' field has been set, however the value could be null */
  public boolean hasAsync() {
    return cacheHasKey(CacheKey.async);
  }

  /** Checks whether the 'maskedTrack1' field has been set, however the value could be null */
  public boolean hasMaskedTrack1() {
    return cacheHasKey(CacheKey.maskedTrack1);
  }

  /** Checks whether the 'maskedTrack2' field has been set, however the value could be null */
  public boolean hasMaskedTrack2() {
    return cacheHasKey(CacheKey.maskedTrack2);
  }

  /** Checks whether the 'maskedTrack3' field has been set, however the value could be null */
  public boolean hasMaskedTrack3() {
    return cacheHasKey(CacheKey.maskedTrack3);
  }

  /** Checks whether the 'uniqueToken' field has been set, however the value could be null */
  public boolean hasUniqueToken() {
    return cacheHasKey(CacheKey.uniqueToken);
  }

  /** Checks whether the 'pan' field has been set, however the value could be null */
  public boolean hasPan() {
    return cacheHasKey(CacheKey.pan);
  }

  /** Checks whether the 'firstName' field has been set, however the value could be null */
  public boolean hasFirstName() {
    return cacheHasKey(CacheKey.firstName);
  }

  /** Checks whether the 'lastName' field has been set, however the value could be null */
  public boolean hasLastName() {
    return cacheHasKey(CacheKey.lastName);
  }

  /** Checks whether the 'countryCode' field has been set, however the value could be null */
  public boolean hasCountryCode() {
    return cacheHasKey(CacheKey.countryCode);
  }

  /** Checks whether the 'exp' field has been set, however the value could be null */
  public boolean hasExp() {
    return cacheHasKey(CacheKey.exp);
  }

  /** Checks whether the 'streetNumber' field has been set, however the value could be null */
  public boolean hasStreetNumber() {
    return cacheHasKey(CacheKey.streetNumber);
  }

  /** Checks whether the 'zip' field has been set, however the value could be null */
  public boolean hasZip() {
    return cacheHasKey(CacheKey.zip);
  }

  /** Checks whether the 'cvv' field has been set, however the value could be null */
  public boolean hasCvv() {
    return cacheHasKey(CacheKey.cvv);
  }

  /** Checks whether the 'last4' field has been set, however the value could be null */
  public boolean hasLast4() {
    return cacheHasKey(CacheKey.last4);
  }

  /** Checks whether the 'first4' field has been set, however the value could be null */
  public boolean hasFirst4() {
    return cacheHasKey(CacheKey.first4);
  }

  /** Checks whether the 'dukptSerial' field has been set, however the value could be null */
  public boolean hasDukptSerial() {
    return cacheHasKey(CacheKey.dukptSerial);
  }

  /** Checks whether the 'swipeStatus' field has been set, however the value could be null */
  public boolean hasSwipeStatus() {
    return cacheHasKey(CacheKey.swipeStatus);
  }

  /** Checks whether the 'fingerprint' field has been set, however the value could be null */
  public boolean hasFingerprint() {
    return cacheHasKey(CacheKey.fingerprint);
  }

  /** Checks whether the 'deviceSerial' field has been set, however the value could be null */
  public boolean hasDeviceSerial() {
    return cacheHasKey(CacheKey.deviceSerial);
  }

  /** Checks whether the 'transactionData' field has been set, however the value could be null */
  public boolean hasTransactionData() {
    return cacheHasKey(CacheKey.transactionData);
  }


  /**
   * Sets the field 'cardType'.
   */
  public PaymentRequestCardDetails setCardType(com.clover.sdk.v3.payments.CardType cardType) {
    logChange("cardType");

    try {
      getJSONObject().put("cardType", cardType == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(cardType));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.cardType);
    return this;
  }

  /**
   * Sets the field 'entryType'.
   */
  public PaymentRequestCardDetails setEntryType(com.clover.sdk.v3.payments.CardEntryType entryType) {
    logChange("entryType");

    try {
      getJSONObject().put("entryType", entryType == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(entryType));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.entryType);
    return this;
  }

  /**
   * Sets the field 'track1'.
   */
  public PaymentRequestCardDetails setTrack1(java.lang.String track1) {
    logChange("track1");

    try {
      getJSONObject().put("track1", track1 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(track1));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.track1);
    return this;
  }

  /**
   * Sets the field 'track2'.
   */
  public PaymentRequestCardDetails setTrack2(java.lang.String track2) {
    logChange("track2");

    try {
      getJSONObject().put("track2", track2 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(track2));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.track2);
    return this;
  }

  /**
   * Sets the field 'track3'.
   */
  public PaymentRequestCardDetails setTrack3(java.lang.String track3) {
    logChange("track3");

    try {
      getJSONObject().put("track3", track3 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(track3));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.track3);
    return this;
  }

  /**
   * Sets the field 'encrypted'.
   */
  public PaymentRequestCardDetails setEncrypted(java.lang.Boolean encrypted) {
    logChange("encrypted");

    try {
      getJSONObject().put("encrypted", encrypted == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(encrypted));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.encrypted);
    return this;
  }

  /**
   * Sets the field 'manualEntered'.
   */
  public PaymentRequestCardDetails setManualEntered(java.lang.Boolean manualEntered) {
    logChange("manualEntered");

    try {
      getJSONObject().put("manualEntered", manualEntered == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(manualEntered));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.manualEntered);
    return this;
  }

  /**
   * Sets the field 'async'.
   */
  public PaymentRequestCardDetails setAsync(java.lang.Boolean async) {
    logChange("async");

    try {
      getJSONObject().put("async", async == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(async));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.async);
    return this;
  }

  /**
   * Sets the field 'maskedTrack1'.
   */
  public PaymentRequestCardDetails setMaskedTrack1(java.lang.String maskedTrack1) {
    logChange("maskedTrack1");

    try {
      getJSONObject().put("maskedTrack1", maskedTrack1 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(maskedTrack1));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.maskedTrack1);
    return this;
  }

  /**
   * Sets the field 'maskedTrack2'.
   */
  public PaymentRequestCardDetails setMaskedTrack2(java.lang.String maskedTrack2) {
    logChange("maskedTrack2");

    try {
      getJSONObject().put("maskedTrack2", maskedTrack2 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(maskedTrack2));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.maskedTrack2);
    return this;
  }

  /**
   * Sets the field 'maskedTrack3'.
   */
  public PaymentRequestCardDetails setMaskedTrack3(java.lang.String maskedTrack3) {
    logChange("maskedTrack3");

    try {
      getJSONObject().put("maskedTrack3", maskedTrack3 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(maskedTrack3));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.maskedTrack3);
    return this;
  }

  /**
   * Sets the field 'uniqueToken'.
   */
  public PaymentRequestCardDetails setUniqueToken(java.lang.String uniqueToken) {
    logChange("uniqueToken");

    try {
      getJSONObject().put("uniqueToken", uniqueToken == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(uniqueToken));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.uniqueToken);
    return this;
  }

  /**
   * Sets the field 'pan'.
   */
  public PaymentRequestCardDetails setPan(java.lang.String pan) {
    logChange("pan");

    try {
      getJSONObject().put("pan", pan == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(pan));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.pan);
    return this;
  }

  /**
   * Sets the field 'firstName'.
   */
  public PaymentRequestCardDetails setFirstName(java.lang.String firstName) {
    logChange("firstName");

    try {
      getJSONObject().put("firstName", firstName == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(firstName));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.firstName);
    return this;
  }

  /**
   * Sets the field 'lastName'.
   */
  public PaymentRequestCardDetails setLastName(java.lang.String lastName) {
    logChange("lastName");

    try {
      getJSONObject().put("lastName", lastName == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(lastName));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.lastName);
    return this;
  }

  /**
   * Sets the field 'countryCode'.
   */
  public PaymentRequestCardDetails setCountryCode(java.lang.String countryCode) {
    logChange("countryCode");

    try {
      getJSONObject().put("countryCode", countryCode == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(countryCode));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.countryCode);
    return this;
  }

  /**
   * Sets the field 'exp'.
   */
  public PaymentRequestCardDetails setExp(java.lang.String exp) {
    logChange("exp");

    try {
      getJSONObject().put("exp", exp == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(exp));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.exp);
    return this;
  }

  /**
   * Sets the field 'streetNumber'.
   */
  public PaymentRequestCardDetails setStreetNumber(java.lang.String streetNumber) {
    logChange("streetNumber");

    try {
      getJSONObject().put("streetNumber", streetNumber == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(streetNumber));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.streetNumber);
    return this;
  }

  /**
   * Sets the field 'zip'.
   */
  public PaymentRequestCardDetails setZip(java.lang.String zip) {
    logChange("zip");

    try {
      getJSONObject().put("zip", zip == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(zip));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.zip);
    return this;
  }

  /**
   * Sets the field 'cvv'.
   */
  public PaymentRequestCardDetails setCvv(java.lang.String cvv) {
    logChange("cvv");

    try {
      getJSONObject().put("cvv", cvv == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(cvv));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.cvv);
    return this;
  }

  /**
   * Sets the field 'last4'.
   */
  public PaymentRequestCardDetails setLast4(java.lang.String last4) {
    logChange("last4");

    try {
      getJSONObject().put("last4", last4 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(last4));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.last4);
    return this;
  }

  /**
   * Sets the field 'first4'.
   */
  public PaymentRequestCardDetails setFirst4(java.lang.String first4) {
    logChange("first4");

    try {
      getJSONObject().put("first4", first4 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(first4));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.first4);
    return this;
  }

  /**
   * Sets the field 'dukptSerial'.
   */
  public PaymentRequestCardDetails setDukptSerial(java.lang.String dukptSerial) {
    logChange("dukptSerial");

    try {
      getJSONObject().put("dukptSerial", dukptSerial == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(dukptSerial));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.dukptSerial);
    return this;
  }

  /**
   * Sets the field 'swipeStatus'.
   */
  public PaymentRequestCardDetails setSwipeStatus(java.lang.String swipeStatus) {
    logChange("swipeStatus");

    try {
      getJSONObject().put("swipeStatus", swipeStatus == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(swipeStatus));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.swipeStatus);
    return this;
  }

  /**
   * Sets the field 'fingerprint'.
   */
  public PaymentRequestCardDetails setFingerprint(java.lang.String fingerprint) {
    logChange("fingerprint");

    try {
      getJSONObject().put("fingerprint", fingerprint == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(fingerprint));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.fingerprint);
    return this;
  }

  /**
   * Sets the field 'deviceSerial'.
   */
  public PaymentRequestCardDetails setDeviceSerial(java.lang.String deviceSerial) {
    logChange("deviceSerial");

    try {
      getJSONObject().put("deviceSerial", deviceSerial == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(deviceSerial));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.deviceSerial);
    return this;
  }

  /**
   * Sets the field 'transactionData'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public PaymentRequestCardDetails setTransactionData(com.clover.sdk.v3.pay.TransactionData transactionData) {
    logChange("transactionData");

    try {
      getJSONObject().put("transactionData",
          transactionData == null ? org.json.JSONObject.NULL : transactionData.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.transactionData);
    return this;
  }


  /** Clears the 'cardType' field, the 'has' method for this field will now return false */
  public void clearCardType() {
    unlogChange("cardType");
    getJSONObject().remove("cardType");
    cacheRemoveValue(CacheKey.cardType);
  }

  /** Clears the 'entryType' field, the 'has' method for this field will now return false */
  public void clearEntryType() {
    unlogChange("entryType");
    getJSONObject().remove("entryType");
    cacheRemoveValue(CacheKey.entryType);
  }

  /** Clears the 'track1' field, the 'has' method for this field will now return false */
  public void clearTrack1() {
    unlogChange("track1");
    getJSONObject().remove("track1");
    cacheRemoveValue(CacheKey.track1);
  }

  /** Clears the 'track2' field, the 'has' method for this field will now return false */
  public void clearTrack2() {
    unlogChange("track2");
    getJSONObject().remove("track2");
    cacheRemoveValue(CacheKey.track2);
  }

  /** Clears the 'track3' field, the 'has' method for this field will now return false */
  public void clearTrack3() {
    unlogChange("track3");
    getJSONObject().remove("track3");
    cacheRemoveValue(CacheKey.track3);
  }

  /** Clears the 'encrypted' field, the 'has' method for this field will now return false */
  public void clearEncrypted() {
    unlogChange("encrypted");
    getJSONObject().remove("encrypted");
    cacheRemoveValue(CacheKey.encrypted);
  }

  /** Clears the 'manualEntered' field, the 'has' method for this field will now return false */
  public void clearManualEntered() {
    unlogChange("manualEntered");
    getJSONObject().remove("manualEntered");
    cacheRemoveValue(CacheKey.manualEntered);
  }

  /** Clears the 'async' field, the 'has' method for this field will now return false */
  public void clearAsync() {
    unlogChange("async");
    getJSONObject().remove("async");
    cacheRemoveValue(CacheKey.async);
  }

  /** Clears the 'maskedTrack1' field, the 'has' method for this field will now return false */
  public void clearMaskedTrack1() {
    unlogChange("maskedTrack1");
    getJSONObject().remove("maskedTrack1");
    cacheRemoveValue(CacheKey.maskedTrack1);
  }

  /** Clears the 'maskedTrack2' field, the 'has' method for this field will now return false */
  public void clearMaskedTrack2() {
    unlogChange("maskedTrack2");
    getJSONObject().remove("maskedTrack2");
    cacheRemoveValue(CacheKey.maskedTrack2);
  }

  /** Clears the 'maskedTrack3' field, the 'has' method for this field will now return false */
  public void clearMaskedTrack3() {
    unlogChange("maskedTrack3");
    getJSONObject().remove("maskedTrack3");
    cacheRemoveValue(CacheKey.maskedTrack3);
  }

  /** Clears the 'uniqueToken' field, the 'has' method for this field will now return false */
  public void clearUniqueToken() {
    unlogChange("uniqueToken");
    getJSONObject().remove("uniqueToken");
    cacheRemoveValue(CacheKey.uniqueToken);
  }

  /** Clears the 'pan' field, the 'has' method for this field will now return false */
  public void clearPan() {
    unlogChange("pan");
    getJSONObject().remove("pan");
    cacheRemoveValue(CacheKey.pan);
  }

  /** Clears the 'firstName' field, the 'has' method for this field will now return false */
  public void clearFirstName() {
    unlogChange("firstName");
    getJSONObject().remove("firstName");
    cacheRemoveValue(CacheKey.firstName);
  }

  /** Clears the 'lastName' field, the 'has' method for this field will now return false */
  public void clearLastName() {
    unlogChange("lastName");
    getJSONObject().remove("lastName");
    cacheRemoveValue(CacheKey.lastName);
  }

  /** Clears the 'countryCode' field, the 'has' method for this field will now return false */
  public void clearCountryCode() {
    unlogChange("countryCode");
    getJSONObject().remove("countryCode");
    cacheRemoveValue(CacheKey.countryCode);
  }

  /** Clears the 'exp' field, the 'has' method for this field will now return false */
  public void clearExp() {
    unlogChange("exp");
    getJSONObject().remove("exp");
    cacheRemoveValue(CacheKey.exp);
  }

  /** Clears the 'streetNumber' field, the 'has' method for this field will now return false */
  public void clearStreetNumber() {
    unlogChange("streetNumber");
    getJSONObject().remove("streetNumber");
    cacheRemoveValue(CacheKey.streetNumber);
  }

  /** Clears the 'zip' field, the 'has' method for this field will now return false */
  public void clearZip() {
    unlogChange("zip");
    getJSONObject().remove("zip");
    cacheRemoveValue(CacheKey.zip);
  }

  /** Clears the 'cvv' field, the 'has' method for this field will now return false */
  public void clearCvv() {
    unlogChange("cvv");
    getJSONObject().remove("cvv");
    cacheRemoveValue(CacheKey.cvv);
  }

  /** Clears the 'last4' field, the 'has' method for this field will now return false */
  public void clearLast4() {
    unlogChange("last4");
    getJSONObject().remove("last4");
    cacheRemoveValue(CacheKey.last4);
  }

  /** Clears the 'first4' field, the 'has' method for this field will now return false */
  public void clearFirst4() {
    unlogChange("first4");
    getJSONObject().remove("first4");
    cacheRemoveValue(CacheKey.first4);
  }

  /** Clears the 'dukptSerial' field, the 'has' method for this field will now return false */
  public void clearDukptSerial() {
    unlogChange("dukptSerial");
    getJSONObject().remove("dukptSerial");
    cacheRemoveValue(CacheKey.dukptSerial);
  }

  /** Clears the 'swipeStatus' field, the 'has' method for this field will now return false */
  public void clearSwipeStatus() {
    unlogChange("swipeStatus");
    getJSONObject().remove("swipeStatus");
    cacheRemoveValue(CacheKey.swipeStatus);
  }

  /** Clears the 'fingerprint' field, the 'has' method for this field will now return false */
  public void clearFingerprint() {
    unlogChange("fingerprint");
    getJSONObject().remove("fingerprint");
    cacheRemoveValue(CacheKey.fingerprint);
  }

  /** Clears the 'deviceSerial' field, the 'has' method for this field will now return false */
  public void clearDeviceSerial() {
    unlogChange("deviceSerial");
    getJSONObject().remove("deviceSerial");
    cacheRemoveValue(CacheKey.deviceSerial);
  }

  /** Clears the 'transactionData' field, the 'has' method for this field will now return false */
  public void clearTransactionData() {
    unlogChange("transactionData");
    getJSONObject().remove("transactionData");
    cacheRemoveValue(CacheKey.transactionData);
  }


  private void logChange(java.lang.String field) {
    if (changeLog == null) {
      changeLog = new android.os.Bundle();
    }
    changeLog.putString(field, null);
  }

  private void unlogChange(java.lang.String field) {
    if (changeLog != null) {
      changeLog.remove(field);
    }
  }

  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return changeLog != null;
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    changeLog = null;
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public PaymentRequestCardDetails copyChanges() {
    PaymentRequestCardDetails copy = new PaymentRequestCardDetails();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(PaymentRequestCardDetails src) {
    if (src.changeLog != null) {
      try {
        // Make a copy of the source so the destination fields are copies
        org.json.JSONObject srcObj = new PaymentRequestCardDetails(src).getJSONObject();
        org.json.JSONObject dstObj = getJSONObject();
        for (java.lang.String field : src.changeLog.keySet()) {
          dstObj.put(field, srcObj.get(field));
          logChange(field);
        }
      } catch (org.json.JSONException e) {
        throw new java.lang.IllegalArgumentException(e);
      }
    }
  }


  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    if (bundle == null) {
      bundle = new android.os.Bundle();
    }
    return bundle;
  }

  @Override
  public String toString() {
    String json = getJSONObject().toString();

    if (bundle != null) {
      bundle.isEmpty(); // Triggers unparcel
    }

    if (changeLog != null) {
      changeLog.isEmpty(); // Triggers unparcel
    }

    return "PaymentRequestCardDetails{" +
        "json='" + json + "'" +
        ", bundle=" + bundle +
        ", changeLog=" + changeLog +
        '}';
  }

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
	  com.clover.sdk.v3.JsonParcelHelper.wrap(getJSONObject()).writeToParcel(dest, 0);
    dest.writeBundle(bundle);
    dest.writeBundle(changeLog);
  }

  public static final android.os.Parcelable.Creator<PaymentRequestCardDetails> CREATOR = new android.os.Parcelable.Creator<PaymentRequestCardDetails>() {
    @Override
    public PaymentRequestCardDetails createFromParcel(android.os.Parcel in) {
      PaymentRequestCardDetails instance = new PaymentRequestCardDetails(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.bundle = in.readBundle(getClass().getClassLoader());
      instance.changeLog = in.readBundle();
      return instance;
    }

    @Override
    public PaymentRequestCardDetails[] newArray(int size) {
      return new PaymentRequestCardDetails[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<PaymentRequestCardDetails> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<PaymentRequestCardDetails>() {
    @Override
    public PaymentRequestCardDetails create(org.json.JSONObject jsonObject) {
      return new PaymentRequestCardDetails(jsonObject);
    }
  };


  public interface Constraints {

    public static final boolean CARDTYPE_IS_REQUIRED = false;

    public static final boolean ENTRYTYPE_IS_REQUIRED = false;

    public static final boolean TRACK1_IS_REQUIRED = false;

    public static final boolean TRACK2_IS_REQUIRED = false;

    public static final boolean TRACK3_IS_REQUIRED = false;

    public static final boolean ENCRYPTED_IS_REQUIRED = false;

    public static final boolean MANUALENTERED_IS_REQUIRED = false;

    public static final boolean ASYNC_IS_REQUIRED = false;

    public static final boolean MASKEDTRACK1_IS_REQUIRED = false;

    public static final boolean MASKEDTRACK2_IS_REQUIRED = false;

    public static final boolean MASKEDTRACK3_IS_REQUIRED = false;

    public static final boolean UNIQUETOKEN_IS_REQUIRED = false;

    public static final boolean PAN_IS_REQUIRED = false;

    public static final boolean FIRSTNAME_IS_REQUIRED = false;

    public static final boolean LASTNAME_IS_REQUIRED = false;

    public static final boolean COUNTRYCODE_IS_REQUIRED = false;

    public static final boolean EXP_IS_REQUIRED = false;

    public static final boolean STREETNUMBER_IS_REQUIRED = false;

    public static final boolean ZIP_IS_REQUIRED = false;

    public static final boolean CVV_IS_REQUIRED = false;

    public static final boolean LAST4_IS_REQUIRED = false;

    public static final boolean FIRST4_IS_REQUIRED = false;

    public static final boolean DUKPTSERIAL_IS_REQUIRED = false;

    public static final boolean SWIPESTATUS_IS_REQUIRED = false;

    public static final boolean FINGERPRINT_IS_REQUIRED = false;

    public static final boolean DEVICESERIAL_IS_REQUIRED = false;

    public static final boolean TRANSACTIONDATA_IS_REQUIRED = false;

  }

}
