/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2013 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.merchant;

@SuppressWarnings("all")
public final class Merchant implements android.os.Parcelable, com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

 /**
   * Unique identifier
  */
  public java.lang.String getId() {
    return cacheGet(CacheKey.id);
  }
 /**
   * Name of the merchant
  */
  public java.lang.String getName() {
    return cacheGet(CacheKey.name);
  }
 /**
   * The account that owns this merchant
  */
  public com.clover.sdk.v3.employees.Employee getOwner() {
    return cacheGet(CacheKey.owner);
  }
 /**
   * The address of the merchant.
  */
  public com.clover.sdk.v3.base.Address getAddress() {
    return cacheGet(CacheKey.address);
  }
  public java.lang.String getDefaultCurrency() {
    return cacheGet(CacheKey.defaultCurrency);
  }
  public java.lang.String getPhoneNumber() {
    return cacheGet(CacheKey.phoneNumber);
  }
  public java.lang.String getWebsite() {
    return cacheGet(CacheKey.website);
  }
  public java.lang.Long getCreatedTime() {
    return cacheGet(CacheKey.createdTime);
  }
  public com.clover.sdk.v3.merchant.MerchantProperties getProperties() {
    return cacheGet(CacheKey.properties);
  }
  public com.clover.sdk.v3.merchant.Gateway getGateway() {
    return cacheGet(CacheKey.gateway);
  }
  public java.util.List<com.clover.sdk.v3.merchant.TipSuggestion> getTipSuggestions() {
    return cacheGet(CacheKey.tipSuggestions);
  }
 /**
   * This merchant's employees
  */
  public java.util.List<com.clover.sdk.v3.employees.Employee> getEmployees() {
    return cacheGet(CacheKey.employees);
  }
 /**
   * This merchant's inventory items
  */
  public java.util.List<com.clover.sdk.v3.inventory.Item> getItems() {
    return cacheGet(CacheKey.items);
  }
 /**
   * This merchant's inventory tags
  */
  public java.util.List<com.clover.sdk.v3.inventory.Tag> getTags() {
    return cacheGet(CacheKey.tags);
  }
 /**
   * This merchant's supported tenders
  */
  public java.util.List<com.clover.sdk.v3.base.Tender> getTenders() {
    return cacheGet(CacheKey.tenders);
  }
 /**
   * This merchant's employees' shifts
  */
  public java.util.List<com.clover.sdk.v3.employees.Shift> getShifts() {
    return cacheGet(CacheKey.shifts);
  }
 /**
   * This merchant's orders
  */
  public java.util.List<com.clover.sdk.v3.order.Order> getOrders() {
    return cacheGet(CacheKey.orders);
  }
 /**
   * This merchant's order payments
  */
  public java.util.List<com.clover.sdk.v3.payments.Payment> getPayments() {
    return cacheGet(CacheKey.payments);
  }
  public java.util.List<com.clover.sdk.v3.inventory.TaxRate> getTaxRates() {
    return cacheGet(CacheKey.taxRates);
  }
  public java.util.List<com.clover.sdk.v3.printer.Printer> getPrinters() {
    return cacheGet(CacheKey.printers);
  }
  public java.util.List<com.clover.sdk.v3.inventory.ModifierGroup> getModifierGroups() {
    return cacheGet(CacheKey.modifierGroups);
  }
  public java.util.List<com.clover.sdk.v3.order.OrderType> getOrderTypes() {
    return cacheGet(CacheKey.orderTypes);
  }
 /**
   * The merchant's reseller
  */
  public com.clover.sdk.v3.base.Reference getReseller() {
    return cacheGet(CacheKey.reseller);
  }


  private enum CacheKey {
    id {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractId();
      }
    },
    name {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractName();
      }
    },
    owner {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractOwner();
      }
    },
    address {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractAddress();
      }
    },
    defaultCurrency {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractDefaultCurrency();
      }
    },
    phoneNumber {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractPhoneNumber();
      }
    },
    website {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractWebsite();
      }
    },
    createdTime {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractCreatedTime();
      }
    },
    properties {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractProperties();
      }
    },
    gateway {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractGateway();
      }
    },
    tipSuggestions {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractTipSuggestions();
      }
    },
    employees {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractEmployees();
      }
    },
    items {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractItems();
      }
    },
    tags {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractTags();
      }
    },
    tenders {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractTenders();
      }
    },
    shifts {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractShifts();
      }
    },
    orders {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractOrders();
      }
    },
    payments {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractPayments();
      }
    },
    taxRates {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractTaxRates();
      }
    },
    printers {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractPrinters();
      }
    },
    modifierGroups {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractModifierGroups();
      }
    },
    orderTypes {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractOrderTypes();
      }
    },
    reseller {
      @Override
      public Object extractValue(Merchant instance) {
        return instance.extractReseller();
      }
    },
    ;

    public abstract Object extractValue(Merchant instance);
  }

  private org.json.JSONObject jsonObject = null;
  private android.os.Bundle bundle = null;
  private android.os.Bundle changeLog = null;
  private Object[] cache = null;
  private byte[] cacheState = null;

  private static final byte STATE_NOT_CACHED = 0;
  private static final byte STATE_CACHED_NO_VALUE = 1;
  private static final byte STATE_CACHED_VALUE = 2;

  /**
   * Constructs a new empty instance.
   */
  public Merchant() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public Merchant(String json) throws java.lang.IllegalArgumentException {
    try {
      this.jsonObject = new org.json.JSONObject(json);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public Merchant(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public Merchant(Merchant src) {
    if (src.jsonObject != null) {
      this.jsonObject = com.clover.sdk.v3.JsonHelper.deepCopy(src.getJSONObject());
    }
  }

  private <T> T cacheGet(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return (T) cache[index];
  }

  private boolean cacheValueIsNotNull(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cache[index] != null;
  }

  private boolean cacheHasKey(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cacheState[index] == STATE_CACHED_VALUE;
  }

  private void cacheRemoveValue(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    cache[index] = null;
    cacheState[index] = STATE_CACHED_NO_VALUE;
  }

  private void cacheMarkDirty(CacheKey key) {
    if (cache != null) {
      int index = key.ordinal();
      cache[index] = null;
      cacheState[index] = STATE_NOT_CACHED;
    }
  }

  private void populateCache(int index) {
    if (cache == null) {
      int size = CacheKey.values().length;
      cache = new Object[size];
      cacheState = new byte[size];
    }

    if (cacheState[index] == STATE_NOT_CACHED) {
      CacheKey key = CacheKey.values()[index];

      if (getJSONObject().has(key.name())) {
        cache[index] = key.extractValue(this);
        cacheState[index] = STATE_CACHED_VALUE;
      } else {
        cacheState[index] = STATE_CACHED_NO_VALUE;
      }
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    if (jsonObject == null) {
      jsonObject = new org.json.JSONObject();
    }
    return jsonObject;
  }


  @Override
  public void validate() {
    java.lang.String id = getId();
    if (id != null && id.length() > 13) { throw new IllegalArgumentException("Maximum string length exceeded for 'id'");}

    java.lang.String name = getName();
    if (name == null) throw new java.lang.IllegalArgumentException("'name' is required to be non-null");
    if (name != null && name.length() > 127) { throw new IllegalArgumentException("Maximum string length exceeded for 'name'");}

    com.clover.sdk.v3.employees.Employee owner = getOwner();
    if (owner == null) throw new java.lang.IllegalArgumentException("'owner' is required to be non-null");

    java.lang.String defaultCurrency = getDefaultCurrency();
    if (defaultCurrency != null && defaultCurrency.length() > 3) { throw new IllegalArgumentException("Maximum string length exceeded for 'defaultCurrency'");}

    java.lang.String phoneNumber = getPhoneNumber();
    if (phoneNumber != null && phoneNumber.length() > 21) { throw new IllegalArgumentException("Maximum string length exceeded for 'phoneNumber'");}

    java.lang.String website = getWebsite();
    if (website != null && website.length() > 255) { throw new IllegalArgumentException("Maximum string length exceeded for 'website'");}
  }



  private java.lang.String extractId() {
    return getJSONObject().isNull("id") ? null :
      getJSONObject().optString("id");
  }


  private java.lang.String extractName() {
    return getJSONObject().isNull("name") ? null :
      getJSONObject().optString("name");
  }


  private com.clover.sdk.v3.employees.Employee extractOwner() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("owner");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.employees.Employee(getJSONObject().optJSONObject("owner"));
    }
    return null;
  }


  private com.clover.sdk.v3.base.Address extractAddress() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("address");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.base.Address(getJSONObject().optJSONObject("address"));
    }
    return null;
  }


  private java.lang.String extractDefaultCurrency() {
    return getJSONObject().isNull("defaultCurrency") ? null :
      getJSONObject().optString("defaultCurrency");
  }


  private java.lang.String extractPhoneNumber() {
    return getJSONObject().isNull("phoneNumber") ? null :
      getJSONObject().optString("phoneNumber");
  }


  private java.lang.String extractWebsite() {
    return getJSONObject().isNull("website") ? null :
      getJSONObject().optString("website");
  }


  private java.lang.Long extractCreatedTime() {
    return getJSONObject().isNull("createdTime") ? null :
      getJSONObject().optLong("createdTime");
  }


  private com.clover.sdk.v3.merchant.MerchantProperties extractProperties() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("properties");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.merchant.MerchantProperties(getJSONObject().optJSONObject("properties"));
    }
    return null;
  }


  private com.clover.sdk.v3.merchant.Gateway extractGateway() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("gateway");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.merchant.Gateway(getJSONObject().optJSONObject("gateway"));
    }
    return null;
  }


  private java.util.List<com.clover.sdk.v3.merchant.TipSuggestion> extractTipSuggestions() {
    if (getJSONObject().isNull("tipSuggestions")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("tipSuggestions");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.merchant.TipSuggestion> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.merchant.TipSuggestion>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.merchant.TipSuggestion item = new com.clover.sdk.v3.merchant.TipSuggestion(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.employees.Employee> extractEmployees() {
    if (getJSONObject().isNull("employees")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("employees");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.employees.Employee> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.employees.Employee>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.employees.Employee item = new com.clover.sdk.v3.employees.Employee(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.inventory.Item> extractItems() {
    if (getJSONObject().isNull("items")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("items");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.inventory.Item> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.inventory.Item>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.inventory.Item item = new com.clover.sdk.v3.inventory.Item(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.inventory.Tag> extractTags() {
    if (getJSONObject().isNull("tags")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("tags");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.inventory.Tag> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.inventory.Tag>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.inventory.Tag item = new com.clover.sdk.v3.inventory.Tag(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.base.Tender> extractTenders() {
    if (getJSONObject().isNull("tenders")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("tenders");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.base.Tender> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.base.Tender>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.base.Tender item = new com.clover.sdk.v3.base.Tender(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.employees.Shift> extractShifts() {
    if (getJSONObject().isNull("shifts")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("shifts");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.employees.Shift> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.employees.Shift>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.employees.Shift item = new com.clover.sdk.v3.employees.Shift(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.order.Order> extractOrders() {
    if (getJSONObject().isNull("orders")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("orders");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.order.Order> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.order.Order>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.order.Order item = new com.clover.sdk.v3.order.Order(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.payments.Payment> extractPayments() {
    if (getJSONObject().isNull("payments")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("payments");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.payments.Payment> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.payments.Payment>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.payments.Payment item = new com.clover.sdk.v3.payments.Payment(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.inventory.TaxRate> extractTaxRates() {
    if (getJSONObject().isNull("taxRates")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("taxRates");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.inventory.TaxRate> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.inventory.TaxRate>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.inventory.TaxRate item = new com.clover.sdk.v3.inventory.TaxRate(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.printer.Printer> extractPrinters() {
    if (getJSONObject().isNull("printers")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("printers");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.printer.Printer> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.printer.Printer>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.printer.Printer item = new com.clover.sdk.v3.printer.Printer(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.inventory.ModifierGroup> extractModifierGroups() {
    if (getJSONObject().isNull("modifierGroups")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("modifierGroups");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.inventory.ModifierGroup> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.inventory.ModifierGroup>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.inventory.ModifierGroup item = new com.clover.sdk.v3.inventory.ModifierGroup(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.order.OrderType> extractOrderTypes() {
    if (getJSONObject().isNull("orderTypes")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("orderTypes");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.order.OrderType> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.order.OrderType>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.order.OrderType item = new com.clover.sdk.v3.order.OrderType(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private com.clover.sdk.v3.base.Reference extractReseller() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("reseller");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.base.Reference(getJSONObject().optJSONObject("reseller"));
    }
    return null;
  }


  /** Checks whether the 'id' field is set and is not null */
  public boolean isNotNullId() {
    return cacheValueIsNotNull(CacheKey.id);
  }

  /** Checks whether the 'name' field is set and is not null */
  public boolean isNotNullName() {
    return cacheValueIsNotNull(CacheKey.name);
  }

  /** Checks whether the 'owner' field is set and is not null */
  public boolean isNotNullOwner() {
    return cacheValueIsNotNull(CacheKey.owner);
  }

  /** Checks whether the 'address' field is set and is not null */
  public boolean isNotNullAddress() {
    return cacheValueIsNotNull(CacheKey.address);
  }

  /** Checks whether the 'defaultCurrency' field is set and is not null */
  public boolean isNotNullDefaultCurrency() {
    return cacheValueIsNotNull(CacheKey.defaultCurrency);
  }

  /** Checks whether the 'phoneNumber' field is set and is not null */
  public boolean isNotNullPhoneNumber() {
    return cacheValueIsNotNull(CacheKey.phoneNumber);
  }

  /** Checks whether the 'website' field is set and is not null */
  public boolean isNotNullWebsite() {
    return cacheValueIsNotNull(CacheKey.website);
  }

  /** Checks whether the 'createdTime' field is set and is not null */
  public boolean isNotNullCreatedTime() {
    return cacheValueIsNotNull(CacheKey.createdTime);
  }

  /** Checks whether the 'properties' field is set and is not null */
  public boolean isNotNullProperties() {
    return cacheValueIsNotNull(CacheKey.properties);
  }

  /** Checks whether the 'gateway' field is set and is not null */
  public boolean isNotNullGateway() {
    return cacheValueIsNotNull(CacheKey.gateway);
  }

  /** Checks whether the 'tipSuggestions' field is set and is not null */
  public boolean isNotNullTipSuggestions() {
    return cacheValueIsNotNull(CacheKey.tipSuggestions);
  }

  /** Checks whether the 'tipSuggestions' field is set and is not null and is not empty */
  public boolean isNotEmptyTipSuggestions() {
    return isNotNullTipSuggestions() && !getTipSuggestions().isEmpty();
  }

  /** Checks whether the 'employees' field is set and is not null */
  public boolean isNotNullEmployees() {
    return cacheValueIsNotNull(CacheKey.employees);
  }

  /** Checks whether the 'employees' field is set and is not null and is not empty */
  public boolean isNotEmptyEmployees() {
    return isNotNullEmployees() && !getEmployees().isEmpty();
  }

  /** Checks whether the 'items' field is set and is not null */
  public boolean isNotNullItems() {
    return cacheValueIsNotNull(CacheKey.items);
  }

  /** Checks whether the 'items' field is set and is not null and is not empty */
  public boolean isNotEmptyItems() {
    return isNotNullItems() && !getItems().isEmpty();
  }

  /** Checks whether the 'tags' field is set and is not null */
  public boolean isNotNullTags() {
    return cacheValueIsNotNull(CacheKey.tags);
  }

  /** Checks whether the 'tags' field is set and is not null and is not empty */
  public boolean isNotEmptyTags() {
    return isNotNullTags() && !getTags().isEmpty();
  }

  /** Checks whether the 'tenders' field is set and is not null */
  public boolean isNotNullTenders() {
    return cacheValueIsNotNull(CacheKey.tenders);
  }

  /** Checks whether the 'tenders' field is set and is not null and is not empty */
  public boolean isNotEmptyTenders() {
    return isNotNullTenders() && !getTenders().isEmpty();
  }

  /** Checks whether the 'shifts' field is set and is not null */
  public boolean isNotNullShifts() {
    return cacheValueIsNotNull(CacheKey.shifts);
  }

  /** Checks whether the 'shifts' field is set and is not null and is not empty */
  public boolean isNotEmptyShifts() {
    return isNotNullShifts() && !getShifts().isEmpty();
  }

  /** Checks whether the 'orders' field is set and is not null */
  public boolean isNotNullOrders() {
    return cacheValueIsNotNull(CacheKey.orders);
  }

  /** Checks whether the 'orders' field is set and is not null and is not empty */
  public boolean isNotEmptyOrders() {
    return isNotNullOrders() && !getOrders().isEmpty();
  }

  /** Checks whether the 'payments' field is set and is not null */
  public boolean isNotNullPayments() {
    return cacheValueIsNotNull(CacheKey.payments);
  }

  /** Checks whether the 'payments' field is set and is not null and is not empty */
  public boolean isNotEmptyPayments() {
    return isNotNullPayments() && !getPayments().isEmpty();
  }

  /** Checks whether the 'taxRates' field is set and is not null */
  public boolean isNotNullTaxRates() {
    return cacheValueIsNotNull(CacheKey.taxRates);
  }

  /** Checks whether the 'taxRates' field is set and is not null and is not empty */
  public boolean isNotEmptyTaxRates() {
    return isNotNullTaxRates() && !getTaxRates().isEmpty();
  }

  /** Checks whether the 'printers' field is set and is not null */
  public boolean isNotNullPrinters() {
    return cacheValueIsNotNull(CacheKey.printers);
  }

  /** Checks whether the 'printers' field is set and is not null and is not empty */
  public boolean isNotEmptyPrinters() {
    return isNotNullPrinters() && !getPrinters().isEmpty();
  }

  /** Checks whether the 'modifierGroups' field is set and is not null */
  public boolean isNotNullModifierGroups() {
    return cacheValueIsNotNull(CacheKey.modifierGroups);
  }

  /** Checks whether the 'modifierGroups' field is set and is not null and is not empty */
  public boolean isNotEmptyModifierGroups() {
    return isNotNullModifierGroups() && !getModifierGroups().isEmpty();
  }

  /** Checks whether the 'orderTypes' field is set and is not null */
  public boolean isNotNullOrderTypes() {
    return cacheValueIsNotNull(CacheKey.orderTypes);
  }

  /** Checks whether the 'orderTypes' field is set and is not null and is not empty */
  public boolean isNotEmptyOrderTypes() {
    return isNotNullOrderTypes() && !getOrderTypes().isEmpty();
  }

  /** Checks whether the 'reseller' field is set and is not null */
  public boolean isNotNullReseller() {
    return cacheValueIsNotNull(CacheKey.reseller);
  }


  /** Checks whether the 'id' field has been set, however the value could be null */
  public boolean hasId() {
    return cacheHasKey(CacheKey.id);
  }

  /** Checks whether the 'name' field has been set, however the value could be null */
  public boolean hasName() {
    return cacheHasKey(CacheKey.name);
  }

  /** Checks whether the 'owner' field has been set, however the value could be null */
  public boolean hasOwner() {
    return cacheHasKey(CacheKey.owner);
  }

  /** Checks whether the 'address' field has been set, however the value could be null */
  public boolean hasAddress() {
    return cacheHasKey(CacheKey.address);
  }

  /** Checks whether the 'defaultCurrency' field has been set, however the value could be null */
  public boolean hasDefaultCurrency() {
    return cacheHasKey(CacheKey.defaultCurrency);
  }

  /** Checks whether the 'phoneNumber' field has been set, however the value could be null */
  public boolean hasPhoneNumber() {
    return cacheHasKey(CacheKey.phoneNumber);
  }

  /** Checks whether the 'website' field has been set, however the value could be null */
  public boolean hasWebsite() {
    return cacheHasKey(CacheKey.website);
  }

  /** Checks whether the 'createdTime' field has been set, however the value could be null */
  public boolean hasCreatedTime() {
    return cacheHasKey(CacheKey.createdTime);
  }

  /** Checks whether the 'properties' field has been set, however the value could be null */
  public boolean hasProperties() {
    return cacheHasKey(CacheKey.properties);
  }

  /** Checks whether the 'gateway' field has been set, however the value could be null */
  public boolean hasGateway() {
    return cacheHasKey(CacheKey.gateway);
  }

  /** Checks whether the 'tipSuggestions' field has been set, however the value could be null */
  public boolean hasTipSuggestions() {
    return cacheHasKey(CacheKey.tipSuggestions);
  }

  /** Checks whether the 'employees' field has been set, however the value could be null */
  public boolean hasEmployees() {
    return cacheHasKey(CacheKey.employees);
  }

  /** Checks whether the 'items' field has been set, however the value could be null */
  public boolean hasItems() {
    return cacheHasKey(CacheKey.items);
  }

  /** Checks whether the 'tags' field has been set, however the value could be null */
  public boolean hasTags() {
    return cacheHasKey(CacheKey.tags);
  }

  /** Checks whether the 'tenders' field has been set, however the value could be null */
  public boolean hasTenders() {
    return cacheHasKey(CacheKey.tenders);
  }

  /** Checks whether the 'shifts' field has been set, however the value could be null */
  public boolean hasShifts() {
    return cacheHasKey(CacheKey.shifts);
  }

  /** Checks whether the 'orders' field has been set, however the value could be null */
  public boolean hasOrders() {
    return cacheHasKey(CacheKey.orders);
  }

  /** Checks whether the 'payments' field has been set, however the value could be null */
  public boolean hasPayments() {
    return cacheHasKey(CacheKey.payments);
  }

  /** Checks whether the 'taxRates' field has been set, however the value could be null */
  public boolean hasTaxRates() {
    return cacheHasKey(CacheKey.taxRates);
  }

  /** Checks whether the 'printers' field has been set, however the value could be null */
  public boolean hasPrinters() {
    return cacheHasKey(CacheKey.printers);
  }

  /** Checks whether the 'modifierGroups' field has been set, however the value could be null */
  public boolean hasModifierGroups() {
    return cacheHasKey(CacheKey.modifierGroups);
  }

  /** Checks whether the 'orderTypes' field has been set, however the value could be null */
  public boolean hasOrderTypes() {
    return cacheHasKey(CacheKey.orderTypes);
  }

  /** Checks whether the 'reseller' field has been set, however the value could be null */
  public boolean hasReseller() {
    return cacheHasKey(CacheKey.reseller);
  }


  /**
   * Sets the field 'id'.
   */
  public Merchant setId(java.lang.String id) {
    logChange("id");

    try {
      getJSONObject().put("id", id == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(id));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.id);
    return this;
  }

  /**
   * Sets the field 'name'.
   */
  public Merchant setName(java.lang.String name) {
    logChange("name");

    try {
      getJSONObject().put("name", name == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(name));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.name);
    return this;
  }

  /**
   * Sets the field 'owner'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public Merchant setOwner(com.clover.sdk.v3.employees.Employee owner) {
    logChange("owner");

    try {
      getJSONObject().put("owner",
          owner == null ? org.json.JSONObject.NULL : owner.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.owner);
    return this;
  }

  /**
   * Sets the field 'address'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public Merchant setAddress(com.clover.sdk.v3.base.Address address) {
    logChange("address");

    try {
      getJSONObject().put("address",
          address == null ? org.json.JSONObject.NULL : address.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.address);
    return this;
  }

  /**
   * Sets the field 'defaultCurrency'.
   */
  public Merchant setDefaultCurrency(java.lang.String defaultCurrency) {
    logChange("defaultCurrency");

    try {
      getJSONObject().put("defaultCurrency", defaultCurrency == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(defaultCurrency));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.defaultCurrency);
    return this;
  }

  /**
   * Sets the field 'phoneNumber'.
   */
  public Merchant setPhoneNumber(java.lang.String phoneNumber) {
    logChange("phoneNumber");

    try {
      getJSONObject().put("phoneNumber", phoneNumber == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(phoneNumber));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.phoneNumber);
    return this;
  }

  /**
   * Sets the field 'website'.
   */
  public Merchant setWebsite(java.lang.String website) {
    logChange("website");

    try {
      getJSONObject().put("website", website == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(website));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.website);
    return this;
  }

  /**
   * Sets the field 'createdTime'.
   */
  public Merchant setCreatedTime(java.lang.Long createdTime) {
    logChange("createdTime");

    try {
      getJSONObject().put("createdTime", createdTime == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(createdTime));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.createdTime);
    return this;
  }

  /**
   * Sets the field 'properties'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public Merchant setProperties(com.clover.sdk.v3.merchant.MerchantProperties properties) {
    logChange("properties");

    try {
      getJSONObject().put("properties",
          properties == null ? org.json.JSONObject.NULL : properties.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.properties);
    return this;
  }

  /**
   * Sets the field 'gateway'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public Merchant setGateway(com.clover.sdk.v3.merchant.Gateway gateway) {
    logChange("gateway");

    try {
      getJSONObject().put("gateway",
          gateway == null ? org.json.JSONObject.NULL : gateway.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.gateway);
    return this;
  }

  /**
   * Sets the field 'tipSuggestions'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public Merchant setTipSuggestions(java.util.List<com.clover.sdk.v3.merchant.TipSuggestion> tipSuggestions) {
    logChange("tipSuggestions");

    try {
      if (tipSuggestions == null) {
        getJSONObject().put("tipSuggestions", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.tipSuggestions);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.merchant.TipSuggestion obj : tipSuggestions) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("tipSuggestions", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.tipSuggestions);
    return this;
  }

  /**
   * Sets the field 'employees'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public Merchant setEmployees(java.util.List<com.clover.sdk.v3.employees.Employee> employees) {
    logChange("employees");

    try {
      if (employees == null) {
        getJSONObject().put("employees", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.employees);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.employees.Employee obj : employees) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("employees", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.employees);
    return this;
  }

  /**
   * Sets the field 'items'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public Merchant setItems(java.util.List<com.clover.sdk.v3.inventory.Item> items) {
    logChange("items");

    try {
      if (items == null) {
        getJSONObject().put("items", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.items);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.inventory.Item obj : items) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("items", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.items);
    return this;
  }

  /**
   * Sets the field 'tags'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public Merchant setTags(java.util.List<com.clover.sdk.v3.inventory.Tag> tags) {
    logChange("tags");

    try {
      if (tags == null) {
        getJSONObject().put("tags", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.tags);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.inventory.Tag obj : tags) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("tags", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.tags);
    return this;
  }

  /**
   * Sets the field 'tenders'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public Merchant setTenders(java.util.List<com.clover.sdk.v3.base.Tender> tenders) {
    logChange("tenders");

    try {
      if (tenders == null) {
        getJSONObject().put("tenders", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.tenders);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.base.Tender obj : tenders) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("tenders", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.tenders);
    return this;
  }

  /**
   * Sets the field 'shifts'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public Merchant setShifts(java.util.List<com.clover.sdk.v3.employees.Shift> shifts) {
    logChange("shifts");

    try {
      if (shifts == null) {
        getJSONObject().put("shifts", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.shifts);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.employees.Shift obj : shifts) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("shifts", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.shifts);
    return this;
  }

  /**
   * Sets the field 'orders'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public Merchant setOrders(java.util.List<com.clover.sdk.v3.order.Order> orders) {
    logChange("orders");

    try {
      if (orders == null) {
        getJSONObject().put("orders", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.orders);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.order.Order obj : orders) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("orders", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.orders);
    return this;
  }

  /**
   * Sets the field 'payments'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public Merchant setPayments(java.util.List<com.clover.sdk.v3.payments.Payment> payments) {
    logChange("payments");

    try {
      if (payments == null) {
        getJSONObject().put("payments", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.payments);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.payments.Payment obj : payments) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("payments", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.payments);
    return this;
  }

  /**
   * Sets the field 'taxRates'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public Merchant setTaxRates(java.util.List<com.clover.sdk.v3.inventory.TaxRate> taxRates) {
    logChange("taxRates");

    try {
      if (taxRates == null) {
        getJSONObject().put("taxRates", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.taxRates);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.inventory.TaxRate obj : taxRates) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("taxRates", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.taxRates);
    return this;
  }

  /**
   * Sets the field 'printers'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public Merchant setPrinters(java.util.List<com.clover.sdk.v3.printer.Printer> printers) {
    logChange("printers");

    try {
      if (printers == null) {
        getJSONObject().put("printers", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.printers);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.printer.Printer obj : printers) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("printers", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.printers);
    return this;
  }

  /**
   * Sets the field 'modifierGroups'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public Merchant setModifierGroups(java.util.List<com.clover.sdk.v3.inventory.ModifierGroup> modifierGroups) {
    logChange("modifierGroups");

    try {
      if (modifierGroups == null) {
        getJSONObject().put("modifierGroups", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.modifierGroups);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.inventory.ModifierGroup obj : modifierGroups) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("modifierGroups", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.modifierGroups);
    return this;
  }

  /**
   * Sets the field 'orderTypes'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public Merchant setOrderTypes(java.util.List<com.clover.sdk.v3.order.OrderType> orderTypes) {
    logChange("orderTypes");

    try {
      if (orderTypes == null) {
        getJSONObject().put("orderTypes", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.orderTypes);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.order.OrderType obj : orderTypes) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("orderTypes", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.orderTypes);
    return this;
  }

  /**
   * Sets the field 'reseller'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public Merchant setReseller(com.clover.sdk.v3.base.Reference reseller) {
    logChange("reseller");

    try {
      getJSONObject().put("reseller",
          reseller == null ? org.json.JSONObject.NULL : reseller.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.reseller);
    return this;
  }


  /** Clears the 'id' field, the 'has' method for this field will now return false */
  public void clearId() {
    unlogChange("id");
    getJSONObject().remove("id");
    cacheRemoveValue(CacheKey.id);
  }

  /** Clears the 'name' field, the 'has' method for this field will now return false */
  public void clearName() {
    unlogChange("name");
    getJSONObject().remove("name");
    cacheRemoveValue(CacheKey.name);
  }

  /** Clears the 'owner' field, the 'has' method for this field will now return false */
  public void clearOwner() {
    unlogChange("owner");
    getJSONObject().remove("owner");
    cacheRemoveValue(CacheKey.owner);
  }

  /** Clears the 'address' field, the 'has' method for this field will now return false */
  public void clearAddress() {
    unlogChange("address");
    getJSONObject().remove("address");
    cacheRemoveValue(CacheKey.address);
  }

  /** Clears the 'defaultCurrency' field, the 'has' method for this field will now return false */
  public void clearDefaultCurrency() {
    unlogChange("defaultCurrency");
    getJSONObject().remove("defaultCurrency");
    cacheRemoveValue(CacheKey.defaultCurrency);
  }

  /** Clears the 'phoneNumber' field, the 'has' method for this field will now return false */
  public void clearPhoneNumber() {
    unlogChange("phoneNumber");
    getJSONObject().remove("phoneNumber");
    cacheRemoveValue(CacheKey.phoneNumber);
  }

  /** Clears the 'website' field, the 'has' method for this field will now return false */
  public void clearWebsite() {
    unlogChange("website");
    getJSONObject().remove("website");
    cacheRemoveValue(CacheKey.website);
  }

  /** Clears the 'createdTime' field, the 'has' method for this field will now return false */
  public void clearCreatedTime() {
    unlogChange("createdTime");
    getJSONObject().remove("createdTime");
    cacheRemoveValue(CacheKey.createdTime);
  }

  /** Clears the 'properties' field, the 'has' method for this field will now return false */
  public void clearProperties() {
    unlogChange("properties");
    getJSONObject().remove("properties");
    cacheRemoveValue(CacheKey.properties);
  }

  /** Clears the 'gateway' field, the 'has' method for this field will now return false */
  public void clearGateway() {
    unlogChange("gateway");
    getJSONObject().remove("gateway");
    cacheRemoveValue(CacheKey.gateway);
  }

  /** Clears the 'tipSuggestions' field, the 'has' method for this field will now return false */
  public void clearTipSuggestions() {
    unlogChange("tipSuggestions");
    getJSONObject().remove("tipSuggestions");
    cacheRemoveValue(CacheKey.tipSuggestions);
  }

  /** Clears the 'employees' field, the 'has' method for this field will now return false */
  public void clearEmployees() {
    unlogChange("employees");
    getJSONObject().remove("employees");
    cacheRemoveValue(CacheKey.employees);
  }

  /** Clears the 'items' field, the 'has' method for this field will now return false */
  public void clearItems() {
    unlogChange("items");
    getJSONObject().remove("items");
    cacheRemoveValue(CacheKey.items);
  }

  /** Clears the 'tags' field, the 'has' method for this field will now return false */
  public void clearTags() {
    unlogChange("tags");
    getJSONObject().remove("tags");
    cacheRemoveValue(CacheKey.tags);
  }

  /** Clears the 'tenders' field, the 'has' method for this field will now return false */
  public void clearTenders() {
    unlogChange("tenders");
    getJSONObject().remove("tenders");
    cacheRemoveValue(CacheKey.tenders);
  }

  /** Clears the 'shifts' field, the 'has' method for this field will now return false */
  public void clearShifts() {
    unlogChange("shifts");
    getJSONObject().remove("shifts");
    cacheRemoveValue(CacheKey.shifts);
  }

  /** Clears the 'orders' field, the 'has' method for this field will now return false */
  public void clearOrders() {
    unlogChange("orders");
    getJSONObject().remove("orders");
    cacheRemoveValue(CacheKey.orders);
  }

  /** Clears the 'payments' field, the 'has' method for this field will now return false */
  public void clearPayments() {
    unlogChange("payments");
    getJSONObject().remove("payments");
    cacheRemoveValue(CacheKey.payments);
  }

  /** Clears the 'taxRates' field, the 'has' method for this field will now return false */
  public void clearTaxRates() {
    unlogChange("taxRates");
    getJSONObject().remove("taxRates");
    cacheRemoveValue(CacheKey.taxRates);
  }

  /** Clears the 'printers' field, the 'has' method for this field will now return false */
  public void clearPrinters() {
    unlogChange("printers");
    getJSONObject().remove("printers");
    cacheRemoveValue(CacheKey.printers);
  }

  /** Clears the 'modifierGroups' field, the 'has' method for this field will now return false */
  public void clearModifierGroups() {
    unlogChange("modifierGroups");
    getJSONObject().remove("modifierGroups");
    cacheRemoveValue(CacheKey.modifierGroups);
  }

  /** Clears the 'orderTypes' field, the 'has' method for this field will now return false */
  public void clearOrderTypes() {
    unlogChange("orderTypes");
    getJSONObject().remove("orderTypes");
    cacheRemoveValue(CacheKey.orderTypes);
  }

  /** Clears the 'reseller' field, the 'has' method for this field will now return false */
  public void clearReseller() {
    unlogChange("reseller");
    getJSONObject().remove("reseller");
    cacheRemoveValue(CacheKey.reseller);
  }


  private void logChange(java.lang.String field) {
    if (changeLog == null) {
      changeLog = new android.os.Bundle();
    }
    changeLog.putString(field, null);
  }

  private void unlogChange(java.lang.String field) {
    if (changeLog != null) {
      changeLog.remove(field);
    }
  }

  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return changeLog != null;
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    changeLog = null;
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public Merchant copyChanges() {
    Merchant copy = new Merchant();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(Merchant src) {
    if (src.changeLog != null) {
      try {
        // Make a copy of the source so the destination fields are copies
        org.json.JSONObject srcObj = new Merchant(src).getJSONObject();
        org.json.JSONObject dstObj = getJSONObject();
        for (java.lang.String field : src.changeLog.keySet()) {
          dstObj.put(field, srcObj.get(field));
          logChange(field);
        }
      } catch (org.json.JSONException e) {
        throw new java.lang.IllegalArgumentException(e);
      }
    }
  }


  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    if (bundle == null) {
      bundle = new android.os.Bundle();
    }
    return bundle;
  }

  @Override
  public String toString() {
    String json = getJSONObject().toString();

    if (bundle != null) {
      bundle.isEmpty(); // Triggers unparcel
    }

    if (changeLog != null) {
      changeLog.isEmpty(); // Triggers unparcel
    }

    return "Merchant{" +
        "json='" + json + "'" +
        ", bundle=" + bundle +
        ", changeLog=" + changeLog +
        '}';
  }

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
	  com.clover.sdk.v3.JsonParcelHelper.wrap(getJSONObject()).writeToParcel(dest, 0);
    dest.writeBundle(bundle);
    dest.writeBundle(changeLog);
  }

  public static final android.os.Parcelable.Creator<Merchant> CREATOR = new android.os.Parcelable.Creator<Merchant>() {
    @Override
    public Merchant createFromParcel(android.os.Parcel in) {
      Merchant instance = new Merchant(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.bundle = in.readBundle(getClass().getClassLoader());
      instance.changeLog = in.readBundle();
      return instance;
    }

    @Override
    public Merchant[] newArray(int size) {
      return new Merchant[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<Merchant> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<Merchant>() {
    @Override
    public Merchant create(org.json.JSONObject jsonObject) {
      return new Merchant(jsonObject);
    }
  };


  public interface Constraints {

    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;

    public static final boolean NAME_IS_REQUIRED = true;
    public static final long NAME_MAX_LEN = 127;

    public static final boolean OWNER_IS_REQUIRED = true;

    public static final boolean ADDRESS_IS_REQUIRED = false;

    public static final boolean DEFAULTCURRENCY_IS_REQUIRED = false;
    public static final long DEFAULTCURRENCY_MAX_LEN = 3;

    public static final boolean PHONENUMBER_IS_REQUIRED = false;
    public static final long PHONENUMBER_MAX_LEN = 21;

    public static final boolean WEBSITE_IS_REQUIRED = false;
    public static final long WEBSITE_MAX_LEN = 255;

    public static final boolean CREATEDTIME_IS_REQUIRED = false;

    public static final boolean PROPERTIES_IS_REQUIRED = false;

    public static final boolean GATEWAY_IS_REQUIRED = false;

    public static final boolean TIPSUGGESTIONS_IS_REQUIRED = false;

    public static final boolean EMPLOYEES_IS_REQUIRED = false;

    public static final boolean ITEMS_IS_REQUIRED = false;

    public static final boolean TAGS_IS_REQUIRED = false;

    public static final boolean TENDERS_IS_REQUIRED = false;

    public static final boolean SHIFTS_IS_REQUIRED = false;

    public static final boolean ORDERS_IS_REQUIRED = false;

    public static final boolean PAYMENTS_IS_REQUIRED = false;

    public static final boolean TAXRATES_IS_REQUIRED = false;

    public static final boolean PRINTERS_IS_REQUIRED = false;

    public static final boolean MODIFIERGROUPS_IS_REQUIRED = false;

    public static final boolean ORDERTYPES_IS_REQUIRED = false;

    public static final boolean RESELLER_IS_REQUIRED = false;

  }

}
