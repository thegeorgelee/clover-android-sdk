/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2015 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.hours;

@SuppressWarnings("all")
public final class HoursSet implements android.os.Parcelable, com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

 /**
   * Unique identifier
  */
  public java.lang.String getId() {
    return cacheGet(CacheKey.id);
  }
 /**
   * Friendly name to describe the hours
  */
  public java.lang.String getName() {
    return cacheGet(CacheKey.name);
  }
  public com.clover.sdk.v3.hours.Reference getReference() {
    return cacheGet(CacheKey.reference);
  }
  public java.util.List<com.clover.sdk.v3.hours.HourRange> getSunday() {
    return cacheGet(CacheKey.sunday);
  }
  public java.util.List<com.clover.sdk.v3.hours.HourRange> getMonday() {
    return cacheGet(CacheKey.monday);
  }
  public java.util.List<com.clover.sdk.v3.hours.HourRange> getTuesday() {
    return cacheGet(CacheKey.tuesday);
  }
  public java.util.List<com.clover.sdk.v3.hours.HourRange> getWednesday() {
    return cacheGet(CacheKey.wednesday);
  }
  public java.util.List<com.clover.sdk.v3.hours.HourRange> getThursday() {
    return cacheGet(CacheKey.thursday);
  }
  public java.util.List<com.clover.sdk.v3.hours.HourRange> getFriday() {
    return cacheGet(CacheKey.friday);
  }
  public java.util.List<com.clover.sdk.v3.hours.HourRange> getSaturday() {
    return cacheGet(CacheKey.saturday);
  }


  private enum CacheKey {
    id {
      @Override
      public Object extractValue(HoursSet instance) {
        return instance.extractId();
      }
    },
    name {
      @Override
      public Object extractValue(HoursSet instance) {
        return instance.extractName();
      }
    },
    reference {
      @Override
      public Object extractValue(HoursSet instance) {
        return instance.extractReference();
      }
    },
    sunday {
      @Override
      public Object extractValue(HoursSet instance) {
        return instance.extractSunday();
      }
    },
    monday {
      @Override
      public Object extractValue(HoursSet instance) {
        return instance.extractMonday();
      }
    },
    tuesday {
      @Override
      public Object extractValue(HoursSet instance) {
        return instance.extractTuesday();
      }
    },
    wednesday {
      @Override
      public Object extractValue(HoursSet instance) {
        return instance.extractWednesday();
      }
    },
    thursday {
      @Override
      public Object extractValue(HoursSet instance) {
        return instance.extractThursday();
      }
    },
    friday {
      @Override
      public Object extractValue(HoursSet instance) {
        return instance.extractFriday();
      }
    },
    saturday {
      @Override
      public Object extractValue(HoursSet instance) {
        return instance.extractSaturday();
      }
    },
    ;

    public abstract Object extractValue(HoursSet instance);
  }

  private org.json.JSONObject jsonObject = null;
  private android.os.Bundle bundle = null;
  private android.os.Bundle changeLog = null;
  private Object[] cache = null;
  private byte[] cacheState = null;

  private static final byte STATE_NOT_CACHED = 0;
  private static final byte STATE_CACHED_NO_VALUE = 1;
  private static final byte STATE_CACHED_VALUE = 2;

  /**
   * Constructs a new empty instance.
   */
  public HoursSet() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public HoursSet(String json) throws java.lang.IllegalArgumentException {
    try {
      this.jsonObject = new org.json.JSONObject(json);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public HoursSet(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public HoursSet(HoursSet src) {
    if (src.jsonObject != null) {
      this.jsonObject = com.clover.sdk.v3.JsonHelper.deepCopy(src.getJSONObject());
    }
  }

  private <T> T cacheGet(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return (T) cache[index];
  }

  private boolean cacheValueIsNotNull(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cache[index] != null;
  }

  private boolean cacheHasKey(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cacheState[index] == STATE_CACHED_VALUE;
  }

  private void cacheRemoveValue(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    cache[index] = null;
    cacheState[index] = STATE_CACHED_NO_VALUE;
  }

  private void cacheMarkDirty(CacheKey key) {
    if (cache != null) {
      int index = key.ordinal();
      cache[index] = null;
      cacheState[index] = STATE_NOT_CACHED;
    }
  }

  private void populateCache(int index) {
    if (cache == null) {
      int size = CacheKey.values().length;
      cache = new Object[size];
      cacheState = new byte[size];
    }

    if (cacheState[index] == STATE_NOT_CACHED) {
      CacheKey key = CacheKey.values()[index];

      if (getJSONObject().has(key.name())) {
        cache[index] = key.extractValue(this);
        cacheState[index] = STATE_CACHED_VALUE;
      } else {
        cacheState[index] = STATE_CACHED_NO_VALUE;
      }
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    if (jsonObject == null) {
      jsonObject = new org.json.JSONObject();
    }
    return jsonObject;
  }


  @Override
  public void validate() {
    java.lang.String id = getId();
    if (id != null && id.length() > 13) { throw new IllegalArgumentException("Maximum string length exceeded for 'id'");}

    java.lang.String name = getName();
    if (name != null && name.length() > 20) { throw new IllegalArgumentException("Maximum string length exceeded for 'name'");}
  }



  private java.lang.String extractId() {
    return getJSONObject().isNull("id") ? null :
      getJSONObject().optString("id");
  }


  private java.lang.String extractName() {
    return getJSONObject().isNull("name") ? null :
      getJSONObject().optString("name");
  }


  private com.clover.sdk.v3.hours.Reference extractReference() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("reference");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.hours.Reference(getJSONObject().optJSONObject("reference"));
    }
    return null;
  }


  private java.util.List<com.clover.sdk.v3.hours.HourRange> extractSunday() {
    if (getJSONObject().isNull("sunday")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("sunday");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.hours.HourRange> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.hours.HourRange>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.hours.HourRange item = new com.clover.sdk.v3.hours.HourRange(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.hours.HourRange> extractMonday() {
    if (getJSONObject().isNull("monday")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("monday");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.hours.HourRange> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.hours.HourRange>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.hours.HourRange item = new com.clover.sdk.v3.hours.HourRange(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.hours.HourRange> extractTuesday() {
    if (getJSONObject().isNull("tuesday")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("tuesday");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.hours.HourRange> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.hours.HourRange>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.hours.HourRange item = new com.clover.sdk.v3.hours.HourRange(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.hours.HourRange> extractWednesday() {
    if (getJSONObject().isNull("wednesday")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("wednesday");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.hours.HourRange> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.hours.HourRange>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.hours.HourRange item = new com.clover.sdk.v3.hours.HourRange(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.hours.HourRange> extractThursday() {
    if (getJSONObject().isNull("thursday")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("thursday");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.hours.HourRange> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.hours.HourRange>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.hours.HourRange item = new com.clover.sdk.v3.hours.HourRange(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.hours.HourRange> extractFriday() {
    if (getJSONObject().isNull("friday")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("friday");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.hours.HourRange> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.hours.HourRange>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.hours.HourRange item = new com.clover.sdk.v3.hours.HourRange(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  private java.util.List<com.clover.sdk.v3.hours.HourRange> extractSaturday() {
    if (getJSONObject().isNull("saturday")) {
      return null;
    }

    org.json.JSONObject elementsContainer = getJSONObject().optJSONObject("saturday");
    org.json.JSONArray itemArray = elementsContainer.optJSONArray("elements");
    java.util.List<com.clover.sdk.v3.hours.HourRange> itemList =
        new java.util.ArrayList<com.clover.sdk.v3.hours.HourRange>(itemArray.length());
    for (int i = 0; i < itemArray.length(); i++) {
      org.json.JSONObject obj = itemArray.optJSONObject(i);
      if (obj == null) {
        continue;
      }
      com.clover.sdk.v3.hours.HourRange item = new com.clover.sdk.v3.hours.HourRange(obj);
      itemList.add(item);
    }

    return java.util.Collections.unmodifiableList(itemList);
  }


  /** Checks whether the 'id' field is set and is not null */
  public boolean isNotNullId() {
    return cacheValueIsNotNull(CacheKey.id);
  }

  /** Checks whether the 'name' field is set and is not null */
  public boolean isNotNullName() {
    return cacheValueIsNotNull(CacheKey.name);
  }

  /** Checks whether the 'reference' field is set and is not null */
  public boolean isNotNullReference() {
    return cacheValueIsNotNull(CacheKey.reference);
  }

  /** Checks whether the 'sunday' field is set and is not null */
  public boolean isNotNullSunday() {
    return cacheValueIsNotNull(CacheKey.sunday);
  }

  /** Checks whether the 'sunday' field is set and is not null and is not empty */
  public boolean isNotEmptySunday() {
    return isNotNullSunday() && !getSunday().isEmpty();
  }

  /** Checks whether the 'monday' field is set and is not null */
  public boolean isNotNullMonday() {
    return cacheValueIsNotNull(CacheKey.monday);
  }

  /** Checks whether the 'monday' field is set and is not null and is not empty */
  public boolean isNotEmptyMonday() {
    return isNotNullMonday() && !getMonday().isEmpty();
  }

  /** Checks whether the 'tuesday' field is set and is not null */
  public boolean isNotNullTuesday() {
    return cacheValueIsNotNull(CacheKey.tuesday);
  }

  /** Checks whether the 'tuesday' field is set and is not null and is not empty */
  public boolean isNotEmptyTuesday() {
    return isNotNullTuesday() && !getTuesday().isEmpty();
  }

  /** Checks whether the 'wednesday' field is set and is not null */
  public boolean isNotNullWednesday() {
    return cacheValueIsNotNull(CacheKey.wednesday);
  }

  /** Checks whether the 'wednesday' field is set and is not null and is not empty */
  public boolean isNotEmptyWednesday() {
    return isNotNullWednesday() && !getWednesday().isEmpty();
  }

  /** Checks whether the 'thursday' field is set and is not null */
  public boolean isNotNullThursday() {
    return cacheValueIsNotNull(CacheKey.thursday);
  }

  /** Checks whether the 'thursday' field is set and is not null and is not empty */
  public boolean isNotEmptyThursday() {
    return isNotNullThursday() && !getThursday().isEmpty();
  }

  /** Checks whether the 'friday' field is set and is not null */
  public boolean isNotNullFriday() {
    return cacheValueIsNotNull(CacheKey.friday);
  }

  /** Checks whether the 'friday' field is set and is not null and is not empty */
  public boolean isNotEmptyFriday() {
    return isNotNullFriday() && !getFriday().isEmpty();
  }

  /** Checks whether the 'saturday' field is set and is not null */
  public boolean isNotNullSaturday() {
    return cacheValueIsNotNull(CacheKey.saturday);
  }

  /** Checks whether the 'saturday' field is set and is not null and is not empty */
  public boolean isNotEmptySaturday() {
    return isNotNullSaturday() && !getSaturday().isEmpty();
  }


  /** Checks whether the 'id' field has been set, however the value could be null */
  public boolean hasId() {
    return cacheHasKey(CacheKey.id);
  }

  /** Checks whether the 'name' field has been set, however the value could be null */
  public boolean hasName() {
    return cacheHasKey(CacheKey.name);
  }

  /** Checks whether the 'reference' field has been set, however the value could be null */
  public boolean hasReference() {
    return cacheHasKey(CacheKey.reference);
  }

  /** Checks whether the 'sunday' field has been set, however the value could be null */
  public boolean hasSunday() {
    return cacheHasKey(CacheKey.sunday);
  }

  /** Checks whether the 'monday' field has been set, however the value could be null */
  public boolean hasMonday() {
    return cacheHasKey(CacheKey.monday);
  }

  /** Checks whether the 'tuesday' field has been set, however the value could be null */
  public boolean hasTuesday() {
    return cacheHasKey(CacheKey.tuesday);
  }

  /** Checks whether the 'wednesday' field has been set, however the value could be null */
  public boolean hasWednesday() {
    return cacheHasKey(CacheKey.wednesday);
  }

  /** Checks whether the 'thursday' field has been set, however the value could be null */
  public boolean hasThursday() {
    return cacheHasKey(CacheKey.thursday);
  }

  /** Checks whether the 'friday' field has been set, however the value could be null */
  public boolean hasFriday() {
    return cacheHasKey(CacheKey.friday);
  }

  /** Checks whether the 'saturday' field has been set, however the value could be null */
  public boolean hasSaturday() {
    return cacheHasKey(CacheKey.saturday);
  }


  /**
   * Sets the field 'id'.
   */
  public HoursSet setId(java.lang.String id) {
    logChange("id");

    try {
      getJSONObject().put("id", id == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(id));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.id);
    return this;
  }

  /**
   * Sets the field 'name'.
   */
  public HoursSet setName(java.lang.String name) {
    logChange("name");

    try {
      getJSONObject().put("name", name == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(name));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.name);
    return this;
  }

  /**
   * Sets the field 'reference'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public HoursSet setReference(com.clover.sdk.v3.hours.Reference reference) {
    logChange("reference");

    try {
      getJSONObject().put("reference",
          reference == null ? org.json.JSONObject.NULL : reference.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.reference);
    return this;
  }

  /**
   * Sets the field 'sunday'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public HoursSet setSunday(java.util.List<com.clover.sdk.v3.hours.HourRange> sunday) {
    logChange("sunday");

    try {
      if (sunday == null) {
        getJSONObject().put("sunday", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.sunday);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.hours.HourRange obj : sunday) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("sunday", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.sunday);
    return this;
  }

  /**
   * Sets the field 'monday'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public HoursSet setMonday(java.util.List<com.clover.sdk.v3.hours.HourRange> monday) {
    logChange("monday");

    try {
      if (monday == null) {
        getJSONObject().put("monday", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.monday);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.hours.HourRange obj : monday) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("monday", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.monday);
    return this;
  }

  /**
   * Sets the field 'tuesday'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public HoursSet setTuesday(java.util.List<com.clover.sdk.v3.hours.HourRange> tuesday) {
    logChange("tuesday");

    try {
      if (tuesday == null) {
        getJSONObject().put("tuesday", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.tuesday);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.hours.HourRange obj : tuesday) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("tuesday", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.tuesday);
    return this;
  }

  /**
   * Sets the field 'wednesday'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public HoursSet setWednesday(java.util.List<com.clover.sdk.v3.hours.HourRange> wednesday) {
    logChange("wednesday");

    try {
      if (wednesday == null) {
        getJSONObject().put("wednesday", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.wednesday);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.hours.HourRange obj : wednesday) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("wednesday", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.wednesday);
    return this;
  }

  /**
   * Sets the field 'thursday'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public HoursSet setThursday(java.util.List<com.clover.sdk.v3.hours.HourRange> thursday) {
    logChange("thursday");

    try {
      if (thursday == null) {
        getJSONObject().put("thursday", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.thursday);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.hours.HourRange obj : thursday) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("thursday", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.thursday);
    return this;
  }

  /**
   * Sets the field 'friday'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public HoursSet setFriday(java.util.List<com.clover.sdk.v3.hours.HourRange> friday) {
    logChange("friday");

    try {
      if (friday == null) {
        getJSONObject().put("friday", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.friday);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.hours.HourRange obj : friday) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("friday", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.friday);
    return this;
  }

  /**
   * Sets the field 'saturday'.
   *
   * Nulls in the given List are skipped. List parameter is copied, so it will not reflect any changes, but objects inside it will.
   */
  public HoursSet setSaturday(java.util.List<com.clover.sdk.v3.hours.HourRange> saturday) {
    logChange("saturday");

    try {
      if (saturday == null) {
        getJSONObject().put("saturday", org.json.JSONObject.NULL);
        cacheMarkDirty(CacheKey.saturday);
        return this;
      }

      org.json.JSONArray array = new org.json.JSONArray();
      for (com.clover.sdk.v3.hours.HourRange obj : saturday) {
        if (obj == null) {
          continue;
        }
        array.put(obj.getJSONObject());
      }

      org.json.JSONObject elementsContainer = new org.json.JSONObject();
      elementsContainer.put("elements", array);
      getJSONObject().put("saturday", elementsContainer);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.saturday);
    return this;
  }


  /** Clears the 'id' field, the 'has' method for this field will now return false */
  public void clearId() {
    unlogChange("id");
    getJSONObject().remove("id");
    cacheRemoveValue(CacheKey.id);
  }

  /** Clears the 'name' field, the 'has' method for this field will now return false */
  public void clearName() {
    unlogChange("name");
    getJSONObject().remove("name");
    cacheRemoveValue(CacheKey.name);
  }

  /** Clears the 'reference' field, the 'has' method for this field will now return false */
  public void clearReference() {
    unlogChange("reference");
    getJSONObject().remove("reference");
    cacheRemoveValue(CacheKey.reference);
  }

  /** Clears the 'sunday' field, the 'has' method for this field will now return false */
  public void clearSunday() {
    unlogChange("sunday");
    getJSONObject().remove("sunday");
    cacheRemoveValue(CacheKey.sunday);
  }

  /** Clears the 'monday' field, the 'has' method for this field will now return false */
  public void clearMonday() {
    unlogChange("monday");
    getJSONObject().remove("monday");
    cacheRemoveValue(CacheKey.monday);
  }

  /** Clears the 'tuesday' field, the 'has' method for this field will now return false */
  public void clearTuesday() {
    unlogChange("tuesday");
    getJSONObject().remove("tuesday");
    cacheRemoveValue(CacheKey.tuesday);
  }

  /** Clears the 'wednesday' field, the 'has' method for this field will now return false */
  public void clearWednesday() {
    unlogChange("wednesday");
    getJSONObject().remove("wednesday");
    cacheRemoveValue(CacheKey.wednesday);
  }

  /** Clears the 'thursday' field, the 'has' method for this field will now return false */
  public void clearThursday() {
    unlogChange("thursday");
    getJSONObject().remove("thursday");
    cacheRemoveValue(CacheKey.thursday);
  }

  /** Clears the 'friday' field, the 'has' method for this field will now return false */
  public void clearFriday() {
    unlogChange("friday");
    getJSONObject().remove("friday");
    cacheRemoveValue(CacheKey.friday);
  }

  /** Clears the 'saturday' field, the 'has' method for this field will now return false */
  public void clearSaturday() {
    unlogChange("saturday");
    getJSONObject().remove("saturday");
    cacheRemoveValue(CacheKey.saturday);
  }


  private void logChange(java.lang.String field) {
    if (changeLog == null) {
      changeLog = new android.os.Bundle();
    }
    changeLog.putString(field, null);
  }

  private void unlogChange(java.lang.String field) {
    if (changeLog != null) {
      changeLog.remove(field);
    }
  }

  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return changeLog != null;
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    changeLog = null;
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public HoursSet copyChanges() {
    HoursSet copy = new HoursSet();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(HoursSet src) {
    if (src.changeLog != null) {
      try {
        // Make a copy of the source so the destination fields are copies
        org.json.JSONObject srcObj = new HoursSet(src).getJSONObject();
        org.json.JSONObject dstObj = getJSONObject();
        for (java.lang.String field : src.changeLog.keySet()) {
          dstObj.put(field, srcObj.get(field));
          logChange(field);
        }
      } catch (org.json.JSONException e) {
        throw new java.lang.IllegalArgumentException(e);
      }
    }
  }


  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    if (bundle == null) {
      bundle = new android.os.Bundle();
    }
    return bundle;
  }

  @Override
  public String toString() {
    String json = getJSONObject().toString();

    if (bundle != null) {
      bundle.isEmpty(); // Triggers unparcel
    }

    if (changeLog != null) {
      changeLog.isEmpty(); // Triggers unparcel
    }

    return "HoursSet{" +
        "json='" + json + "'" +
        ", bundle=" + bundle +
        ", changeLog=" + changeLog +
        '}';
  }

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
	  com.clover.sdk.v3.JsonParcelHelper.wrap(getJSONObject()).writeToParcel(dest, 0);
    dest.writeBundle(bundle);
    dest.writeBundle(changeLog);
  }

  public static final android.os.Parcelable.Creator<HoursSet> CREATOR = new android.os.Parcelable.Creator<HoursSet>() {
    @Override
    public HoursSet createFromParcel(android.os.Parcel in) {
      HoursSet instance = new HoursSet(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.bundle = in.readBundle(getClass().getClassLoader());
      instance.changeLog = in.readBundle();
      return instance;
    }

    @Override
    public HoursSet[] newArray(int size) {
      return new HoursSet[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<HoursSet> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<HoursSet>() {
    @Override
    public HoursSet create(org.json.JSONObject jsonObject) {
      return new HoursSet(jsonObject);
    }
  };


  public interface Constraints {

    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;

    public static final boolean NAME_IS_REQUIRED = false;
    public static final long NAME_MAX_LEN = 20;

    public static final boolean REFERENCE_IS_REQUIRED = false;

    public static final boolean SUNDAY_IS_REQUIRED = false;

    public static final boolean MONDAY_IS_REQUIRED = false;

    public static final boolean TUESDAY_IS_REQUIRED = false;

    public static final boolean WEDNESDAY_IS_REQUIRED = false;

    public static final boolean THURSDAY_IS_REQUIRED = false;

    public static final boolean FRIDAY_IS_REQUIRED = false;

    public static final boolean SATURDAY_IS_REQUIRED = false;

  }

}
