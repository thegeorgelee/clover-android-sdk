/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2015 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.pay;

@SuppressWarnings("all")
public final class TransactionData implements android.os.Parcelable, com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  public com.clover.sdk.v3.pay.TxResult getTxResult() {
    return cacheGet(CacheKey.txResult);
  }
  public com.clover.sdk.v3.pay.ErrorCode getTxError() {
    return cacheGet(CacheKey.txError);
  }
  public java.lang.Double getAmount() {
    return cacheGet(CacheKey.amount);
  }
  public java.lang.Double getTipAmount() {
    return cacheGet(CacheKey.tipAmount);
  }
  public java.lang.Double getCashBackAmount() {
    return cacheGet(CacheKey.cashBackAmount);
  }
  public java.lang.Double getAvailableOfflineSpendingAmount() {
    return cacheGet(CacheKey.availableOfflineSpendingAmount);
  }
  public java.lang.String getErrorCode() {
    return cacheGet(CacheKey.errorCode);
  }
  public java.lang.String getErrorText() {
    return cacheGet(CacheKey.errorText);
  }
  public java.lang.String getTransactionDate() {
    return cacheGet(CacheKey.transactionDate);
  }
  public java.lang.String getTransactionTime() {
    return cacheGet(CacheKey.transactionTime);
  }
  public java.lang.String getMsrContainer() {
    return cacheGet(CacheKey.msrContainer);
  }
  public java.lang.String getMsrMaskedTrack1() {
    return cacheGet(CacheKey.msrMaskedTrack1);
  }
  public java.lang.String getMsrMaskedTrack2() {
    return cacheGet(CacheKey.msrMaskedTrack2);
  }
  public java.lang.String getMaskedManualPan() {
    return cacheGet(CacheKey.maskedManualPan);
  }
  public java.lang.String getSredContainer() {
    return cacheGet(CacheKey.sredContainer);
  }
  public java.lang.String getSred() {
    return cacheGet(CacheKey.sred);
  }
  public java.lang.String getKsn() {
    return cacheGet(CacheKey.ksn);
  }
  public java.lang.String getTransArmorContainer() {
    return cacheGet(CacheKey.transArmorContainer);
  }
  public java.lang.String getTransArmorKey() {
    return cacheGet(CacheKey.transArmorKey);
  }
  public java.lang.String getTransArmorKeyId() {
    return cacheGet(CacheKey.transArmorKeyId);
  }
  public java.lang.String getTransArmorEncryptedTrack1() {
    return cacheGet(CacheKey.transArmorEncryptedTrack1);
  }
  public java.lang.String getTransArmorEncryptedTrack2() {
    return cacheGet(CacheKey.transArmorEncryptedTrack2);
  }
  public java.lang.String getIccContainer() {
    return cacheGet(CacheKey.iccContainer);
  }
  public java.lang.String getIccApplicationInterchangeProfile() {
    return cacheGet(CacheKey.iccApplicationInterchangeProfile);
  }
  public java.lang.String getIccMaskedEmv57() {
    return cacheGet(CacheKey.iccMaskedEmv57);
  }
  public java.lang.String getIccMaskedEmv5A() {
    return cacheGet(CacheKey.iccMaskedEmv5A);
  }
  public java.lang.String getIccApplicationPanSequenceNumber() {
    return cacheGet(CacheKey.iccApplicationPanSequenceNumber);
  }
  public java.lang.String getIccAmountAuthorized() {
    return cacheGet(CacheKey.iccAmountAuthorized);
  }
  public java.lang.String getIccTransactionCurrencyCode() {
    return cacheGet(CacheKey.iccTransactionCurrencyCode);
  }
  public java.lang.String getIccTransactionCurrencyExponent() {
    return cacheGet(CacheKey.iccTransactionCurrencyExponent);
  }
  public java.lang.String getIccApplicationUsageControl() {
    return cacheGet(CacheKey.iccApplicationUsageControl);
  }
  public java.lang.String getIccIssuerActionCodeDefault() {
    return cacheGet(CacheKey.iccIssuerActionCodeDefault);
  }
  public java.lang.String getIccIssuerActionCodeDenial() {
    return cacheGet(CacheKey.iccIssuerActionCodeDenial);
  }
  public java.lang.String getIccIssuerActionCodeOnline() {
    return cacheGet(CacheKey.iccIssuerActionCodeOnline);
  }
  public java.lang.String getIccApplicationLabel() {
    return cacheGet(CacheKey.iccApplicationLabel);
  }
  public java.lang.String getIccApplicationCryptogram() {
    return cacheGet(CacheKey.iccApplicationCryptogram);
  }
  public java.lang.String getIccApplicationIdentifierCard() {
    return cacheGet(CacheKey.iccApplicationIdentifierCard);
  }
  public java.lang.String getIccApplicationIdentifierTerminal() {
    return cacheGet(CacheKey.iccApplicationIdentifierTerminal);
  }
  public java.lang.String getIccApplicationTransactionCounter() {
    return cacheGet(CacheKey.iccApplicationTransactionCounter);
  }
  public java.lang.String getIccApplicationVersionNumber() {
    return cacheGet(CacheKey.iccApplicationVersionNumber);
  }
  public java.lang.String getIccCryptogramInformationData() {
    return cacheGet(CacheKey.iccCryptogramInformationData);
  }
  public java.lang.String getIccCvmResults() {
    return cacheGet(CacheKey.iccCvmResults);
  }
  public java.lang.String getIccInterfaceDeviceSerialNumber() {
    return cacheGet(CacheKey.iccInterfaceDeviceSerialNumber);
  }
  public java.lang.String getIccIssuerApplicationData() {
    return cacheGet(CacheKey.iccIssuerApplicationData);
  }
  public java.lang.String getIccPosEntryModeCode() {
    return cacheGet(CacheKey.iccPosEntryModeCode);
  }
  public java.lang.String getIccTerminalCapabilities() {
    return cacheGet(CacheKey.iccTerminalCapabilities);
  }
  public java.lang.String getIccTerminalCountryCode() {
    return cacheGet(CacheKey.iccTerminalCountryCode);
  }
  public java.lang.String getIccTerminalType() {
    return cacheGet(CacheKey.iccTerminalType);
  }
  public java.lang.String getIccTvr() {
    return cacheGet(CacheKey.iccTvr);
  }
  public java.lang.String getIccTransactionDate() {
    return cacheGet(CacheKey.iccTransactionDate);
  }
  public java.lang.String getIccTsi() {
    return cacheGet(CacheKey.iccTsi);
  }
  public java.lang.String getIccTransactionType() {
    return cacheGet(CacheKey.iccTransactionType);
  }
  public java.lang.String getIccUnpredictableNumber() {
    return cacheGet(CacheKey.iccUnpredictableNumber);
  }
  public java.lang.String getIccTransactionTime() {
    return cacheGet(CacheKey.iccTransactionTime);
  }
  public java.lang.String getIccAdditionalTerminalCapabilities() {
    return cacheGet(CacheKey.iccAdditionalTerminalCapabilities);
  }
  public java.lang.String getIccTransactionCategoryCode() {
    return cacheGet(CacheKey.iccTransactionCategoryCode);
  }
  public java.lang.String getIccIssuerApplicationPreferredName() {
    return cacheGet(CacheKey.iccIssuerApplicationPreferredName);
  }
  public java.lang.String getIccCardholderName() {
    return cacheGet(CacheKey.iccCardholderName);
  }
  public java.lang.String getIccIssuerCodeTableIndex() {
    return cacheGet(CacheKey.iccIssuerCodeTableIndex);
  }
  public java.lang.String getPinBlockContainer() {
    return cacheGet(CacheKey.pinBlockContainer);
  }
  public java.lang.String getPinBlock() {
    return cacheGet(CacheKey.pinBlock);
  }
  public java.lang.String getPinBlockKsn() {
    return cacheGet(CacheKey.pinBlockKsn);
  }
  public java.lang.String getGwContainer() {
    return cacheGet(CacheKey.gwContainer);
  }
  public java.lang.String getGwIssuerAuthenticationData() {
    return cacheGet(CacheKey.gwIssuerAuthenticationData);
  }
  public java.lang.String getGwIssuerScriptTemplate1() {
    return cacheGet(CacheKey.gwIssuerScriptTemplate1);
  }
  public java.lang.String getGwIssuerScriptTemplate2() {
    return cacheGet(CacheKey.gwIssuerScriptTemplate2);
  }
  public java.lang.String getGwIssuerAuthorizationResponseCode() {
    return cacheGet(CacheKey.gwIssuerAuthorizationResponseCode);
  }
  public java.lang.String getGwMessageControlField() {
    return cacheGet(CacheKey.gwMessageControlField);
  }
  public com.clover.sdk.v3.pay.GwTxResult getGwTxResult() {
    return cacheGet(CacheKey.gwTxResult);
  }
  public com.clover.sdk.v3.payments.CvmResult getCvmResult() {
    return cacheGet(CacheKey.cvmResult);
  }
  public com.clover.sdk.v3.pay.ServiceCode1 getServiceCode1() {
    return cacheGet(CacheKey.serviceCode1);
  }
  public com.clover.sdk.v3.pay.ServiceCode2 getServiceCode2() {
    return cacheGet(CacheKey.serviceCode2);
  }
  public com.clover.sdk.v3.pay.ServiceCode3 getServiceCode3() {
    return cacheGet(CacheKey.serviceCode3);
  }


  private enum CacheKey {
    txResult {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractTxResult();
      }
    },
    txError {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractTxError();
      }
    },
    amount {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractAmount();
      }
    },
    tipAmount {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractTipAmount();
      }
    },
    cashBackAmount {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractCashBackAmount();
      }
    },
    availableOfflineSpendingAmount {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractAvailableOfflineSpendingAmount();
      }
    },
    errorCode {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractErrorCode();
      }
    },
    errorText {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractErrorText();
      }
    },
    transactionDate {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractTransactionDate();
      }
    },
    transactionTime {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractTransactionTime();
      }
    },
    msrContainer {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractMsrContainer();
      }
    },
    msrMaskedTrack1 {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractMsrMaskedTrack1();
      }
    },
    msrMaskedTrack2 {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractMsrMaskedTrack2();
      }
    },
    maskedManualPan {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractMaskedManualPan();
      }
    },
    sredContainer {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractSredContainer();
      }
    },
    sred {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractSred();
      }
    },
    ksn {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractKsn();
      }
    },
    transArmorContainer {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractTransArmorContainer();
      }
    },
    transArmorKey {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractTransArmorKey();
      }
    },
    transArmorKeyId {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractTransArmorKeyId();
      }
    },
    transArmorEncryptedTrack1 {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractTransArmorEncryptedTrack1();
      }
    },
    transArmorEncryptedTrack2 {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractTransArmorEncryptedTrack2();
      }
    },
    iccContainer {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccContainer();
      }
    },
    iccApplicationInterchangeProfile {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccApplicationInterchangeProfile();
      }
    },
    iccMaskedEmv57 {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccMaskedEmv57();
      }
    },
    iccMaskedEmv5A {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccMaskedEmv5A();
      }
    },
    iccApplicationPanSequenceNumber {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccApplicationPanSequenceNumber();
      }
    },
    iccAmountAuthorized {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccAmountAuthorized();
      }
    },
    iccTransactionCurrencyCode {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccTransactionCurrencyCode();
      }
    },
    iccTransactionCurrencyExponent {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccTransactionCurrencyExponent();
      }
    },
    iccApplicationUsageControl {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccApplicationUsageControl();
      }
    },
    iccIssuerActionCodeDefault {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccIssuerActionCodeDefault();
      }
    },
    iccIssuerActionCodeDenial {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccIssuerActionCodeDenial();
      }
    },
    iccIssuerActionCodeOnline {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccIssuerActionCodeOnline();
      }
    },
    iccApplicationLabel {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccApplicationLabel();
      }
    },
    iccApplicationCryptogram {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccApplicationCryptogram();
      }
    },
    iccApplicationIdentifierCard {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccApplicationIdentifierCard();
      }
    },
    iccApplicationIdentifierTerminal {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccApplicationIdentifierTerminal();
      }
    },
    iccApplicationTransactionCounter {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccApplicationTransactionCounter();
      }
    },
    iccApplicationVersionNumber {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccApplicationVersionNumber();
      }
    },
    iccCryptogramInformationData {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccCryptogramInformationData();
      }
    },
    iccCvmResults {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccCvmResults();
      }
    },
    iccInterfaceDeviceSerialNumber {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccInterfaceDeviceSerialNumber();
      }
    },
    iccIssuerApplicationData {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccIssuerApplicationData();
      }
    },
    iccPosEntryModeCode {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccPosEntryModeCode();
      }
    },
    iccTerminalCapabilities {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccTerminalCapabilities();
      }
    },
    iccTerminalCountryCode {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccTerminalCountryCode();
      }
    },
    iccTerminalType {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccTerminalType();
      }
    },
    iccTvr {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccTvr();
      }
    },
    iccTransactionDate {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccTransactionDate();
      }
    },
    iccTsi {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccTsi();
      }
    },
    iccTransactionType {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccTransactionType();
      }
    },
    iccUnpredictableNumber {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccUnpredictableNumber();
      }
    },
    iccTransactionTime {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccTransactionTime();
      }
    },
    iccAdditionalTerminalCapabilities {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccAdditionalTerminalCapabilities();
      }
    },
    iccTransactionCategoryCode {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccTransactionCategoryCode();
      }
    },
    iccIssuerApplicationPreferredName {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccIssuerApplicationPreferredName();
      }
    },
    iccCardholderName {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccCardholderName();
      }
    },
    iccIssuerCodeTableIndex {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractIccIssuerCodeTableIndex();
      }
    },
    pinBlockContainer {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractPinBlockContainer();
      }
    },
    pinBlock {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractPinBlock();
      }
    },
    pinBlockKsn {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractPinBlockKsn();
      }
    },
    gwContainer {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractGwContainer();
      }
    },
    gwIssuerAuthenticationData {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractGwIssuerAuthenticationData();
      }
    },
    gwIssuerScriptTemplate1 {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractGwIssuerScriptTemplate1();
      }
    },
    gwIssuerScriptTemplate2 {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractGwIssuerScriptTemplate2();
      }
    },
    gwIssuerAuthorizationResponseCode {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractGwIssuerAuthorizationResponseCode();
      }
    },
    gwMessageControlField {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractGwMessageControlField();
      }
    },
    gwTxResult {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractGwTxResult();
      }
    },
    cvmResult {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractCvmResult();
      }
    },
    serviceCode1 {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractServiceCode1();
      }
    },
    serviceCode2 {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractServiceCode2();
      }
    },
    serviceCode3 {
      @Override
      public Object extractValue(TransactionData instance) {
        return instance.extractServiceCode3();
      }
    },
    ;

    public abstract Object extractValue(TransactionData instance);
  }

  private org.json.JSONObject jsonObject = null;
  private android.os.Bundle bundle = null;
  private android.os.Bundle changeLog = null;
  private Object[] cache = null;
  private byte[] cacheState = null;

  private static final byte STATE_NOT_CACHED = 0;
  private static final byte STATE_CACHED_NO_VALUE = 1;
  private static final byte STATE_CACHED_VALUE = 2;

  /**
   * Constructs a new empty instance.
   */
  public TransactionData() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public TransactionData(String json) throws java.lang.IllegalArgumentException {
    try {
      this.jsonObject = new org.json.JSONObject(json);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public TransactionData(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public TransactionData(TransactionData src) {
    if (src.jsonObject != null) {
      this.jsonObject = com.clover.sdk.v3.JsonHelper.deepCopy(src.getJSONObject());
    }
  }

  private <T> T cacheGet(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return (T) cache[index];
  }

  private boolean cacheValueIsNotNull(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cache[index] != null;
  }

  private boolean cacheHasKey(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cacheState[index] == STATE_CACHED_VALUE;
  }

  private void cacheRemoveValue(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    cache[index] = null;
    cacheState[index] = STATE_CACHED_NO_VALUE;
  }

  private void cacheMarkDirty(CacheKey key) {
    if (cache != null) {
      int index = key.ordinal();
      cache[index] = null;
      cacheState[index] = STATE_NOT_CACHED;
    }
  }

  private void populateCache(int index) {
    if (cache == null) {
      int size = CacheKey.values().length;
      cache = new Object[size];
      cacheState = new byte[size];
    }

    if (cacheState[index] == STATE_NOT_CACHED) {
      CacheKey key = CacheKey.values()[index];

      if (getJSONObject().has(key.name())) {
        cache[index] = key.extractValue(this);
        cacheState[index] = STATE_CACHED_VALUE;
      } else {
        cacheState[index] = STATE_CACHED_NO_VALUE;
      }
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    if (jsonObject == null) {
      jsonObject = new org.json.JSONObject();
    }
    return jsonObject;
  }


  @Override
  public void validate() {
  }



  private com.clover.sdk.v3.pay.TxResult extractTxResult() {
    if (!getJSONObject().isNull("txResult")) {
      try {
        return com.clover.sdk.v3.pay.TxResult.valueOf(getJSONObject().optString("txResult"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private com.clover.sdk.v3.pay.ErrorCode extractTxError() {
    if (!getJSONObject().isNull("txError")) {
      try {
        return com.clover.sdk.v3.pay.ErrorCode.valueOf(getJSONObject().optString("txError"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private java.lang.Double extractAmount() {
    return getJSONObject().isNull("amount") ? null :
      getJSONObject().optDouble("amount");
  }


  private java.lang.Double extractTipAmount() {
    return getJSONObject().isNull("tipAmount") ? null :
      getJSONObject().optDouble("tipAmount");
  }


  private java.lang.Double extractCashBackAmount() {
    return getJSONObject().isNull("cashBackAmount") ? null :
      getJSONObject().optDouble("cashBackAmount");
  }


  private java.lang.Double extractAvailableOfflineSpendingAmount() {
    return getJSONObject().isNull("availableOfflineSpendingAmount") ? null :
      getJSONObject().optDouble("availableOfflineSpendingAmount");
  }


  private java.lang.String extractErrorCode() {
    return getJSONObject().isNull("errorCode") ? null :
      getJSONObject().optString("errorCode");
  }


  private java.lang.String extractErrorText() {
    return getJSONObject().isNull("errorText") ? null :
      getJSONObject().optString("errorText");
  }


  private java.lang.String extractTransactionDate() {
    return getJSONObject().isNull("transactionDate") ? null :
      getJSONObject().optString("transactionDate");
  }


  private java.lang.String extractTransactionTime() {
    return getJSONObject().isNull("transactionTime") ? null :
      getJSONObject().optString("transactionTime");
  }


  private java.lang.String extractMsrContainer() {
    return getJSONObject().isNull("msrContainer") ? null :
      getJSONObject().optString("msrContainer");
  }


  private java.lang.String extractMsrMaskedTrack1() {
    return getJSONObject().isNull("msrMaskedTrack1") ? null :
      getJSONObject().optString("msrMaskedTrack1");
  }


  private java.lang.String extractMsrMaskedTrack2() {
    return getJSONObject().isNull("msrMaskedTrack2") ? null :
      getJSONObject().optString("msrMaskedTrack2");
  }


  private java.lang.String extractMaskedManualPan() {
    return getJSONObject().isNull("maskedManualPan") ? null :
      getJSONObject().optString("maskedManualPan");
  }


  private java.lang.String extractSredContainer() {
    return getJSONObject().isNull("sredContainer") ? null :
      getJSONObject().optString("sredContainer");
  }


  private java.lang.String extractSred() {
    return getJSONObject().isNull("sred") ? null :
      getJSONObject().optString("sred");
  }


  private java.lang.String extractKsn() {
    return getJSONObject().isNull("ksn") ? null :
      getJSONObject().optString("ksn");
  }


  private java.lang.String extractTransArmorContainer() {
    return getJSONObject().isNull("transArmorContainer") ? null :
      getJSONObject().optString("transArmorContainer");
  }


  private java.lang.String extractTransArmorKey() {
    return getJSONObject().isNull("transArmorKey") ? null :
      getJSONObject().optString("transArmorKey");
  }


  private java.lang.String extractTransArmorKeyId() {
    return getJSONObject().isNull("transArmorKeyId") ? null :
      getJSONObject().optString("transArmorKeyId");
  }


  private java.lang.String extractTransArmorEncryptedTrack1() {
    return getJSONObject().isNull("transArmorEncryptedTrack1") ? null :
      getJSONObject().optString("transArmorEncryptedTrack1");
  }


  private java.lang.String extractTransArmorEncryptedTrack2() {
    return getJSONObject().isNull("transArmorEncryptedTrack2") ? null :
      getJSONObject().optString("transArmorEncryptedTrack2");
  }


  private java.lang.String extractIccContainer() {
    return getJSONObject().isNull("iccContainer") ? null :
      getJSONObject().optString("iccContainer");
  }


  private java.lang.String extractIccApplicationInterchangeProfile() {
    return getJSONObject().isNull("iccApplicationInterchangeProfile") ? null :
      getJSONObject().optString("iccApplicationInterchangeProfile");
  }


  private java.lang.String extractIccMaskedEmv57() {
    return getJSONObject().isNull("iccMaskedEmv57") ? null :
      getJSONObject().optString("iccMaskedEmv57");
  }


  private java.lang.String extractIccMaskedEmv5A() {
    return getJSONObject().isNull("iccMaskedEmv5A") ? null :
      getJSONObject().optString("iccMaskedEmv5A");
  }


  private java.lang.String extractIccApplicationPanSequenceNumber() {
    return getJSONObject().isNull("iccApplicationPanSequenceNumber") ? null :
      getJSONObject().optString("iccApplicationPanSequenceNumber");
  }


  private java.lang.String extractIccAmountAuthorized() {
    return getJSONObject().isNull("iccAmountAuthorized") ? null :
      getJSONObject().optString("iccAmountAuthorized");
  }


  private java.lang.String extractIccTransactionCurrencyCode() {
    return getJSONObject().isNull("iccTransactionCurrencyCode") ? null :
      getJSONObject().optString("iccTransactionCurrencyCode");
  }


  private java.lang.String extractIccTransactionCurrencyExponent() {
    return getJSONObject().isNull("iccTransactionCurrencyExponent") ? null :
      getJSONObject().optString("iccTransactionCurrencyExponent");
  }


  private java.lang.String extractIccApplicationUsageControl() {
    return getJSONObject().isNull("iccApplicationUsageControl") ? null :
      getJSONObject().optString("iccApplicationUsageControl");
  }


  private java.lang.String extractIccIssuerActionCodeDefault() {
    return getJSONObject().isNull("iccIssuerActionCodeDefault") ? null :
      getJSONObject().optString("iccIssuerActionCodeDefault");
  }


  private java.lang.String extractIccIssuerActionCodeDenial() {
    return getJSONObject().isNull("iccIssuerActionCodeDenial") ? null :
      getJSONObject().optString("iccIssuerActionCodeDenial");
  }


  private java.lang.String extractIccIssuerActionCodeOnline() {
    return getJSONObject().isNull("iccIssuerActionCodeOnline") ? null :
      getJSONObject().optString("iccIssuerActionCodeOnline");
  }


  private java.lang.String extractIccApplicationLabel() {
    return getJSONObject().isNull("iccApplicationLabel") ? null :
      getJSONObject().optString("iccApplicationLabel");
  }


  private java.lang.String extractIccApplicationCryptogram() {
    return getJSONObject().isNull("iccApplicationCryptogram") ? null :
      getJSONObject().optString("iccApplicationCryptogram");
  }


  private java.lang.String extractIccApplicationIdentifierCard() {
    return getJSONObject().isNull("iccApplicationIdentifierCard") ? null :
      getJSONObject().optString("iccApplicationIdentifierCard");
  }


  private java.lang.String extractIccApplicationIdentifierTerminal() {
    return getJSONObject().isNull("iccApplicationIdentifierTerminal") ? null :
      getJSONObject().optString("iccApplicationIdentifierTerminal");
  }


  private java.lang.String extractIccApplicationTransactionCounter() {
    return getJSONObject().isNull("iccApplicationTransactionCounter") ? null :
      getJSONObject().optString("iccApplicationTransactionCounter");
  }


  private java.lang.String extractIccApplicationVersionNumber() {
    return getJSONObject().isNull("iccApplicationVersionNumber") ? null :
      getJSONObject().optString("iccApplicationVersionNumber");
  }


  private java.lang.String extractIccCryptogramInformationData() {
    return getJSONObject().isNull("iccCryptogramInformationData") ? null :
      getJSONObject().optString("iccCryptogramInformationData");
  }


  private java.lang.String extractIccCvmResults() {
    return getJSONObject().isNull("iccCvmResults") ? null :
      getJSONObject().optString("iccCvmResults");
  }


  private java.lang.String extractIccInterfaceDeviceSerialNumber() {
    return getJSONObject().isNull("iccInterfaceDeviceSerialNumber") ? null :
      getJSONObject().optString("iccInterfaceDeviceSerialNumber");
  }


  private java.lang.String extractIccIssuerApplicationData() {
    return getJSONObject().isNull("iccIssuerApplicationData") ? null :
      getJSONObject().optString("iccIssuerApplicationData");
  }


  private java.lang.String extractIccPosEntryModeCode() {
    return getJSONObject().isNull("iccPosEntryModeCode") ? null :
      getJSONObject().optString("iccPosEntryModeCode");
  }


  private java.lang.String extractIccTerminalCapabilities() {
    return getJSONObject().isNull("iccTerminalCapabilities") ? null :
      getJSONObject().optString("iccTerminalCapabilities");
  }


  private java.lang.String extractIccTerminalCountryCode() {
    return getJSONObject().isNull("iccTerminalCountryCode") ? null :
      getJSONObject().optString("iccTerminalCountryCode");
  }


  private java.lang.String extractIccTerminalType() {
    return getJSONObject().isNull("iccTerminalType") ? null :
      getJSONObject().optString("iccTerminalType");
  }


  private java.lang.String extractIccTvr() {
    return getJSONObject().isNull("iccTvr") ? null :
      getJSONObject().optString("iccTvr");
  }


  private java.lang.String extractIccTransactionDate() {
    return getJSONObject().isNull("iccTransactionDate") ? null :
      getJSONObject().optString("iccTransactionDate");
  }


  private java.lang.String extractIccTsi() {
    return getJSONObject().isNull("iccTsi") ? null :
      getJSONObject().optString("iccTsi");
  }


  private java.lang.String extractIccTransactionType() {
    return getJSONObject().isNull("iccTransactionType") ? null :
      getJSONObject().optString("iccTransactionType");
  }


  private java.lang.String extractIccUnpredictableNumber() {
    return getJSONObject().isNull("iccUnpredictableNumber") ? null :
      getJSONObject().optString("iccUnpredictableNumber");
  }


  private java.lang.String extractIccTransactionTime() {
    return getJSONObject().isNull("iccTransactionTime") ? null :
      getJSONObject().optString("iccTransactionTime");
  }


  private java.lang.String extractIccAdditionalTerminalCapabilities() {
    return getJSONObject().isNull("iccAdditionalTerminalCapabilities") ? null :
      getJSONObject().optString("iccAdditionalTerminalCapabilities");
  }


  private java.lang.String extractIccTransactionCategoryCode() {
    return getJSONObject().isNull("iccTransactionCategoryCode") ? null :
      getJSONObject().optString("iccTransactionCategoryCode");
  }


  private java.lang.String extractIccIssuerApplicationPreferredName() {
    return getJSONObject().isNull("iccIssuerApplicationPreferredName") ? null :
      getJSONObject().optString("iccIssuerApplicationPreferredName");
  }


  private java.lang.String extractIccCardholderName() {
    return getJSONObject().isNull("iccCardholderName") ? null :
      getJSONObject().optString("iccCardholderName");
  }


  private java.lang.String extractIccIssuerCodeTableIndex() {
    return getJSONObject().isNull("iccIssuerCodeTableIndex") ? null :
      getJSONObject().optString("iccIssuerCodeTableIndex");
  }


  private java.lang.String extractPinBlockContainer() {
    return getJSONObject().isNull("pinBlockContainer") ? null :
      getJSONObject().optString("pinBlockContainer");
  }


  private java.lang.String extractPinBlock() {
    return getJSONObject().isNull("pinBlock") ? null :
      getJSONObject().optString("pinBlock");
  }


  private java.lang.String extractPinBlockKsn() {
    return getJSONObject().isNull("pinBlockKsn") ? null :
      getJSONObject().optString("pinBlockKsn");
  }


  private java.lang.String extractGwContainer() {
    return getJSONObject().isNull("gwContainer") ? null :
      getJSONObject().optString("gwContainer");
  }


  private java.lang.String extractGwIssuerAuthenticationData() {
    return getJSONObject().isNull("gwIssuerAuthenticationData") ? null :
      getJSONObject().optString("gwIssuerAuthenticationData");
  }


  private java.lang.String extractGwIssuerScriptTemplate1() {
    return getJSONObject().isNull("gwIssuerScriptTemplate1") ? null :
      getJSONObject().optString("gwIssuerScriptTemplate1");
  }


  private java.lang.String extractGwIssuerScriptTemplate2() {
    return getJSONObject().isNull("gwIssuerScriptTemplate2") ? null :
      getJSONObject().optString("gwIssuerScriptTemplate2");
  }


  private java.lang.String extractGwIssuerAuthorizationResponseCode() {
    return getJSONObject().isNull("gwIssuerAuthorizationResponseCode") ? null :
      getJSONObject().optString("gwIssuerAuthorizationResponseCode");
  }


  private java.lang.String extractGwMessageControlField() {
    return getJSONObject().isNull("gwMessageControlField") ? null :
      getJSONObject().optString("gwMessageControlField");
  }


  private com.clover.sdk.v3.pay.GwTxResult extractGwTxResult() {
    if (!getJSONObject().isNull("gwTxResult")) {
      try {
        return com.clover.sdk.v3.pay.GwTxResult.valueOf(getJSONObject().optString("gwTxResult"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private com.clover.sdk.v3.payments.CvmResult extractCvmResult() {
    if (!getJSONObject().isNull("cvmResult")) {
      try {
        return com.clover.sdk.v3.payments.CvmResult.valueOf(getJSONObject().optString("cvmResult"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private com.clover.sdk.v3.pay.ServiceCode1 extractServiceCode1() {
    if (!getJSONObject().isNull("serviceCode1")) {
      try {
        return com.clover.sdk.v3.pay.ServiceCode1.valueOf(getJSONObject().optString("serviceCode1"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private com.clover.sdk.v3.pay.ServiceCode2 extractServiceCode2() {
    if (!getJSONObject().isNull("serviceCode2")) {
      try {
        return com.clover.sdk.v3.pay.ServiceCode2.valueOf(getJSONObject().optString("serviceCode2"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private com.clover.sdk.v3.pay.ServiceCode3 extractServiceCode3() {
    if (!getJSONObject().isNull("serviceCode3")) {
      try {
        return com.clover.sdk.v3.pay.ServiceCode3.valueOf(getJSONObject().optString("serviceCode3"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  /** Checks whether the 'txResult' field is set and is not null */
  public boolean isNotNullTxResult() {
    return cacheValueIsNotNull(CacheKey.txResult);
  }

  /** Checks whether the 'txError' field is set and is not null */
  public boolean isNotNullTxError() {
    return cacheValueIsNotNull(CacheKey.txError);
  }

  /** Checks whether the 'amount' field is set and is not null */
  public boolean isNotNullAmount() {
    return cacheValueIsNotNull(CacheKey.amount);
  }

  /** Checks whether the 'tipAmount' field is set and is not null */
  public boolean isNotNullTipAmount() {
    return cacheValueIsNotNull(CacheKey.tipAmount);
  }

  /** Checks whether the 'cashBackAmount' field is set and is not null */
  public boolean isNotNullCashBackAmount() {
    return cacheValueIsNotNull(CacheKey.cashBackAmount);
  }

  /** Checks whether the 'availableOfflineSpendingAmount' field is set and is not null */
  public boolean isNotNullAvailableOfflineSpendingAmount() {
    return cacheValueIsNotNull(CacheKey.availableOfflineSpendingAmount);
  }

  /** Checks whether the 'errorCode' field is set and is not null */
  public boolean isNotNullErrorCode() {
    return cacheValueIsNotNull(CacheKey.errorCode);
  }

  /** Checks whether the 'errorText' field is set and is not null */
  public boolean isNotNullErrorText() {
    return cacheValueIsNotNull(CacheKey.errorText);
  }

  /** Checks whether the 'transactionDate' field is set and is not null */
  public boolean isNotNullTransactionDate() {
    return cacheValueIsNotNull(CacheKey.transactionDate);
  }

  /** Checks whether the 'transactionTime' field is set and is not null */
  public boolean isNotNullTransactionTime() {
    return cacheValueIsNotNull(CacheKey.transactionTime);
  }

  /** Checks whether the 'msrContainer' field is set and is not null */
  public boolean isNotNullMsrContainer() {
    return cacheValueIsNotNull(CacheKey.msrContainer);
  }

  /** Checks whether the 'msrMaskedTrack1' field is set and is not null */
  public boolean isNotNullMsrMaskedTrack1() {
    return cacheValueIsNotNull(CacheKey.msrMaskedTrack1);
  }

  /** Checks whether the 'msrMaskedTrack2' field is set and is not null */
  public boolean isNotNullMsrMaskedTrack2() {
    return cacheValueIsNotNull(CacheKey.msrMaskedTrack2);
  }

  /** Checks whether the 'maskedManualPan' field is set and is not null */
  public boolean isNotNullMaskedManualPan() {
    return cacheValueIsNotNull(CacheKey.maskedManualPan);
  }

  /** Checks whether the 'sredContainer' field is set and is not null */
  public boolean isNotNullSredContainer() {
    return cacheValueIsNotNull(CacheKey.sredContainer);
  }

  /** Checks whether the 'sred' field is set and is not null */
  public boolean isNotNullSred() {
    return cacheValueIsNotNull(CacheKey.sred);
  }

  /** Checks whether the 'ksn' field is set and is not null */
  public boolean isNotNullKsn() {
    return cacheValueIsNotNull(CacheKey.ksn);
  }

  /** Checks whether the 'transArmorContainer' field is set and is not null */
  public boolean isNotNullTransArmorContainer() {
    return cacheValueIsNotNull(CacheKey.transArmorContainer);
  }

  /** Checks whether the 'transArmorKey' field is set and is not null */
  public boolean isNotNullTransArmorKey() {
    return cacheValueIsNotNull(CacheKey.transArmorKey);
  }

  /** Checks whether the 'transArmorKeyId' field is set and is not null */
  public boolean isNotNullTransArmorKeyId() {
    return cacheValueIsNotNull(CacheKey.transArmorKeyId);
  }

  /** Checks whether the 'transArmorEncryptedTrack1' field is set and is not null */
  public boolean isNotNullTransArmorEncryptedTrack1() {
    return cacheValueIsNotNull(CacheKey.transArmorEncryptedTrack1);
  }

  /** Checks whether the 'transArmorEncryptedTrack2' field is set and is not null */
  public boolean isNotNullTransArmorEncryptedTrack2() {
    return cacheValueIsNotNull(CacheKey.transArmorEncryptedTrack2);
  }

  /** Checks whether the 'iccContainer' field is set and is not null */
  public boolean isNotNullIccContainer() {
    return cacheValueIsNotNull(CacheKey.iccContainer);
  }

  /** Checks whether the 'iccApplicationInterchangeProfile' field is set and is not null */
  public boolean isNotNullIccApplicationInterchangeProfile() {
    return cacheValueIsNotNull(CacheKey.iccApplicationInterchangeProfile);
  }

  /** Checks whether the 'iccMaskedEmv57' field is set and is not null */
  public boolean isNotNullIccMaskedEmv57() {
    return cacheValueIsNotNull(CacheKey.iccMaskedEmv57);
  }

  /** Checks whether the 'iccMaskedEmv5A' field is set and is not null */
  public boolean isNotNullIccMaskedEmv5A() {
    return cacheValueIsNotNull(CacheKey.iccMaskedEmv5A);
  }

  /** Checks whether the 'iccApplicationPanSequenceNumber' field is set and is not null */
  public boolean isNotNullIccApplicationPanSequenceNumber() {
    return cacheValueIsNotNull(CacheKey.iccApplicationPanSequenceNumber);
  }

  /** Checks whether the 'iccAmountAuthorized' field is set and is not null */
  public boolean isNotNullIccAmountAuthorized() {
    return cacheValueIsNotNull(CacheKey.iccAmountAuthorized);
  }

  /** Checks whether the 'iccTransactionCurrencyCode' field is set and is not null */
  public boolean isNotNullIccTransactionCurrencyCode() {
    return cacheValueIsNotNull(CacheKey.iccTransactionCurrencyCode);
  }

  /** Checks whether the 'iccTransactionCurrencyExponent' field is set and is not null */
  public boolean isNotNullIccTransactionCurrencyExponent() {
    return cacheValueIsNotNull(CacheKey.iccTransactionCurrencyExponent);
  }

  /** Checks whether the 'iccApplicationUsageControl' field is set and is not null */
  public boolean isNotNullIccApplicationUsageControl() {
    return cacheValueIsNotNull(CacheKey.iccApplicationUsageControl);
  }

  /** Checks whether the 'iccIssuerActionCodeDefault' field is set and is not null */
  public boolean isNotNullIccIssuerActionCodeDefault() {
    return cacheValueIsNotNull(CacheKey.iccIssuerActionCodeDefault);
  }

  /** Checks whether the 'iccIssuerActionCodeDenial' field is set and is not null */
  public boolean isNotNullIccIssuerActionCodeDenial() {
    return cacheValueIsNotNull(CacheKey.iccIssuerActionCodeDenial);
  }

  /** Checks whether the 'iccIssuerActionCodeOnline' field is set and is not null */
  public boolean isNotNullIccIssuerActionCodeOnline() {
    return cacheValueIsNotNull(CacheKey.iccIssuerActionCodeOnline);
  }

  /** Checks whether the 'iccApplicationLabel' field is set and is not null */
  public boolean isNotNullIccApplicationLabel() {
    return cacheValueIsNotNull(CacheKey.iccApplicationLabel);
  }

  /** Checks whether the 'iccApplicationCryptogram' field is set and is not null */
  public boolean isNotNullIccApplicationCryptogram() {
    return cacheValueIsNotNull(CacheKey.iccApplicationCryptogram);
  }

  /** Checks whether the 'iccApplicationIdentifierCard' field is set and is not null */
  public boolean isNotNullIccApplicationIdentifierCard() {
    return cacheValueIsNotNull(CacheKey.iccApplicationIdentifierCard);
  }

  /** Checks whether the 'iccApplicationIdentifierTerminal' field is set and is not null */
  public boolean isNotNullIccApplicationIdentifierTerminal() {
    return cacheValueIsNotNull(CacheKey.iccApplicationIdentifierTerminal);
  }

  /** Checks whether the 'iccApplicationTransactionCounter' field is set and is not null */
  public boolean isNotNullIccApplicationTransactionCounter() {
    return cacheValueIsNotNull(CacheKey.iccApplicationTransactionCounter);
  }

  /** Checks whether the 'iccApplicationVersionNumber' field is set and is not null */
  public boolean isNotNullIccApplicationVersionNumber() {
    return cacheValueIsNotNull(CacheKey.iccApplicationVersionNumber);
  }

  /** Checks whether the 'iccCryptogramInformationData' field is set and is not null */
  public boolean isNotNullIccCryptogramInformationData() {
    return cacheValueIsNotNull(CacheKey.iccCryptogramInformationData);
  }

  /** Checks whether the 'iccCvmResults' field is set and is not null */
  public boolean isNotNullIccCvmResults() {
    return cacheValueIsNotNull(CacheKey.iccCvmResults);
  }

  /** Checks whether the 'iccInterfaceDeviceSerialNumber' field is set and is not null */
  public boolean isNotNullIccInterfaceDeviceSerialNumber() {
    return cacheValueIsNotNull(CacheKey.iccInterfaceDeviceSerialNumber);
  }

  /** Checks whether the 'iccIssuerApplicationData' field is set and is not null */
  public boolean isNotNullIccIssuerApplicationData() {
    return cacheValueIsNotNull(CacheKey.iccIssuerApplicationData);
  }

  /** Checks whether the 'iccPosEntryModeCode' field is set and is not null */
  public boolean isNotNullIccPosEntryModeCode() {
    return cacheValueIsNotNull(CacheKey.iccPosEntryModeCode);
  }

  /** Checks whether the 'iccTerminalCapabilities' field is set and is not null */
  public boolean isNotNullIccTerminalCapabilities() {
    return cacheValueIsNotNull(CacheKey.iccTerminalCapabilities);
  }

  /** Checks whether the 'iccTerminalCountryCode' field is set and is not null */
  public boolean isNotNullIccTerminalCountryCode() {
    return cacheValueIsNotNull(CacheKey.iccTerminalCountryCode);
  }

  /** Checks whether the 'iccTerminalType' field is set and is not null */
  public boolean isNotNullIccTerminalType() {
    return cacheValueIsNotNull(CacheKey.iccTerminalType);
  }

  /** Checks whether the 'iccTvr' field is set and is not null */
  public boolean isNotNullIccTvr() {
    return cacheValueIsNotNull(CacheKey.iccTvr);
  }

  /** Checks whether the 'iccTransactionDate' field is set and is not null */
  public boolean isNotNullIccTransactionDate() {
    return cacheValueIsNotNull(CacheKey.iccTransactionDate);
  }

  /** Checks whether the 'iccTsi' field is set and is not null */
  public boolean isNotNullIccTsi() {
    return cacheValueIsNotNull(CacheKey.iccTsi);
  }

  /** Checks whether the 'iccTransactionType' field is set and is not null */
  public boolean isNotNullIccTransactionType() {
    return cacheValueIsNotNull(CacheKey.iccTransactionType);
  }

  /** Checks whether the 'iccUnpredictableNumber' field is set and is not null */
  public boolean isNotNullIccUnpredictableNumber() {
    return cacheValueIsNotNull(CacheKey.iccUnpredictableNumber);
  }

  /** Checks whether the 'iccTransactionTime' field is set and is not null */
  public boolean isNotNullIccTransactionTime() {
    return cacheValueIsNotNull(CacheKey.iccTransactionTime);
  }

  /** Checks whether the 'iccAdditionalTerminalCapabilities' field is set and is not null */
  public boolean isNotNullIccAdditionalTerminalCapabilities() {
    return cacheValueIsNotNull(CacheKey.iccAdditionalTerminalCapabilities);
  }

  /** Checks whether the 'iccTransactionCategoryCode' field is set and is not null */
  public boolean isNotNullIccTransactionCategoryCode() {
    return cacheValueIsNotNull(CacheKey.iccTransactionCategoryCode);
  }

  /** Checks whether the 'iccIssuerApplicationPreferredName' field is set and is not null */
  public boolean isNotNullIccIssuerApplicationPreferredName() {
    return cacheValueIsNotNull(CacheKey.iccIssuerApplicationPreferredName);
  }

  /** Checks whether the 'iccCardholderName' field is set and is not null */
  public boolean isNotNullIccCardholderName() {
    return cacheValueIsNotNull(CacheKey.iccCardholderName);
  }

  /** Checks whether the 'iccIssuerCodeTableIndex' field is set and is not null */
  public boolean isNotNullIccIssuerCodeTableIndex() {
    return cacheValueIsNotNull(CacheKey.iccIssuerCodeTableIndex);
  }

  /** Checks whether the 'pinBlockContainer' field is set and is not null */
  public boolean isNotNullPinBlockContainer() {
    return cacheValueIsNotNull(CacheKey.pinBlockContainer);
  }

  /** Checks whether the 'pinBlock' field is set and is not null */
  public boolean isNotNullPinBlock() {
    return cacheValueIsNotNull(CacheKey.pinBlock);
  }

  /** Checks whether the 'pinBlockKsn' field is set and is not null */
  public boolean isNotNullPinBlockKsn() {
    return cacheValueIsNotNull(CacheKey.pinBlockKsn);
  }

  /** Checks whether the 'gwContainer' field is set and is not null */
  public boolean isNotNullGwContainer() {
    return cacheValueIsNotNull(CacheKey.gwContainer);
  }

  /** Checks whether the 'gwIssuerAuthenticationData' field is set and is not null */
  public boolean isNotNullGwIssuerAuthenticationData() {
    return cacheValueIsNotNull(CacheKey.gwIssuerAuthenticationData);
  }

  /** Checks whether the 'gwIssuerScriptTemplate1' field is set and is not null */
  public boolean isNotNullGwIssuerScriptTemplate1() {
    return cacheValueIsNotNull(CacheKey.gwIssuerScriptTemplate1);
  }

  /** Checks whether the 'gwIssuerScriptTemplate2' field is set and is not null */
  public boolean isNotNullGwIssuerScriptTemplate2() {
    return cacheValueIsNotNull(CacheKey.gwIssuerScriptTemplate2);
  }

  /** Checks whether the 'gwIssuerAuthorizationResponseCode' field is set and is not null */
  public boolean isNotNullGwIssuerAuthorizationResponseCode() {
    return cacheValueIsNotNull(CacheKey.gwIssuerAuthorizationResponseCode);
  }

  /** Checks whether the 'gwMessageControlField' field is set and is not null */
  public boolean isNotNullGwMessageControlField() {
    return cacheValueIsNotNull(CacheKey.gwMessageControlField);
  }

  /** Checks whether the 'gwTxResult' field is set and is not null */
  public boolean isNotNullGwTxResult() {
    return cacheValueIsNotNull(CacheKey.gwTxResult);
  }

  /** Checks whether the 'cvmResult' field is set and is not null */
  public boolean isNotNullCvmResult() {
    return cacheValueIsNotNull(CacheKey.cvmResult);
  }

  /** Checks whether the 'serviceCode1' field is set and is not null */
  public boolean isNotNullServiceCode1() {
    return cacheValueIsNotNull(CacheKey.serviceCode1);
  }

  /** Checks whether the 'serviceCode2' field is set and is not null */
  public boolean isNotNullServiceCode2() {
    return cacheValueIsNotNull(CacheKey.serviceCode2);
  }

  /** Checks whether the 'serviceCode3' field is set and is not null */
  public boolean isNotNullServiceCode3() {
    return cacheValueIsNotNull(CacheKey.serviceCode3);
  }


  /** Checks whether the 'txResult' field has been set, however the value could be null */
  public boolean hasTxResult() {
    return cacheHasKey(CacheKey.txResult);
  }

  /** Checks whether the 'txError' field has been set, however the value could be null */
  public boolean hasTxError() {
    return cacheHasKey(CacheKey.txError);
  }

  /** Checks whether the 'amount' field has been set, however the value could be null */
  public boolean hasAmount() {
    return cacheHasKey(CacheKey.amount);
  }

  /** Checks whether the 'tipAmount' field has been set, however the value could be null */
  public boolean hasTipAmount() {
    return cacheHasKey(CacheKey.tipAmount);
  }

  /** Checks whether the 'cashBackAmount' field has been set, however the value could be null */
  public boolean hasCashBackAmount() {
    return cacheHasKey(CacheKey.cashBackAmount);
  }

  /** Checks whether the 'availableOfflineSpendingAmount' field has been set, however the value could be null */
  public boolean hasAvailableOfflineSpendingAmount() {
    return cacheHasKey(CacheKey.availableOfflineSpendingAmount);
  }

  /** Checks whether the 'errorCode' field has been set, however the value could be null */
  public boolean hasErrorCode() {
    return cacheHasKey(CacheKey.errorCode);
  }

  /** Checks whether the 'errorText' field has been set, however the value could be null */
  public boolean hasErrorText() {
    return cacheHasKey(CacheKey.errorText);
  }

  /** Checks whether the 'transactionDate' field has been set, however the value could be null */
  public boolean hasTransactionDate() {
    return cacheHasKey(CacheKey.transactionDate);
  }

  /** Checks whether the 'transactionTime' field has been set, however the value could be null */
  public boolean hasTransactionTime() {
    return cacheHasKey(CacheKey.transactionTime);
  }

  /** Checks whether the 'msrContainer' field has been set, however the value could be null */
  public boolean hasMsrContainer() {
    return cacheHasKey(CacheKey.msrContainer);
  }

  /** Checks whether the 'msrMaskedTrack1' field has been set, however the value could be null */
  public boolean hasMsrMaskedTrack1() {
    return cacheHasKey(CacheKey.msrMaskedTrack1);
  }

  /** Checks whether the 'msrMaskedTrack2' field has been set, however the value could be null */
  public boolean hasMsrMaskedTrack2() {
    return cacheHasKey(CacheKey.msrMaskedTrack2);
  }

  /** Checks whether the 'maskedManualPan' field has been set, however the value could be null */
  public boolean hasMaskedManualPan() {
    return cacheHasKey(CacheKey.maskedManualPan);
  }

  /** Checks whether the 'sredContainer' field has been set, however the value could be null */
  public boolean hasSredContainer() {
    return cacheHasKey(CacheKey.sredContainer);
  }

  /** Checks whether the 'sred' field has been set, however the value could be null */
  public boolean hasSred() {
    return cacheHasKey(CacheKey.sred);
  }

  /** Checks whether the 'ksn' field has been set, however the value could be null */
  public boolean hasKsn() {
    return cacheHasKey(CacheKey.ksn);
  }

  /** Checks whether the 'transArmorContainer' field has been set, however the value could be null */
  public boolean hasTransArmorContainer() {
    return cacheHasKey(CacheKey.transArmorContainer);
  }

  /** Checks whether the 'transArmorKey' field has been set, however the value could be null */
  public boolean hasTransArmorKey() {
    return cacheHasKey(CacheKey.transArmorKey);
  }

  /** Checks whether the 'transArmorKeyId' field has been set, however the value could be null */
  public boolean hasTransArmorKeyId() {
    return cacheHasKey(CacheKey.transArmorKeyId);
  }

  /** Checks whether the 'transArmorEncryptedTrack1' field has been set, however the value could be null */
  public boolean hasTransArmorEncryptedTrack1() {
    return cacheHasKey(CacheKey.transArmorEncryptedTrack1);
  }

  /** Checks whether the 'transArmorEncryptedTrack2' field has been set, however the value could be null */
  public boolean hasTransArmorEncryptedTrack2() {
    return cacheHasKey(CacheKey.transArmorEncryptedTrack2);
  }

  /** Checks whether the 'iccContainer' field has been set, however the value could be null */
  public boolean hasIccContainer() {
    return cacheHasKey(CacheKey.iccContainer);
  }

  /** Checks whether the 'iccApplicationInterchangeProfile' field has been set, however the value could be null */
  public boolean hasIccApplicationInterchangeProfile() {
    return cacheHasKey(CacheKey.iccApplicationInterchangeProfile);
  }

  /** Checks whether the 'iccMaskedEmv57' field has been set, however the value could be null */
  public boolean hasIccMaskedEmv57() {
    return cacheHasKey(CacheKey.iccMaskedEmv57);
  }

  /** Checks whether the 'iccMaskedEmv5A' field has been set, however the value could be null */
  public boolean hasIccMaskedEmv5A() {
    return cacheHasKey(CacheKey.iccMaskedEmv5A);
  }

  /** Checks whether the 'iccApplicationPanSequenceNumber' field has been set, however the value could be null */
  public boolean hasIccApplicationPanSequenceNumber() {
    return cacheHasKey(CacheKey.iccApplicationPanSequenceNumber);
  }

  /** Checks whether the 'iccAmountAuthorized' field has been set, however the value could be null */
  public boolean hasIccAmountAuthorized() {
    return cacheHasKey(CacheKey.iccAmountAuthorized);
  }

  /** Checks whether the 'iccTransactionCurrencyCode' field has been set, however the value could be null */
  public boolean hasIccTransactionCurrencyCode() {
    return cacheHasKey(CacheKey.iccTransactionCurrencyCode);
  }

  /** Checks whether the 'iccTransactionCurrencyExponent' field has been set, however the value could be null */
  public boolean hasIccTransactionCurrencyExponent() {
    return cacheHasKey(CacheKey.iccTransactionCurrencyExponent);
  }

  /** Checks whether the 'iccApplicationUsageControl' field has been set, however the value could be null */
  public boolean hasIccApplicationUsageControl() {
    return cacheHasKey(CacheKey.iccApplicationUsageControl);
  }

  /** Checks whether the 'iccIssuerActionCodeDefault' field has been set, however the value could be null */
  public boolean hasIccIssuerActionCodeDefault() {
    return cacheHasKey(CacheKey.iccIssuerActionCodeDefault);
  }

  /** Checks whether the 'iccIssuerActionCodeDenial' field has been set, however the value could be null */
  public boolean hasIccIssuerActionCodeDenial() {
    return cacheHasKey(CacheKey.iccIssuerActionCodeDenial);
  }

  /** Checks whether the 'iccIssuerActionCodeOnline' field has been set, however the value could be null */
  public boolean hasIccIssuerActionCodeOnline() {
    return cacheHasKey(CacheKey.iccIssuerActionCodeOnline);
  }

  /** Checks whether the 'iccApplicationLabel' field has been set, however the value could be null */
  public boolean hasIccApplicationLabel() {
    return cacheHasKey(CacheKey.iccApplicationLabel);
  }

  /** Checks whether the 'iccApplicationCryptogram' field has been set, however the value could be null */
  public boolean hasIccApplicationCryptogram() {
    return cacheHasKey(CacheKey.iccApplicationCryptogram);
  }

  /** Checks whether the 'iccApplicationIdentifierCard' field has been set, however the value could be null */
  public boolean hasIccApplicationIdentifierCard() {
    return cacheHasKey(CacheKey.iccApplicationIdentifierCard);
  }

  /** Checks whether the 'iccApplicationIdentifierTerminal' field has been set, however the value could be null */
  public boolean hasIccApplicationIdentifierTerminal() {
    return cacheHasKey(CacheKey.iccApplicationIdentifierTerminal);
  }

  /** Checks whether the 'iccApplicationTransactionCounter' field has been set, however the value could be null */
  public boolean hasIccApplicationTransactionCounter() {
    return cacheHasKey(CacheKey.iccApplicationTransactionCounter);
  }

  /** Checks whether the 'iccApplicationVersionNumber' field has been set, however the value could be null */
  public boolean hasIccApplicationVersionNumber() {
    return cacheHasKey(CacheKey.iccApplicationVersionNumber);
  }

  /** Checks whether the 'iccCryptogramInformationData' field has been set, however the value could be null */
  public boolean hasIccCryptogramInformationData() {
    return cacheHasKey(CacheKey.iccCryptogramInformationData);
  }

  /** Checks whether the 'iccCvmResults' field has been set, however the value could be null */
  public boolean hasIccCvmResults() {
    return cacheHasKey(CacheKey.iccCvmResults);
  }

  /** Checks whether the 'iccInterfaceDeviceSerialNumber' field has been set, however the value could be null */
  public boolean hasIccInterfaceDeviceSerialNumber() {
    return cacheHasKey(CacheKey.iccInterfaceDeviceSerialNumber);
  }

  /** Checks whether the 'iccIssuerApplicationData' field has been set, however the value could be null */
  public boolean hasIccIssuerApplicationData() {
    return cacheHasKey(CacheKey.iccIssuerApplicationData);
  }

  /** Checks whether the 'iccPosEntryModeCode' field has been set, however the value could be null */
  public boolean hasIccPosEntryModeCode() {
    return cacheHasKey(CacheKey.iccPosEntryModeCode);
  }

  /** Checks whether the 'iccTerminalCapabilities' field has been set, however the value could be null */
  public boolean hasIccTerminalCapabilities() {
    return cacheHasKey(CacheKey.iccTerminalCapabilities);
  }

  /** Checks whether the 'iccTerminalCountryCode' field has been set, however the value could be null */
  public boolean hasIccTerminalCountryCode() {
    return cacheHasKey(CacheKey.iccTerminalCountryCode);
  }

  /** Checks whether the 'iccTerminalType' field has been set, however the value could be null */
  public boolean hasIccTerminalType() {
    return cacheHasKey(CacheKey.iccTerminalType);
  }

  /** Checks whether the 'iccTvr' field has been set, however the value could be null */
  public boolean hasIccTvr() {
    return cacheHasKey(CacheKey.iccTvr);
  }

  /** Checks whether the 'iccTransactionDate' field has been set, however the value could be null */
  public boolean hasIccTransactionDate() {
    return cacheHasKey(CacheKey.iccTransactionDate);
  }

  /** Checks whether the 'iccTsi' field has been set, however the value could be null */
  public boolean hasIccTsi() {
    return cacheHasKey(CacheKey.iccTsi);
  }

  /** Checks whether the 'iccTransactionType' field has been set, however the value could be null */
  public boolean hasIccTransactionType() {
    return cacheHasKey(CacheKey.iccTransactionType);
  }

  /** Checks whether the 'iccUnpredictableNumber' field has been set, however the value could be null */
  public boolean hasIccUnpredictableNumber() {
    return cacheHasKey(CacheKey.iccUnpredictableNumber);
  }

  /** Checks whether the 'iccTransactionTime' field has been set, however the value could be null */
  public boolean hasIccTransactionTime() {
    return cacheHasKey(CacheKey.iccTransactionTime);
  }

  /** Checks whether the 'iccAdditionalTerminalCapabilities' field has been set, however the value could be null */
  public boolean hasIccAdditionalTerminalCapabilities() {
    return cacheHasKey(CacheKey.iccAdditionalTerminalCapabilities);
  }

  /** Checks whether the 'iccTransactionCategoryCode' field has been set, however the value could be null */
  public boolean hasIccTransactionCategoryCode() {
    return cacheHasKey(CacheKey.iccTransactionCategoryCode);
  }

  /** Checks whether the 'iccIssuerApplicationPreferredName' field has been set, however the value could be null */
  public boolean hasIccIssuerApplicationPreferredName() {
    return cacheHasKey(CacheKey.iccIssuerApplicationPreferredName);
  }

  /** Checks whether the 'iccCardholderName' field has been set, however the value could be null */
  public boolean hasIccCardholderName() {
    return cacheHasKey(CacheKey.iccCardholderName);
  }

  /** Checks whether the 'iccIssuerCodeTableIndex' field has been set, however the value could be null */
  public boolean hasIccIssuerCodeTableIndex() {
    return cacheHasKey(CacheKey.iccIssuerCodeTableIndex);
  }

  /** Checks whether the 'pinBlockContainer' field has been set, however the value could be null */
  public boolean hasPinBlockContainer() {
    return cacheHasKey(CacheKey.pinBlockContainer);
  }

  /** Checks whether the 'pinBlock' field has been set, however the value could be null */
  public boolean hasPinBlock() {
    return cacheHasKey(CacheKey.pinBlock);
  }

  /** Checks whether the 'pinBlockKsn' field has been set, however the value could be null */
  public boolean hasPinBlockKsn() {
    return cacheHasKey(CacheKey.pinBlockKsn);
  }

  /** Checks whether the 'gwContainer' field has been set, however the value could be null */
  public boolean hasGwContainer() {
    return cacheHasKey(CacheKey.gwContainer);
  }

  /** Checks whether the 'gwIssuerAuthenticationData' field has been set, however the value could be null */
  public boolean hasGwIssuerAuthenticationData() {
    return cacheHasKey(CacheKey.gwIssuerAuthenticationData);
  }

  /** Checks whether the 'gwIssuerScriptTemplate1' field has been set, however the value could be null */
  public boolean hasGwIssuerScriptTemplate1() {
    return cacheHasKey(CacheKey.gwIssuerScriptTemplate1);
  }

  /** Checks whether the 'gwIssuerScriptTemplate2' field has been set, however the value could be null */
  public boolean hasGwIssuerScriptTemplate2() {
    return cacheHasKey(CacheKey.gwIssuerScriptTemplate2);
  }

  /** Checks whether the 'gwIssuerAuthorizationResponseCode' field has been set, however the value could be null */
  public boolean hasGwIssuerAuthorizationResponseCode() {
    return cacheHasKey(CacheKey.gwIssuerAuthorizationResponseCode);
  }

  /** Checks whether the 'gwMessageControlField' field has been set, however the value could be null */
  public boolean hasGwMessageControlField() {
    return cacheHasKey(CacheKey.gwMessageControlField);
  }

  /** Checks whether the 'gwTxResult' field has been set, however the value could be null */
  public boolean hasGwTxResult() {
    return cacheHasKey(CacheKey.gwTxResult);
  }

  /** Checks whether the 'cvmResult' field has been set, however the value could be null */
  public boolean hasCvmResult() {
    return cacheHasKey(CacheKey.cvmResult);
  }

  /** Checks whether the 'serviceCode1' field has been set, however the value could be null */
  public boolean hasServiceCode1() {
    return cacheHasKey(CacheKey.serviceCode1);
  }

  /** Checks whether the 'serviceCode2' field has been set, however the value could be null */
  public boolean hasServiceCode2() {
    return cacheHasKey(CacheKey.serviceCode2);
  }

  /** Checks whether the 'serviceCode3' field has been set, however the value could be null */
  public boolean hasServiceCode3() {
    return cacheHasKey(CacheKey.serviceCode3);
  }


  /**
   * Sets the field 'txResult'.
   */
  public TransactionData setTxResult(com.clover.sdk.v3.pay.TxResult txResult) {
    logChange("txResult");

    try {
      getJSONObject().put("txResult", txResult == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(txResult));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.txResult);
    return this;
  }

  /**
   * Sets the field 'txError'.
   */
  public TransactionData setTxError(com.clover.sdk.v3.pay.ErrorCode txError) {
    logChange("txError");

    try {
      getJSONObject().put("txError", txError == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(txError));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.txError);
    return this;
  }

  /**
   * Sets the field 'amount'.
   */
  public TransactionData setAmount(java.lang.Double amount) {
    logChange("amount");

    try {
      getJSONObject().put("amount", amount == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(amount));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.amount);
    return this;
  }

  /**
   * Sets the field 'tipAmount'.
   */
  public TransactionData setTipAmount(java.lang.Double tipAmount) {
    logChange("tipAmount");

    try {
      getJSONObject().put("tipAmount", tipAmount == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(tipAmount));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.tipAmount);
    return this;
  }

  /**
   * Sets the field 'cashBackAmount'.
   */
  public TransactionData setCashBackAmount(java.lang.Double cashBackAmount) {
    logChange("cashBackAmount");

    try {
      getJSONObject().put("cashBackAmount", cashBackAmount == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(cashBackAmount));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.cashBackAmount);
    return this;
  }

  /**
   * Sets the field 'availableOfflineSpendingAmount'.
   */
  public TransactionData setAvailableOfflineSpendingAmount(java.lang.Double availableOfflineSpendingAmount) {
    logChange("availableOfflineSpendingAmount");

    try {
      getJSONObject().put("availableOfflineSpendingAmount", availableOfflineSpendingAmount == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(availableOfflineSpendingAmount));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.availableOfflineSpendingAmount);
    return this;
  }

  /**
   * Sets the field 'errorCode'.
   */
  public TransactionData setErrorCode(java.lang.String errorCode) {
    logChange("errorCode");

    try {
      getJSONObject().put("errorCode", errorCode == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(errorCode));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.errorCode);
    return this;
  }

  /**
   * Sets the field 'errorText'.
   */
  public TransactionData setErrorText(java.lang.String errorText) {
    logChange("errorText");

    try {
      getJSONObject().put("errorText", errorText == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(errorText));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.errorText);
    return this;
  }

  /**
   * Sets the field 'transactionDate'.
   */
  public TransactionData setTransactionDate(java.lang.String transactionDate) {
    logChange("transactionDate");

    try {
      getJSONObject().put("transactionDate", transactionDate == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(transactionDate));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.transactionDate);
    return this;
  }

  /**
   * Sets the field 'transactionTime'.
   */
  public TransactionData setTransactionTime(java.lang.String transactionTime) {
    logChange("transactionTime");

    try {
      getJSONObject().put("transactionTime", transactionTime == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(transactionTime));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.transactionTime);
    return this;
  }

  /**
   * Sets the field 'msrContainer'.
   */
  public TransactionData setMsrContainer(java.lang.String msrContainer) {
    logChange("msrContainer");

    try {
      getJSONObject().put("msrContainer", msrContainer == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(msrContainer));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.msrContainer);
    return this;
  }

  /**
   * Sets the field 'msrMaskedTrack1'.
   */
  public TransactionData setMsrMaskedTrack1(java.lang.String msrMaskedTrack1) {
    logChange("msrMaskedTrack1");

    try {
      getJSONObject().put("msrMaskedTrack1", msrMaskedTrack1 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(msrMaskedTrack1));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.msrMaskedTrack1);
    return this;
  }

  /**
   * Sets the field 'msrMaskedTrack2'.
   */
  public TransactionData setMsrMaskedTrack2(java.lang.String msrMaskedTrack2) {
    logChange("msrMaskedTrack2");

    try {
      getJSONObject().put("msrMaskedTrack2", msrMaskedTrack2 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(msrMaskedTrack2));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.msrMaskedTrack2);
    return this;
  }

  /**
   * Sets the field 'maskedManualPan'.
   */
  public TransactionData setMaskedManualPan(java.lang.String maskedManualPan) {
    logChange("maskedManualPan");

    try {
      getJSONObject().put("maskedManualPan", maskedManualPan == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(maskedManualPan));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.maskedManualPan);
    return this;
  }

  /**
   * Sets the field 'sredContainer'.
   */
  public TransactionData setSredContainer(java.lang.String sredContainer) {
    logChange("sredContainer");

    try {
      getJSONObject().put("sredContainer", sredContainer == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(sredContainer));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.sredContainer);
    return this;
  }

  /**
   * Sets the field 'sred'.
   */
  public TransactionData setSred(java.lang.String sred) {
    logChange("sred");

    try {
      getJSONObject().put("sred", sred == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(sred));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.sred);
    return this;
  }

  /**
   * Sets the field 'ksn'.
   */
  public TransactionData setKsn(java.lang.String ksn) {
    logChange("ksn");

    try {
      getJSONObject().put("ksn", ksn == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(ksn));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.ksn);
    return this;
  }

  /**
   * Sets the field 'transArmorContainer'.
   */
  public TransactionData setTransArmorContainer(java.lang.String transArmorContainer) {
    logChange("transArmorContainer");

    try {
      getJSONObject().put("transArmorContainer", transArmorContainer == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(transArmorContainer));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.transArmorContainer);
    return this;
  }

  /**
   * Sets the field 'transArmorKey'.
   */
  public TransactionData setTransArmorKey(java.lang.String transArmorKey) {
    logChange("transArmorKey");

    try {
      getJSONObject().put("transArmorKey", transArmorKey == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(transArmorKey));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.transArmorKey);
    return this;
  }

  /**
   * Sets the field 'transArmorKeyId'.
   */
  public TransactionData setTransArmorKeyId(java.lang.String transArmorKeyId) {
    logChange("transArmorKeyId");

    try {
      getJSONObject().put("transArmorKeyId", transArmorKeyId == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(transArmorKeyId));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.transArmorKeyId);
    return this;
  }

  /**
   * Sets the field 'transArmorEncryptedTrack1'.
   */
  public TransactionData setTransArmorEncryptedTrack1(java.lang.String transArmorEncryptedTrack1) {
    logChange("transArmorEncryptedTrack1");

    try {
      getJSONObject().put("transArmorEncryptedTrack1", transArmorEncryptedTrack1 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(transArmorEncryptedTrack1));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.transArmorEncryptedTrack1);
    return this;
  }

  /**
   * Sets the field 'transArmorEncryptedTrack2'.
   */
  public TransactionData setTransArmorEncryptedTrack2(java.lang.String transArmorEncryptedTrack2) {
    logChange("transArmorEncryptedTrack2");

    try {
      getJSONObject().put("transArmorEncryptedTrack2", transArmorEncryptedTrack2 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(transArmorEncryptedTrack2));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.transArmorEncryptedTrack2);
    return this;
  }

  /**
   * Sets the field 'iccContainer'.
   */
  public TransactionData setIccContainer(java.lang.String iccContainer) {
    logChange("iccContainer");

    try {
      getJSONObject().put("iccContainer", iccContainer == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccContainer));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccContainer);
    return this;
  }

  /**
   * Sets the field 'iccApplicationInterchangeProfile'.
   */
  public TransactionData setIccApplicationInterchangeProfile(java.lang.String iccApplicationInterchangeProfile) {
    logChange("iccApplicationInterchangeProfile");

    try {
      getJSONObject().put("iccApplicationInterchangeProfile", iccApplicationInterchangeProfile == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccApplicationInterchangeProfile));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccApplicationInterchangeProfile);
    return this;
  }

  /**
   * Sets the field 'iccMaskedEmv57'.
   */
  public TransactionData setIccMaskedEmv57(java.lang.String iccMaskedEmv57) {
    logChange("iccMaskedEmv57");

    try {
      getJSONObject().put("iccMaskedEmv57", iccMaskedEmv57 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccMaskedEmv57));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccMaskedEmv57);
    return this;
  }

  /**
   * Sets the field 'iccMaskedEmv5A'.
   */
  public TransactionData setIccMaskedEmv5A(java.lang.String iccMaskedEmv5A) {
    logChange("iccMaskedEmv5A");

    try {
      getJSONObject().put("iccMaskedEmv5A", iccMaskedEmv5A == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccMaskedEmv5A));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccMaskedEmv5A);
    return this;
  }

  /**
   * Sets the field 'iccApplicationPanSequenceNumber'.
   */
  public TransactionData setIccApplicationPanSequenceNumber(java.lang.String iccApplicationPanSequenceNumber) {
    logChange("iccApplicationPanSequenceNumber");

    try {
      getJSONObject().put("iccApplicationPanSequenceNumber", iccApplicationPanSequenceNumber == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccApplicationPanSequenceNumber));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccApplicationPanSequenceNumber);
    return this;
  }

  /**
   * Sets the field 'iccAmountAuthorized'.
   */
  public TransactionData setIccAmountAuthorized(java.lang.String iccAmountAuthorized) {
    logChange("iccAmountAuthorized");

    try {
      getJSONObject().put("iccAmountAuthorized", iccAmountAuthorized == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccAmountAuthorized));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccAmountAuthorized);
    return this;
  }

  /**
   * Sets the field 'iccTransactionCurrencyCode'.
   */
  public TransactionData setIccTransactionCurrencyCode(java.lang.String iccTransactionCurrencyCode) {
    logChange("iccTransactionCurrencyCode");

    try {
      getJSONObject().put("iccTransactionCurrencyCode", iccTransactionCurrencyCode == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccTransactionCurrencyCode));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccTransactionCurrencyCode);
    return this;
  }

  /**
   * Sets the field 'iccTransactionCurrencyExponent'.
   */
  public TransactionData setIccTransactionCurrencyExponent(java.lang.String iccTransactionCurrencyExponent) {
    logChange("iccTransactionCurrencyExponent");

    try {
      getJSONObject().put("iccTransactionCurrencyExponent", iccTransactionCurrencyExponent == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccTransactionCurrencyExponent));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccTransactionCurrencyExponent);
    return this;
  }

  /**
   * Sets the field 'iccApplicationUsageControl'.
   */
  public TransactionData setIccApplicationUsageControl(java.lang.String iccApplicationUsageControl) {
    logChange("iccApplicationUsageControl");

    try {
      getJSONObject().put("iccApplicationUsageControl", iccApplicationUsageControl == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccApplicationUsageControl));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccApplicationUsageControl);
    return this;
  }

  /**
   * Sets the field 'iccIssuerActionCodeDefault'.
   */
  public TransactionData setIccIssuerActionCodeDefault(java.lang.String iccIssuerActionCodeDefault) {
    logChange("iccIssuerActionCodeDefault");

    try {
      getJSONObject().put("iccIssuerActionCodeDefault", iccIssuerActionCodeDefault == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccIssuerActionCodeDefault));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccIssuerActionCodeDefault);
    return this;
  }

  /**
   * Sets the field 'iccIssuerActionCodeDenial'.
   */
  public TransactionData setIccIssuerActionCodeDenial(java.lang.String iccIssuerActionCodeDenial) {
    logChange("iccIssuerActionCodeDenial");

    try {
      getJSONObject().put("iccIssuerActionCodeDenial", iccIssuerActionCodeDenial == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccIssuerActionCodeDenial));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccIssuerActionCodeDenial);
    return this;
  }

  /**
   * Sets the field 'iccIssuerActionCodeOnline'.
   */
  public TransactionData setIccIssuerActionCodeOnline(java.lang.String iccIssuerActionCodeOnline) {
    logChange("iccIssuerActionCodeOnline");

    try {
      getJSONObject().put("iccIssuerActionCodeOnline", iccIssuerActionCodeOnline == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccIssuerActionCodeOnline));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccIssuerActionCodeOnline);
    return this;
  }

  /**
   * Sets the field 'iccApplicationLabel'.
   */
  public TransactionData setIccApplicationLabel(java.lang.String iccApplicationLabel) {
    logChange("iccApplicationLabel");

    try {
      getJSONObject().put("iccApplicationLabel", iccApplicationLabel == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccApplicationLabel));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccApplicationLabel);
    return this;
  }

  /**
   * Sets the field 'iccApplicationCryptogram'.
   */
  public TransactionData setIccApplicationCryptogram(java.lang.String iccApplicationCryptogram) {
    logChange("iccApplicationCryptogram");

    try {
      getJSONObject().put("iccApplicationCryptogram", iccApplicationCryptogram == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccApplicationCryptogram));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccApplicationCryptogram);
    return this;
  }

  /**
   * Sets the field 'iccApplicationIdentifierCard'.
   */
  public TransactionData setIccApplicationIdentifierCard(java.lang.String iccApplicationIdentifierCard) {
    logChange("iccApplicationIdentifierCard");

    try {
      getJSONObject().put("iccApplicationIdentifierCard", iccApplicationIdentifierCard == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccApplicationIdentifierCard));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccApplicationIdentifierCard);
    return this;
  }

  /**
   * Sets the field 'iccApplicationIdentifierTerminal'.
   */
  public TransactionData setIccApplicationIdentifierTerminal(java.lang.String iccApplicationIdentifierTerminal) {
    logChange("iccApplicationIdentifierTerminal");

    try {
      getJSONObject().put("iccApplicationIdentifierTerminal", iccApplicationIdentifierTerminal == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccApplicationIdentifierTerminal));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccApplicationIdentifierTerminal);
    return this;
  }

  /**
   * Sets the field 'iccApplicationTransactionCounter'.
   */
  public TransactionData setIccApplicationTransactionCounter(java.lang.String iccApplicationTransactionCounter) {
    logChange("iccApplicationTransactionCounter");

    try {
      getJSONObject().put("iccApplicationTransactionCounter", iccApplicationTransactionCounter == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccApplicationTransactionCounter));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccApplicationTransactionCounter);
    return this;
  }

  /**
   * Sets the field 'iccApplicationVersionNumber'.
   */
  public TransactionData setIccApplicationVersionNumber(java.lang.String iccApplicationVersionNumber) {
    logChange("iccApplicationVersionNumber");

    try {
      getJSONObject().put("iccApplicationVersionNumber", iccApplicationVersionNumber == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccApplicationVersionNumber));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccApplicationVersionNumber);
    return this;
  }

  /**
   * Sets the field 'iccCryptogramInformationData'.
   */
  public TransactionData setIccCryptogramInformationData(java.lang.String iccCryptogramInformationData) {
    logChange("iccCryptogramInformationData");

    try {
      getJSONObject().put("iccCryptogramInformationData", iccCryptogramInformationData == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccCryptogramInformationData));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccCryptogramInformationData);
    return this;
  }

  /**
   * Sets the field 'iccCvmResults'.
   */
  public TransactionData setIccCvmResults(java.lang.String iccCvmResults) {
    logChange("iccCvmResults");

    try {
      getJSONObject().put("iccCvmResults", iccCvmResults == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccCvmResults));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccCvmResults);
    return this;
  }

  /**
   * Sets the field 'iccInterfaceDeviceSerialNumber'.
   */
  public TransactionData setIccInterfaceDeviceSerialNumber(java.lang.String iccInterfaceDeviceSerialNumber) {
    logChange("iccInterfaceDeviceSerialNumber");

    try {
      getJSONObject().put("iccInterfaceDeviceSerialNumber", iccInterfaceDeviceSerialNumber == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccInterfaceDeviceSerialNumber));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccInterfaceDeviceSerialNumber);
    return this;
  }

  /**
   * Sets the field 'iccIssuerApplicationData'.
   */
  public TransactionData setIccIssuerApplicationData(java.lang.String iccIssuerApplicationData) {
    logChange("iccIssuerApplicationData");

    try {
      getJSONObject().put("iccIssuerApplicationData", iccIssuerApplicationData == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccIssuerApplicationData));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccIssuerApplicationData);
    return this;
  }

  /**
   * Sets the field 'iccPosEntryModeCode'.
   */
  public TransactionData setIccPosEntryModeCode(java.lang.String iccPosEntryModeCode) {
    logChange("iccPosEntryModeCode");

    try {
      getJSONObject().put("iccPosEntryModeCode", iccPosEntryModeCode == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccPosEntryModeCode));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccPosEntryModeCode);
    return this;
  }

  /**
   * Sets the field 'iccTerminalCapabilities'.
   */
  public TransactionData setIccTerminalCapabilities(java.lang.String iccTerminalCapabilities) {
    logChange("iccTerminalCapabilities");

    try {
      getJSONObject().put("iccTerminalCapabilities", iccTerminalCapabilities == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccTerminalCapabilities));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccTerminalCapabilities);
    return this;
  }

  /**
   * Sets the field 'iccTerminalCountryCode'.
   */
  public TransactionData setIccTerminalCountryCode(java.lang.String iccTerminalCountryCode) {
    logChange("iccTerminalCountryCode");

    try {
      getJSONObject().put("iccTerminalCountryCode", iccTerminalCountryCode == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccTerminalCountryCode));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccTerminalCountryCode);
    return this;
  }

  /**
   * Sets the field 'iccTerminalType'.
   */
  public TransactionData setIccTerminalType(java.lang.String iccTerminalType) {
    logChange("iccTerminalType");

    try {
      getJSONObject().put("iccTerminalType", iccTerminalType == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccTerminalType));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccTerminalType);
    return this;
  }

  /**
   * Sets the field 'iccTvr'.
   */
  public TransactionData setIccTvr(java.lang.String iccTvr) {
    logChange("iccTvr");

    try {
      getJSONObject().put("iccTvr", iccTvr == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccTvr));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccTvr);
    return this;
  }

  /**
   * Sets the field 'iccTransactionDate'.
   */
  public TransactionData setIccTransactionDate(java.lang.String iccTransactionDate) {
    logChange("iccTransactionDate");

    try {
      getJSONObject().put("iccTransactionDate", iccTransactionDate == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccTransactionDate));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccTransactionDate);
    return this;
  }

  /**
   * Sets the field 'iccTsi'.
   */
  public TransactionData setIccTsi(java.lang.String iccTsi) {
    logChange("iccTsi");

    try {
      getJSONObject().put("iccTsi", iccTsi == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccTsi));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccTsi);
    return this;
  }

  /**
   * Sets the field 'iccTransactionType'.
   */
  public TransactionData setIccTransactionType(java.lang.String iccTransactionType) {
    logChange("iccTransactionType");

    try {
      getJSONObject().put("iccTransactionType", iccTransactionType == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccTransactionType));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccTransactionType);
    return this;
  }

  /**
   * Sets the field 'iccUnpredictableNumber'.
   */
  public TransactionData setIccUnpredictableNumber(java.lang.String iccUnpredictableNumber) {
    logChange("iccUnpredictableNumber");

    try {
      getJSONObject().put("iccUnpredictableNumber", iccUnpredictableNumber == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccUnpredictableNumber));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccUnpredictableNumber);
    return this;
  }

  /**
   * Sets the field 'iccTransactionTime'.
   */
  public TransactionData setIccTransactionTime(java.lang.String iccTransactionTime) {
    logChange("iccTransactionTime");

    try {
      getJSONObject().put("iccTransactionTime", iccTransactionTime == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccTransactionTime));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccTransactionTime);
    return this;
  }

  /**
   * Sets the field 'iccAdditionalTerminalCapabilities'.
   */
  public TransactionData setIccAdditionalTerminalCapabilities(java.lang.String iccAdditionalTerminalCapabilities) {
    logChange("iccAdditionalTerminalCapabilities");

    try {
      getJSONObject().put("iccAdditionalTerminalCapabilities", iccAdditionalTerminalCapabilities == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccAdditionalTerminalCapabilities));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccAdditionalTerminalCapabilities);
    return this;
  }

  /**
   * Sets the field 'iccTransactionCategoryCode'.
   */
  public TransactionData setIccTransactionCategoryCode(java.lang.String iccTransactionCategoryCode) {
    logChange("iccTransactionCategoryCode");

    try {
      getJSONObject().put("iccTransactionCategoryCode", iccTransactionCategoryCode == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccTransactionCategoryCode));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccTransactionCategoryCode);
    return this;
  }

  /**
   * Sets the field 'iccIssuerApplicationPreferredName'.
   */
  public TransactionData setIccIssuerApplicationPreferredName(java.lang.String iccIssuerApplicationPreferredName) {
    logChange("iccIssuerApplicationPreferredName");

    try {
      getJSONObject().put("iccIssuerApplicationPreferredName", iccIssuerApplicationPreferredName == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccIssuerApplicationPreferredName));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccIssuerApplicationPreferredName);
    return this;
  }

  /**
   * Sets the field 'iccCardholderName'.
   */
  public TransactionData setIccCardholderName(java.lang.String iccCardholderName) {
    logChange("iccCardholderName");

    try {
      getJSONObject().put("iccCardholderName", iccCardholderName == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccCardholderName));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccCardholderName);
    return this;
  }

  /**
   * Sets the field 'iccIssuerCodeTableIndex'.
   */
  public TransactionData setIccIssuerCodeTableIndex(java.lang.String iccIssuerCodeTableIndex) {
    logChange("iccIssuerCodeTableIndex");

    try {
      getJSONObject().put("iccIssuerCodeTableIndex", iccIssuerCodeTableIndex == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(iccIssuerCodeTableIndex));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.iccIssuerCodeTableIndex);
    return this;
  }

  /**
   * Sets the field 'pinBlockContainer'.
   */
  public TransactionData setPinBlockContainer(java.lang.String pinBlockContainer) {
    logChange("pinBlockContainer");

    try {
      getJSONObject().put("pinBlockContainer", pinBlockContainer == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(pinBlockContainer));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.pinBlockContainer);
    return this;
  }

  /**
   * Sets the field 'pinBlock'.
   */
  public TransactionData setPinBlock(java.lang.String pinBlock) {
    logChange("pinBlock");

    try {
      getJSONObject().put("pinBlock", pinBlock == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(pinBlock));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.pinBlock);
    return this;
  }

  /**
   * Sets the field 'pinBlockKsn'.
   */
  public TransactionData setPinBlockKsn(java.lang.String pinBlockKsn) {
    logChange("pinBlockKsn");

    try {
      getJSONObject().put("pinBlockKsn", pinBlockKsn == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(pinBlockKsn));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.pinBlockKsn);
    return this;
  }

  /**
   * Sets the field 'gwContainer'.
   */
  public TransactionData setGwContainer(java.lang.String gwContainer) {
    logChange("gwContainer");

    try {
      getJSONObject().put("gwContainer", gwContainer == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(gwContainer));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.gwContainer);
    return this;
  }

  /**
   * Sets the field 'gwIssuerAuthenticationData'.
   */
  public TransactionData setGwIssuerAuthenticationData(java.lang.String gwIssuerAuthenticationData) {
    logChange("gwIssuerAuthenticationData");

    try {
      getJSONObject().put("gwIssuerAuthenticationData", gwIssuerAuthenticationData == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(gwIssuerAuthenticationData));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.gwIssuerAuthenticationData);
    return this;
  }

  /**
   * Sets the field 'gwIssuerScriptTemplate1'.
   */
  public TransactionData setGwIssuerScriptTemplate1(java.lang.String gwIssuerScriptTemplate1) {
    logChange("gwIssuerScriptTemplate1");

    try {
      getJSONObject().put("gwIssuerScriptTemplate1", gwIssuerScriptTemplate1 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(gwIssuerScriptTemplate1));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.gwIssuerScriptTemplate1);
    return this;
  }

  /**
   * Sets the field 'gwIssuerScriptTemplate2'.
   */
  public TransactionData setGwIssuerScriptTemplate2(java.lang.String gwIssuerScriptTemplate2) {
    logChange("gwIssuerScriptTemplate2");

    try {
      getJSONObject().put("gwIssuerScriptTemplate2", gwIssuerScriptTemplate2 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(gwIssuerScriptTemplate2));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.gwIssuerScriptTemplate2);
    return this;
  }

  /**
   * Sets the field 'gwIssuerAuthorizationResponseCode'.
   */
  public TransactionData setGwIssuerAuthorizationResponseCode(java.lang.String gwIssuerAuthorizationResponseCode) {
    logChange("gwIssuerAuthorizationResponseCode");

    try {
      getJSONObject().put("gwIssuerAuthorizationResponseCode", gwIssuerAuthorizationResponseCode == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(gwIssuerAuthorizationResponseCode));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.gwIssuerAuthorizationResponseCode);
    return this;
  }

  /**
   * Sets the field 'gwMessageControlField'.
   */
  public TransactionData setGwMessageControlField(java.lang.String gwMessageControlField) {
    logChange("gwMessageControlField");

    try {
      getJSONObject().put("gwMessageControlField", gwMessageControlField == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(gwMessageControlField));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.gwMessageControlField);
    return this;
  }

  /**
   * Sets the field 'gwTxResult'.
   */
  public TransactionData setGwTxResult(com.clover.sdk.v3.pay.GwTxResult gwTxResult) {
    logChange("gwTxResult");

    try {
      getJSONObject().put("gwTxResult", gwTxResult == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(gwTxResult));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.gwTxResult);
    return this;
  }

  /**
   * Sets the field 'cvmResult'.
   */
  public TransactionData setCvmResult(com.clover.sdk.v3.payments.CvmResult cvmResult) {
    logChange("cvmResult");

    try {
      getJSONObject().put("cvmResult", cvmResult == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(cvmResult));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.cvmResult);
    return this;
  }

  /**
   * Sets the field 'serviceCode1'.
   */
  public TransactionData setServiceCode1(com.clover.sdk.v3.pay.ServiceCode1 serviceCode1) {
    logChange("serviceCode1");

    try {
      getJSONObject().put("serviceCode1", serviceCode1 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(serviceCode1));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.serviceCode1);
    return this;
  }

  /**
   * Sets the field 'serviceCode2'.
   */
  public TransactionData setServiceCode2(com.clover.sdk.v3.pay.ServiceCode2 serviceCode2) {
    logChange("serviceCode2");

    try {
      getJSONObject().put("serviceCode2", serviceCode2 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(serviceCode2));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.serviceCode2);
    return this;
  }

  /**
   * Sets the field 'serviceCode3'.
   */
  public TransactionData setServiceCode3(com.clover.sdk.v3.pay.ServiceCode3 serviceCode3) {
    logChange("serviceCode3");

    try {
      getJSONObject().put("serviceCode3", serviceCode3 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(serviceCode3));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.serviceCode3);
    return this;
  }


  /** Clears the 'txResult' field, the 'has' method for this field will now return false */
  public void clearTxResult() {
    unlogChange("txResult");
    getJSONObject().remove("txResult");
    cacheRemoveValue(CacheKey.txResult);
  }

  /** Clears the 'txError' field, the 'has' method for this field will now return false */
  public void clearTxError() {
    unlogChange("txError");
    getJSONObject().remove("txError");
    cacheRemoveValue(CacheKey.txError);
  }

  /** Clears the 'amount' field, the 'has' method for this field will now return false */
  public void clearAmount() {
    unlogChange("amount");
    getJSONObject().remove("amount");
    cacheRemoveValue(CacheKey.amount);
  }

  /** Clears the 'tipAmount' field, the 'has' method for this field will now return false */
  public void clearTipAmount() {
    unlogChange("tipAmount");
    getJSONObject().remove("tipAmount");
    cacheRemoveValue(CacheKey.tipAmount);
  }

  /** Clears the 'cashBackAmount' field, the 'has' method for this field will now return false */
  public void clearCashBackAmount() {
    unlogChange("cashBackAmount");
    getJSONObject().remove("cashBackAmount");
    cacheRemoveValue(CacheKey.cashBackAmount);
  }

  /** Clears the 'availableOfflineSpendingAmount' field, the 'has' method for this field will now return false */
  public void clearAvailableOfflineSpendingAmount() {
    unlogChange("availableOfflineSpendingAmount");
    getJSONObject().remove("availableOfflineSpendingAmount");
    cacheRemoveValue(CacheKey.availableOfflineSpendingAmount);
  }

  /** Clears the 'errorCode' field, the 'has' method for this field will now return false */
  public void clearErrorCode() {
    unlogChange("errorCode");
    getJSONObject().remove("errorCode");
    cacheRemoveValue(CacheKey.errorCode);
  }

  /** Clears the 'errorText' field, the 'has' method for this field will now return false */
  public void clearErrorText() {
    unlogChange("errorText");
    getJSONObject().remove("errorText");
    cacheRemoveValue(CacheKey.errorText);
  }

  /** Clears the 'transactionDate' field, the 'has' method for this field will now return false */
  public void clearTransactionDate() {
    unlogChange("transactionDate");
    getJSONObject().remove("transactionDate");
    cacheRemoveValue(CacheKey.transactionDate);
  }

  /** Clears the 'transactionTime' field, the 'has' method for this field will now return false */
  public void clearTransactionTime() {
    unlogChange("transactionTime");
    getJSONObject().remove("transactionTime");
    cacheRemoveValue(CacheKey.transactionTime);
  }

  /** Clears the 'msrContainer' field, the 'has' method for this field will now return false */
  public void clearMsrContainer() {
    unlogChange("msrContainer");
    getJSONObject().remove("msrContainer");
    cacheRemoveValue(CacheKey.msrContainer);
  }

  /** Clears the 'msrMaskedTrack1' field, the 'has' method for this field will now return false */
  public void clearMsrMaskedTrack1() {
    unlogChange("msrMaskedTrack1");
    getJSONObject().remove("msrMaskedTrack1");
    cacheRemoveValue(CacheKey.msrMaskedTrack1);
  }

  /** Clears the 'msrMaskedTrack2' field, the 'has' method for this field will now return false */
  public void clearMsrMaskedTrack2() {
    unlogChange("msrMaskedTrack2");
    getJSONObject().remove("msrMaskedTrack2");
    cacheRemoveValue(CacheKey.msrMaskedTrack2);
  }

  /** Clears the 'maskedManualPan' field, the 'has' method for this field will now return false */
  public void clearMaskedManualPan() {
    unlogChange("maskedManualPan");
    getJSONObject().remove("maskedManualPan");
    cacheRemoveValue(CacheKey.maskedManualPan);
  }

  /** Clears the 'sredContainer' field, the 'has' method for this field will now return false */
  public void clearSredContainer() {
    unlogChange("sredContainer");
    getJSONObject().remove("sredContainer");
    cacheRemoveValue(CacheKey.sredContainer);
  }

  /** Clears the 'sred' field, the 'has' method for this field will now return false */
  public void clearSred() {
    unlogChange("sred");
    getJSONObject().remove("sred");
    cacheRemoveValue(CacheKey.sred);
  }

  /** Clears the 'ksn' field, the 'has' method for this field will now return false */
  public void clearKsn() {
    unlogChange("ksn");
    getJSONObject().remove("ksn");
    cacheRemoveValue(CacheKey.ksn);
  }

  /** Clears the 'transArmorContainer' field, the 'has' method for this field will now return false */
  public void clearTransArmorContainer() {
    unlogChange("transArmorContainer");
    getJSONObject().remove("transArmorContainer");
    cacheRemoveValue(CacheKey.transArmorContainer);
  }

  /** Clears the 'transArmorKey' field, the 'has' method for this field will now return false */
  public void clearTransArmorKey() {
    unlogChange("transArmorKey");
    getJSONObject().remove("transArmorKey");
    cacheRemoveValue(CacheKey.transArmorKey);
  }

  /** Clears the 'transArmorKeyId' field, the 'has' method for this field will now return false */
  public void clearTransArmorKeyId() {
    unlogChange("transArmorKeyId");
    getJSONObject().remove("transArmorKeyId");
    cacheRemoveValue(CacheKey.transArmorKeyId);
  }

  /** Clears the 'transArmorEncryptedTrack1' field, the 'has' method for this field will now return false */
  public void clearTransArmorEncryptedTrack1() {
    unlogChange("transArmorEncryptedTrack1");
    getJSONObject().remove("transArmorEncryptedTrack1");
    cacheRemoveValue(CacheKey.transArmorEncryptedTrack1);
  }

  /** Clears the 'transArmorEncryptedTrack2' field, the 'has' method for this field will now return false */
  public void clearTransArmorEncryptedTrack2() {
    unlogChange("transArmorEncryptedTrack2");
    getJSONObject().remove("transArmorEncryptedTrack2");
    cacheRemoveValue(CacheKey.transArmorEncryptedTrack2);
  }

  /** Clears the 'iccContainer' field, the 'has' method for this field will now return false */
  public void clearIccContainer() {
    unlogChange("iccContainer");
    getJSONObject().remove("iccContainer");
    cacheRemoveValue(CacheKey.iccContainer);
  }

  /** Clears the 'iccApplicationInterchangeProfile' field, the 'has' method for this field will now return false */
  public void clearIccApplicationInterchangeProfile() {
    unlogChange("iccApplicationInterchangeProfile");
    getJSONObject().remove("iccApplicationInterchangeProfile");
    cacheRemoveValue(CacheKey.iccApplicationInterchangeProfile);
  }

  /** Clears the 'iccMaskedEmv57' field, the 'has' method for this field will now return false */
  public void clearIccMaskedEmv57() {
    unlogChange("iccMaskedEmv57");
    getJSONObject().remove("iccMaskedEmv57");
    cacheRemoveValue(CacheKey.iccMaskedEmv57);
  }

  /** Clears the 'iccMaskedEmv5A' field, the 'has' method for this field will now return false */
  public void clearIccMaskedEmv5A() {
    unlogChange("iccMaskedEmv5A");
    getJSONObject().remove("iccMaskedEmv5A");
    cacheRemoveValue(CacheKey.iccMaskedEmv5A);
  }

  /** Clears the 'iccApplicationPanSequenceNumber' field, the 'has' method for this field will now return false */
  public void clearIccApplicationPanSequenceNumber() {
    unlogChange("iccApplicationPanSequenceNumber");
    getJSONObject().remove("iccApplicationPanSequenceNumber");
    cacheRemoveValue(CacheKey.iccApplicationPanSequenceNumber);
  }

  /** Clears the 'iccAmountAuthorized' field, the 'has' method for this field will now return false */
  public void clearIccAmountAuthorized() {
    unlogChange("iccAmountAuthorized");
    getJSONObject().remove("iccAmountAuthorized");
    cacheRemoveValue(CacheKey.iccAmountAuthorized);
  }

  /** Clears the 'iccTransactionCurrencyCode' field, the 'has' method for this field will now return false */
  public void clearIccTransactionCurrencyCode() {
    unlogChange("iccTransactionCurrencyCode");
    getJSONObject().remove("iccTransactionCurrencyCode");
    cacheRemoveValue(CacheKey.iccTransactionCurrencyCode);
  }

  /** Clears the 'iccTransactionCurrencyExponent' field, the 'has' method for this field will now return false */
  public void clearIccTransactionCurrencyExponent() {
    unlogChange("iccTransactionCurrencyExponent");
    getJSONObject().remove("iccTransactionCurrencyExponent");
    cacheRemoveValue(CacheKey.iccTransactionCurrencyExponent);
  }

  /** Clears the 'iccApplicationUsageControl' field, the 'has' method for this field will now return false */
  public void clearIccApplicationUsageControl() {
    unlogChange("iccApplicationUsageControl");
    getJSONObject().remove("iccApplicationUsageControl");
    cacheRemoveValue(CacheKey.iccApplicationUsageControl);
  }

  /** Clears the 'iccIssuerActionCodeDefault' field, the 'has' method for this field will now return false */
  public void clearIccIssuerActionCodeDefault() {
    unlogChange("iccIssuerActionCodeDefault");
    getJSONObject().remove("iccIssuerActionCodeDefault");
    cacheRemoveValue(CacheKey.iccIssuerActionCodeDefault);
  }

  /** Clears the 'iccIssuerActionCodeDenial' field, the 'has' method for this field will now return false */
  public void clearIccIssuerActionCodeDenial() {
    unlogChange("iccIssuerActionCodeDenial");
    getJSONObject().remove("iccIssuerActionCodeDenial");
    cacheRemoveValue(CacheKey.iccIssuerActionCodeDenial);
  }

  /** Clears the 'iccIssuerActionCodeOnline' field, the 'has' method for this field will now return false */
  public void clearIccIssuerActionCodeOnline() {
    unlogChange("iccIssuerActionCodeOnline");
    getJSONObject().remove("iccIssuerActionCodeOnline");
    cacheRemoveValue(CacheKey.iccIssuerActionCodeOnline);
  }

  /** Clears the 'iccApplicationLabel' field, the 'has' method for this field will now return false */
  public void clearIccApplicationLabel() {
    unlogChange("iccApplicationLabel");
    getJSONObject().remove("iccApplicationLabel");
    cacheRemoveValue(CacheKey.iccApplicationLabel);
  }

  /** Clears the 'iccApplicationCryptogram' field, the 'has' method for this field will now return false */
  public void clearIccApplicationCryptogram() {
    unlogChange("iccApplicationCryptogram");
    getJSONObject().remove("iccApplicationCryptogram");
    cacheRemoveValue(CacheKey.iccApplicationCryptogram);
  }

  /** Clears the 'iccApplicationIdentifierCard' field, the 'has' method for this field will now return false */
  public void clearIccApplicationIdentifierCard() {
    unlogChange("iccApplicationIdentifierCard");
    getJSONObject().remove("iccApplicationIdentifierCard");
    cacheRemoveValue(CacheKey.iccApplicationIdentifierCard);
  }

  /** Clears the 'iccApplicationIdentifierTerminal' field, the 'has' method for this field will now return false */
  public void clearIccApplicationIdentifierTerminal() {
    unlogChange("iccApplicationIdentifierTerminal");
    getJSONObject().remove("iccApplicationIdentifierTerminal");
    cacheRemoveValue(CacheKey.iccApplicationIdentifierTerminal);
  }

  /** Clears the 'iccApplicationTransactionCounter' field, the 'has' method for this field will now return false */
  public void clearIccApplicationTransactionCounter() {
    unlogChange("iccApplicationTransactionCounter");
    getJSONObject().remove("iccApplicationTransactionCounter");
    cacheRemoveValue(CacheKey.iccApplicationTransactionCounter);
  }

  /** Clears the 'iccApplicationVersionNumber' field, the 'has' method for this field will now return false */
  public void clearIccApplicationVersionNumber() {
    unlogChange("iccApplicationVersionNumber");
    getJSONObject().remove("iccApplicationVersionNumber");
    cacheRemoveValue(CacheKey.iccApplicationVersionNumber);
  }

  /** Clears the 'iccCryptogramInformationData' field, the 'has' method for this field will now return false */
  public void clearIccCryptogramInformationData() {
    unlogChange("iccCryptogramInformationData");
    getJSONObject().remove("iccCryptogramInformationData");
    cacheRemoveValue(CacheKey.iccCryptogramInformationData);
  }

  /** Clears the 'iccCvmResults' field, the 'has' method for this field will now return false */
  public void clearIccCvmResults() {
    unlogChange("iccCvmResults");
    getJSONObject().remove("iccCvmResults");
    cacheRemoveValue(CacheKey.iccCvmResults);
  }

  /** Clears the 'iccInterfaceDeviceSerialNumber' field, the 'has' method for this field will now return false */
  public void clearIccInterfaceDeviceSerialNumber() {
    unlogChange("iccInterfaceDeviceSerialNumber");
    getJSONObject().remove("iccInterfaceDeviceSerialNumber");
    cacheRemoveValue(CacheKey.iccInterfaceDeviceSerialNumber);
  }

  /** Clears the 'iccIssuerApplicationData' field, the 'has' method for this field will now return false */
  public void clearIccIssuerApplicationData() {
    unlogChange("iccIssuerApplicationData");
    getJSONObject().remove("iccIssuerApplicationData");
    cacheRemoveValue(CacheKey.iccIssuerApplicationData);
  }

  /** Clears the 'iccPosEntryModeCode' field, the 'has' method for this field will now return false */
  public void clearIccPosEntryModeCode() {
    unlogChange("iccPosEntryModeCode");
    getJSONObject().remove("iccPosEntryModeCode");
    cacheRemoveValue(CacheKey.iccPosEntryModeCode);
  }

  /** Clears the 'iccTerminalCapabilities' field, the 'has' method for this field will now return false */
  public void clearIccTerminalCapabilities() {
    unlogChange("iccTerminalCapabilities");
    getJSONObject().remove("iccTerminalCapabilities");
    cacheRemoveValue(CacheKey.iccTerminalCapabilities);
  }

  /** Clears the 'iccTerminalCountryCode' field, the 'has' method for this field will now return false */
  public void clearIccTerminalCountryCode() {
    unlogChange("iccTerminalCountryCode");
    getJSONObject().remove("iccTerminalCountryCode");
    cacheRemoveValue(CacheKey.iccTerminalCountryCode);
  }

  /** Clears the 'iccTerminalType' field, the 'has' method for this field will now return false */
  public void clearIccTerminalType() {
    unlogChange("iccTerminalType");
    getJSONObject().remove("iccTerminalType");
    cacheRemoveValue(CacheKey.iccTerminalType);
  }

  /** Clears the 'iccTvr' field, the 'has' method for this field will now return false */
  public void clearIccTvr() {
    unlogChange("iccTvr");
    getJSONObject().remove("iccTvr");
    cacheRemoveValue(CacheKey.iccTvr);
  }

  /** Clears the 'iccTransactionDate' field, the 'has' method for this field will now return false */
  public void clearIccTransactionDate() {
    unlogChange("iccTransactionDate");
    getJSONObject().remove("iccTransactionDate");
    cacheRemoveValue(CacheKey.iccTransactionDate);
  }

  /** Clears the 'iccTsi' field, the 'has' method for this field will now return false */
  public void clearIccTsi() {
    unlogChange("iccTsi");
    getJSONObject().remove("iccTsi");
    cacheRemoveValue(CacheKey.iccTsi);
  }

  /** Clears the 'iccTransactionType' field, the 'has' method for this field will now return false */
  public void clearIccTransactionType() {
    unlogChange("iccTransactionType");
    getJSONObject().remove("iccTransactionType");
    cacheRemoveValue(CacheKey.iccTransactionType);
  }

  /** Clears the 'iccUnpredictableNumber' field, the 'has' method for this field will now return false */
  public void clearIccUnpredictableNumber() {
    unlogChange("iccUnpredictableNumber");
    getJSONObject().remove("iccUnpredictableNumber");
    cacheRemoveValue(CacheKey.iccUnpredictableNumber);
  }

  /** Clears the 'iccTransactionTime' field, the 'has' method for this field will now return false */
  public void clearIccTransactionTime() {
    unlogChange("iccTransactionTime");
    getJSONObject().remove("iccTransactionTime");
    cacheRemoveValue(CacheKey.iccTransactionTime);
  }

  /** Clears the 'iccAdditionalTerminalCapabilities' field, the 'has' method for this field will now return false */
  public void clearIccAdditionalTerminalCapabilities() {
    unlogChange("iccAdditionalTerminalCapabilities");
    getJSONObject().remove("iccAdditionalTerminalCapabilities");
    cacheRemoveValue(CacheKey.iccAdditionalTerminalCapabilities);
  }

  /** Clears the 'iccTransactionCategoryCode' field, the 'has' method for this field will now return false */
  public void clearIccTransactionCategoryCode() {
    unlogChange("iccTransactionCategoryCode");
    getJSONObject().remove("iccTransactionCategoryCode");
    cacheRemoveValue(CacheKey.iccTransactionCategoryCode);
  }

  /** Clears the 'iccIssuerApplicationPreferredName' field, the 'has' method for this field will now return false */
  public void clearIccIssuerApplicationPreferredName() {
    unlogChange("iccIssuerApplicationPreferredName");
    getJSONObject().remove("iccIssuerApplicationPreferredName");
    cacheRemoveValue(CacheKey.iccIssuerApplicationPreferredName);
  }

  /** Clears the 'iccCardholderName' field, the 'has' method for this field will now return false */
  public void clearIccCardholderName() {
    unlogChange("iccCardholderName");
    getJSONObject().remove("iccCardholderName");
    cacheRemoveValue(CacheKey.iccCardholderName);
  }

  /** Clears the 'iccIssuerCodeTableIndex' field, the 'has' method for this field will now return false */
  public void clearIccIssuerCodeTableIndex() {
    unlogChange("iccIssuerCodeTableIndex");
    getJSONObject().remove("iccIssuerCodeTableIndex");
    cacheRemoveValue(CacheKey.iccIssuerCodeTableIndex);
  }

  /** Clears the 'pinBlockContainer' field, the 'has' method for this field will now return false */
  public void clearPinBlockContainer() {
    unlogChange("pinBlockContainer");
    getJSONObject().remove("pinBlockContainer");
    cacheRemoveValue(CacheKey.pinBlockContainer);
  }

  /** Clears the 'pinBlock' field, the 'has' method for this field will now return false */
  public void clearPinBlock() {
    unlogChange("pinBlock");
    getJSONObject().remove("pinBlock");
    cacheRemoveValue(CacheKey.pinBlock);
  }

  /** Clears the 'pinBlockKsn' field, the 'has' method for this field will now return false */
  public void clearPinBlockKsn() {
    unlogChange("pinBlockKsn");
    getJSONObject().remove("pinBlockKsn");
    cacheRemoveValue(CacheKey.pinBlockKsn);
  }

  /** Clears the 'gwContainer' field, the 'has' method for this field will now return false */
  public void clearGwContainer() {
    unlogChange("gwContainer");
    getJSONObject().remove("gwContainer");
    cacheRemoveValue(CacheKey.gwContainer);
  }

  /** Clears the 'gwIssuerAuthenticationData' field, the 'has' method for this field will now return false */
  public void clearGwIssuerAuthenticationData() {
    unlogChange("gwIssuerAuthenticationData");
    getJSONObject().remove("gwIssuerAuthenticationData");
    cacheRemoveValue(CacheKey.gwIssuerAuthenticationData);
  }

  /** Clears the 'gwIssuerScriptTemplate1' field, the 'has' method for this field will now return false */
  public void clearGwIssuerScriptTemplate1() {
    unlogChange("gwIssuerScriptTemplate1");
    getJSONObject().remove("gwIssuerScriptTemplate1");
    cacheRemoveValue(CacheKey.gwIssuerScriptTemplate1);
  }

  /** Clears the 'gwIssuerScriptTemplate2' field, the 'has' method for this field will now return false */
  public void clearGwIssuerScriptTemplate2() {
    unlogChange("gwIssuerScriptTemplate2");
    getJSONObject().remove("gwIssuerScriptTemplate2");
    cacheRemoveValue(CacheKey.gwIssuerScriptTemplate2);
  }

  /** Clears the 'gwIssuerAuthorizationResponseCode' field, the 'has' method for this field will now return false */
  public void clearGwIssuerAuthorizationResponseCode() {
    unlogChange("gwIssuerAuthorizationResponseCode");
    getJSONObject().remove("gwIssuerAuthorizationResponseCode");
    cacheRemoveValue(CacheKey.gwIssuerAuthorizationResponseCode);
  }

  /** Clears the 'gwMessageControlField' field, the 'has' method for this field will now return false */
  public void clearGwMessageControlField() {
    unlogChange("gwMessageControlField");
    getJSONObject().remove("gwMessageControlField");
    cacheRemoveValue(CacheKey.gwMessageControlField);
  }

  /** Clears the 'gwTxResult' field, the 'has' method for this field will now return false */
  public void clearGwTxResult() {
    unlogChange("gwTxResult");
    getJSONObject().remove("gwTxResult");
    cacheRemoveValue(CacheKey.gwTxResult);
  }

  /** Clears the 'cvmResult' field, the 'has' method for this field will now return false */
  public void clearCvmResult() {
    unlogChange("cvmResult");
    getJSONObject().remove("cvmResult");
    cacheRemoveValue(CacheKey.cvmResult);
  }

  /** Clears the 'serviceCode1' field, the 'has' method for this field will now return false */
  public void clearServiceCode1() {
    unlogChange("serviceCode1");
    getJSONObject().remove("serviceCode1");
    cacheRemoveValue(CacheKey.serviceCode1);
  }

  /** Clears the 'serviceCode2' field, the 'has' method for this field will now return false */
  public void clearServiceCode2() {
    unlogChange("serviceCode2");
    getJSONObject().remove("serviceCode2");
    cacheRemoveValue(CacheKey.serviceCode2);
  }

  /** Clears the 'serviceCode3' field, the 'has' method for this field will now return false */
  public void clearServiceCode3() {
    unlogChange("serviceCode3");
    getJSONObject().remove("serviceCode3");
    cacheRemoveValue(CacheKey.serviceCode3);
  }


  private void logChange(java.lang.String field) {
    if (changeLog == null) {
      changeLog = new android.os.Bundle();
    }
    changeLog.putString(field, null);
  }

  private void unlogChange(java.lang.String field) {
    if (changeLog != null) {
      changeLog.remove(field);
    }
  }

  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return changeLog != null;
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    changeLog = null;
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public TransactionData copyChanges() {
    TransactionData copy = new TransactionData();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(TransactionData src) {
    if (src.changeLog != null) {
      try {
        // Make a copy of the source so the destination fields are copies
        org.json.JSONObject srcObj = new TransactionData(src).getJSONObject();
        org.json.JSONObject dstObj = getJSONObject();
        for (java.lang.String field : src.changeLog.keySet()) {
          dstObj.put(field, srcObj.get(field));
          logChange(field);
        }
      } catch (org.json.JSONException e) {
        throw new java.lang.IllegalArgumentException(e);
      }
    }
  }


  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    if (bundle == null) {
      bundle = new android.os.Bundle();
    }
    return bundle;
  }

  @Override
  public String toString() {
    String json = getJSONObject().toString();

    if (bundle != null) {
      bundle.isEmpty(); // Triggers unparcel
    }

    if (changeLog != null) {
      changeLog.isEmpty(); // Triggers unparcel
    }

    return "TransactionData{" +
        "json='" + json + "'" +
        ", bundle=" + bundle +
        ", changeLog=" + changeLog +
        '}';
  }

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
	  com.clover.sdk.v3.JsonParcelHelper.wrap(getJSONObject()).writeToParcel(dest, 0);
    dest.writeBundle(bundle);
    dest.writeBundle(changeLog);
  }

  public static final android.os.Parcelable.Creator<TransactionData> CREATOR = new android.os.Parcelable.Creator<TransactionData>() {
    @Override
    public TransactionData createFromParcel(android.os.Parcel in) {
      TransactionData instance = new TransactionData(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.bundle = in.readBundle(getClass().getClassLoader());
      instance.changeLog = in.readBundle();
      return instance;
    }

    @Override
    public TransactionData[] newArray(int size) {
      return new TransactionData[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<TransactionData> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<TransactionData>() {
    @Override
    public TransactionData create(org.json.JSONObject jsonObject) {
      return new TransactionData(jsonObject);
    }
  };


  public interface Constraints {

    public static final boolean TXRESULT_IS_REQUIRED = false;

    public static final boolean TXERROR_IS_REQUIRED = false;

    public static final boolean AMOUNT_IS_REQUIRED = false;

    public static final boolean TIPAMOUNT_IS_REQUIRED = false;

    public static final boolean CASHBACKAMOUNT_IS_REQUIRED = false;

    public static final boolean AVAILABLEOFFLINESPENDINGAMOUNT_IS_REQUIRED = false;

    public static final boolean ERRORCODE_IS_REQUIRED = false;

    public static final boolean ERRORTEXT_IS_REQUIRED = false;

    public static final boolean TRANSACTIONDATE_IS_REQUIRED = false;

    public static final boolean TRANSACTIONTIME_IS_REQUIRED = false;

    public static final boolean MSRCONTAINER_IS_REQUIRED = false;

    public static final boolean MSRMASKEDTRACK1_IS_REQUIRED = false;

    public static final boolean MSRMASKEDTRACK2_IS_REQUIRED = false;

    public static final boolean MASKEDMANUALPAN_IS_REQUIRED = false;

    public static final boolean SREDCONTAINER_IS_REQUIRED = false;

    public static final boolean SRED_IS_REQUIRED = false;

    public static final boolean KSN_IS_REQUIRED = false;

    public static final boolean TRANSARMORCONTAINER_IS_REQUIRED = false;

    public static final boolean TRANSARMORKEY_IS_REQUIRED = false;

    public static final boolean TRANSARMORKEYID_IS_REQUIRED = false;

    public static final boolean TRANSARMORENCRYPTEDTRACK1_IS_REQUIRED = false;

    public static final boolean TRANSARMORENCRYPTEDTRACK2_IS_REQUIRED = false;

    public static final boolean ICCCONTAINER_IS_REQUIRED = false;

    public static final boolean ICCAPPLICATIONINTERCHANGEPROFILE_IS_REQUIRED = false;

    public static final boolean ICCMASKEDEMV57_IS_REQUIRED = false;

    public static final boolean ICCMASKEDEMV5A_IS_REQUIRED = false;

    public static final boolean ICCAPPLICATIONPANSEQUENCENUMBER_IS_REQUIRED = false;

    public static final boolean ICCAMOUNTAUTHORIZED_IS_REQUIRED = false;

    public static final boolean ICCTRANSACTIONCURRENCYCODE_IS_REQUIRED = false;

    public static final boolean ICCTRANSACTIONCURRENCYEXPONENT_IS_REQUIRED = false;

    public static final boolean ICCAPPLICATIONUSAGECONTROL_IS_REQUIRED = false;

    public static final boolean ICCISSUERACTIONCODEDEFAULT_IS_REQUIRED = false;

    public static final boolean ICCISSUERACTIONCODEDENIAL_IS_REQUIRED = false;

    public static final boolean ICCISSUERACTIONCODEONLINE_IS_REQUIRED = false;

    public static final boolean ICCAPPLICATIONLABEL_IS_REQUIRED = false;

    public static final boolean ICCAPPLICATIONCRYPTOGRAM_IS_REQUIRED = false;

    public static final boolean ICCAPPLICATIONIDENTIFIERCARD_IS_REQUIRED = false;

    public static final boolean ICCAPPLICATIONIDENTIFIERTERMINAL_IS_REQUIRED = false;

    public static final boolean ICCAPPLICATIONTRANSACTIONCOUNTER_IS_REQUIRED = false;

    public static final boolean ICCAPPLICATIONVERSIONNUMBER_IS_REQUIRED = false;

    public static final boolean ICCCRYPTOGRAMINFORMATIONDATA_IS_REQUIRED = false;

    public static final boolean ICCCVMRESULTS_IS_REQUIRED = false;

    public static final boolean ICCINTERFACEDEVICESERIALNUMBER_IS_REQUIRED = false;

    public static final boolean ICCISSUERAPPLICATIONDATA_IS_REQUIRED = false;

    public static final boolean ICCPOSENTRYMODECODE_IS_REQUIRED = false;

    public static final boolean ICCTERMINALCAPABILITIES_IS_REQUIRED = false;

    public static final boolean ICCTERMINALCOUNTRYCODE_IS_REQUIRED = false;

    public static final boolean ICCTERMINALTYPE_IS_REQUIRED = false;

    public static final boolean ICCTVR_IS_REQUIRED = false;

    public static final boolean ICCTRANSACTIONDATE_IS_REQUIRED = false;

    public static final boolean ICCTSI_IS_REQUIRED = false;

    public static final boolean ICCTRANSACTIONTYPE_IS_REQUIRED = false;

    public static final boolean ICCUNPREDICTABLENUMBER_IS_REQUIRED = false;

    public static final boolean ICCTRANSACTIONTIME_IS_REQUIRED = false;

    public static final boolean ICCADDITIONALTERMINALCAPABILITIES_IS_REQUIRED = false;

    public static final boolean ICCTRANSACTIONCATEGORYCODE_IS_REQUIRED = false;

    public static final boolean ICCISSUERAPPLICATIONPREFERREDNAME_IS_REQUIRED = false;

    public static final boolean ICCCARDHOLDERNAME_IS_REQUIRED = false;

    public static final boolean ICCISSUERCODETABLEINDEX_IS_REQUIRED = false;

    public static final boolean PINBLOCKCONTAINER_IS_REQUIRED = false;

    public static final boolean PINBLOCK_IS_REQUIRED = false;

    public static final boolean PINBLOCKKSN_IS_REQUIRED = false;

    public static final boolean GWCONTAINER_IS_REQUIRED = false;

    public static final boolean GWISSUERAUTHENTICATIONDATA_IS_REQUIRED = false;

    public static final boolean GWISSUERSCRIPTTEMPLATE1_IS_REQUIRED = false;

    public static final boolean GWISSUERSCRIPTTEMPLATE2_IS_REQUIRED = false;

    public static final boolean GWISSUERAUTHORIZATIONRESPONSECODE_IS_REQUIRED = false;

    public static final boolean GWMESSAGECONTROLFIELD_IS_REQUIRED = false;

    public static final boolean GWTXRESULT_IS_REQUIRED = false;

    public static final boolean CVMRESULT_IS_REQUIRED = false;

    public static final boolean SERVICECODE1_IS_REQUIRED = false;

    public static final boolean SERVICECODE2_IS_REQUIRED = false;

    public static final boolean SERVICECODE3_IS_REQUIRED = false;

  }

}
