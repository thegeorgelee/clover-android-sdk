/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2015 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.apps;

@SuppressWarnings("all")
public final class BusinessType implements android.os.Parcelable, com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  public com.clover.sdk.v3.apps.BusinessTypeGroupCode getBusinessTypeGroupCode() {
    return cacheGet(CacheKey.businessTypeGroupCode);
  }
 /**
   * localized business type group
  */
  public java.lang.String getBusinessTypeGroupName() {
    return cacheGet(CacheKey.businessTypeGroupName);
  }
  public com.clover.sdk.v3.apps.Code getCode() {
    return cacheGet(CacheKey.code);
  }
 /**
   * Localized business type
  */
  public java.lang.String getName() {
    return cacheGet(CacheKey.name);
  }


  private enum CacheKey {
    businessTypeGroupCode {
      @Override
      public Object extractValue(BusinessType instance) {
        return instance.extractBusinessTypeGroupCode();
      }
    },
    businessTypeGroupName {
      @Override
      public Object extractValue(BusinessType instance) {
        return instance.extractBusinessTypeGroupName();
      }
    },
    code {
      @Override
      public Object extractValue(BusinessType instance) {
        return instance.extractCode();
      }
    },
    name {
      @Override
      public Object extractValue(BusinessType instance) {
        return instance.extractName();
      }
    },
    ;

    public abstract Object extractValue(BusinessType instance);
  }

  private org.json.JSONObject jsonObject = null;
  private android.os.Bundle bundle = null;
  private android.os.Bundle changeLog = null;
  private Object[] cache = null;
  private byte[] cacheState = null;

  private static final byte STATE_NOT_CACHED = 0;
  private static final byte STATE_CACHED_NO_VALUE = 1;
  private static final byte STATE_CACHED_VALUE = 2;

  /**
   * Constructs a new empty instance.
   */
  public BusinessType() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public BusinessType(String json) throws java.lang.IllegalArgumentException {
    try {
      this.jsonObject = new org.json.JSONObject(json);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public BusinessType(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public BusinessType(BusinessType src) {
    if (src.jsonObject != null) {
      this.jsonObject = com.clover.sdk.v3.JsonHelper.deepCopy(src.getJSONObject());
    }
  }

  private <T> T cacheGet(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return (T) cache[index];
  }

  private boolean cacheValueIsNotNull(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cache[index] != null;
  }

  private boolean cacheHasKey(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cacheState[index] == STATE_CACHED_VALUE;
  }

  private void cacheRemoveValue(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    cache[index] = null;
    cacheState[index] = STATE_CACHED_NO_VALUE;
  }

  private void cacheMarkDirty(CacheKey key) {
    if (cache != null) {
      int index = key.ordinal();
      cache[index] = null;
      cacheState[index] = STATE_NOT_CACHED;
    }
  }

  private void populateCache(int index) {
    if (cache == null) {
      int size = CacheKey.values().length;
      cache = new Object[size];
      cacheState = new byte[size];
    }

    if (cacheState[index] == STATE_NOT_CACHED) {
      CacheKey key = CacheKey.values()[index];

      if (getJSONObject().has(key.name())) {
        cache[index] = key.extractValue(this);
        cacheState[index] = STATE_CACHED_VALUE;
      } else {
        cacheState[index] = STATE_CACHED_NO_VALUE;
      }
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    if (jsonObject == null) {
      jsonObject = new org.json.JSONObject();
    }
    return jsonObject;
  }


  @Override
  public void validate() {
  }



  private com.clover.sdk.v3.apps.BusinessTypeGroupCode extractBusinessTypeGroupCode() {
    if (!getJSONObject().isNull("businessTypeGroupCode")) {
      try {
        return com.clover.sdk.v3.apps.BusinessTypeGroupCode.valueOf(getJSONObject().optString("businessTypeGroupCode"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private java.lang.String extractBusinessTypeGroupName() {
    return getJSONObject().isNull("businessTypeGroupName") ? null :
      getJSONObject().optString("businessTypeGroupName");
  }


  private com.clover.sdk.v3.apps.Code extractCode() {
    if (!getJSONObject().isNull("code")) {
      try {
        return com.clover.sdk.v3.apps.Code.valueOf(getJSONObject().optString("code"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private java.lang.String extractName() {
    return getJSONObject().isNull("name") ? null :
      getJSONObject().optString("name");
  }


  /** Checks whether the 'businessTypeGroupCode' field is set and is not null */
  public boolean isNotNullBusinessTypeGroupCode() {
    return cacheValueIsNotNull(CacheKey.businessTypeGroupCode);
  }

  /** Checks whether the 'businessTypeGroupName' field is set and is not null */
  public boolean isNotNullBusinessTypeGroupName() {
    return cacheValueIsNotNull(CacheKey.businessTypeGroupName);
  }

  /** Checks whether the 'code' field is set and is not null */
  public boolean isNotNullCode() {
    return cacheValueIsNotNull(CacheKey.code);
  }

  /** Checks whether the 'name' field is set and is not null */
  public boolean isNotNullName() {
    return cacheValueIsNotNull(CacheKey.name);
  }


  /** Checks whether the 'businessTypeGroupCode' field has been set, however the value could be null */
  public boolean hasBusinessTypeGroupCode() {
    return cacheHasKey(CacheKey.businessTypeGroupCode);
  }

  /** Checks whether the 'businessTypeGroupName' field has been set, however the value could be null */
  public boolean hasBusinessTypeGroupName() {
    return cacheHasKey(CacheKey.businessTypeGroupName);
  }

  /** Checks whether the 'code' field has been set, however the value could be null */
  public boolean hasCode() {
    return cacheHasKey(CacheKey.code);
  }

  /** Checks whether the 'name' field has been set, however the value could be null */
  public boolean hasName() {
    return cacheHasKey(CacheKey.name);
  }


  /**
   * Sets the field 'businessTypeGroupCode'.
   */
  public BusinessType setBusinessTypeGroupCode(com.clover.sdk.v3.apps.BusinessTypeGroupCode businessTypeGroupCode) {
    logChange("businessTypeGroupCode");

    try {
      getJSONObject().put("businessTypeGroupCode", businessTypeGroupCode == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(businessTypeGroupCode));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.businessTypeGroupCode);
    return this;
  }

  /**
   * Sets the field 'businessTypeGroupName'.
   */
  public BusinessType setBusinessTypeGroupName(java.lang.String businessTypeGroupName) {
    logChange("businessTypeGroupName");

    try {
      getJSONObject().put("businessTypeGroupName", businessTypeGroupName == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(businessTypeGroupName));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.businessTypeGroupName);
    return this;
  }

  /**
   * Sets the field 'code'.
   */
  public BusinessType setCode(com.clover.sdk.v3.apps.Code code) {
    logChange("code");

    try {
      getJSONObject().put("code", code == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(code));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.code);
    return this;
  }

  /**
   * Sets the field 'name'.
   */
  public BusinessType setName(java.lang.String name) {
    logChange("name");

    try {
      getJSONObject().put("name", name == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(name));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.name);
    return this;
  }


  /** Clears the 'businessTypeGroupCode' field, the 'has' method for this field will now return false */
  public void clearBusinessTypeGroupCode() {
    unlogChange("businessTypeGroupCode");
    getJSONObject().remove("businessTypeGroupCode");
    cacheRemoveValue(CacheKey.businessTypeGroupCode);
  }

  /** Clears the 'businessTypeGroupName' field, the 'has' method for this field will now return false */
  public void clearBusinessTypeGroupName() {
    unlogChange("businessTypeGroupName");
    getJSONObject().remove("businessTypeGroupName");
    cacheRemoveValue(CacheKey.businessTypeGroupName);
  }

  /** Clears the 'code' field, the 'has' method for this field will now return false */
  public void clearCode() {
    unlogChange("code");
    getJSONObject().remove("code");
    cacheRemoveValue(CacheKey.code);
  }

  /** Clears the 'name' field, the 'has' method for this field will now return false */
  public void clearName() {
    unlogChange("name");
    getJSONObject().remove("name");
    cacheRemoveValue(CacheKey.name);
  }


  private void logChange(java.lang.String field) {
    if (changeLog == null) {
      changeLog = new android.os.Bundle();
    }
    changeLog.putString(field, null);
  }

  private void unlogChange(java.lang.String field) {
    if (changeLog != null) {
      changeLog.remove(field);
    }
  }

  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return changeLog != null;
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    changeLog = null;
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public BusinessType copyChanges() {
    BusinessType copy = new BusinessType();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(BusinessType src) {
    if (src.changeLog != null) {
      try {
        // Make a copy of the source so the destination fields are copies
        org.json.JSONObject srcObj = new BusinessType(src).getJSONObject();
        org.json.JSONObject dstObj = getJSONObject();
        for (java.lang.String field : src.changeLog.keySet()) {
          dstObj.put(field, srcObj.get(field));
          logChange(field);
        }
      } catch (org.json.JSONException e) {
        throw new java.lang.IllegalArgumentException(e);
      }
    }
  }


  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    if (bundle == null) {
      bundle = new android.os.Bundle();
    }
    return bundle;
  }

  @Override
  public String toString() {
    String json = getJSONObject().toString();

    if (bundle != null) {
      bundle.isEmpty(); // Triggers unparcel
    }

    if (changeLog != null) {
      changeLog.isEmpty(); // Triggers unparcel
    }

    return "BusinessType{" +
        "json='" + json + "'" +
        ", bundle=" + bundle +
        ", changeLog=" + changeLog +
        '}';
  }

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
	  com.clover.sdk.v3.JsonParcelHelper.wrap(getJSONObject()).writeToParcel(dest, 0);
    dest.writeBundle(bundle);
    dest.writeBundle(changeLog);
  }

  public static final android.os.Parcelable.Creator<BusinessType> CREATOR = new android.os.Parcelable.Creator<BusinessType>() {
    @Override
    public BusinessType createFromParcel(android.os.Parcel in) {
      BusinessType instance = new BusinessType(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.bundle = in.readBundle(getClass().getClassLoader());
      instance.changeLog = in.readBundle();
      return instance;
    }

    @Override
    public BusinessType[] newArray(int size) {
      return new BusinessType[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<BusinessType> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<BusinessType>() {
    @Override
    public BusinessType create(org.json.JSONObject jsonObject) {
      return new BusinessType(jsonObject);
    }
  };


  public interface Constraints {

    public static final boolean BUSINESSTYPEGROUPCODE_IS_REQUIRED = false;

    public static final boolean BUSINESSTYPEGROUPNAME_IS_REQUIRED = false;

    public static final boolean CODE_IS_REQUIRED = false;

    public static final boolean NAME_IS_REQUIRED = false;

  }

}
