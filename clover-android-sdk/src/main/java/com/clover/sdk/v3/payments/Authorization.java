/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2015 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.payments;

@SuppressWarnings("all")
public final class Authorization implements android.os.Parcelable, com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

 /**
   * Unique identifier
  */
  public java.lang.String getId() {
    return cacheGet(CacheKey.id);
  }
 /**
   * Payment that the auth was opened with
  */
  public com.clover.sdk.v3.payments.Payment getPayment() {
    return cacheGet(CacheKey.payment);
  }
 /**
   * Name of tab
  */
  public java.lang.String getTabName() {
    return cacheGet(CacheKey.tabName);
  }
 /**
   * Amount authorized
  */
  public java.lang.Long getAmount() {
    return cacheGet(CacheKey.amount);
  }
 /**
   * Type of credit card used for authorization
  */
  public com.clover.sdk.v3.payments.CardType getCardType() {
    return cacheGet(CacheKey.cardType);
  }
 /**
   * Last 4 digits of credit card used for authorization
  */
  public java.lang.String getLast4() {
    return cacheGet(CacheKey.last4);
  }
 /**
   * Authorization code
  */
  public java.lang.String getAuthcode() {
    return cacheGet(CacheKey.authcode);
  }
  public com.clover.sdk.v3.payments.Type getType() {
    return cacheGet(CacheKey.type);
  }
  public java.lang.String getNote() {
    return cacheGet(CacheKey.note);
  }
 /**
   * Payment that the auth was closed with
  */
  public com.clover.sdk.v3.payments.Payment getClosingPayment() {
    return cacheGet(CacheKey.closingPayment);
  }
 /**
   * Time authorization was recorded on server
  */
  public java.lang.Long getCreatedTime() {
    return cacheGet(CacheKey.createdTime);
  }


  private enum CacheKey {
    id {
      @Override
      public Object extractValue(Authorization instance) {
        return instance.extractId();
      }
    },
    payment {
      @Override
      public Object extractValue(Authorization instance) {
        return instance.extractPayment();
      }
    },
    tabName {
      @Override
      public Object extractValue(Authorization instance) {
        return instance.extractTabName();
      }
    },
    amount {
      @Override
      public Object extractValue(Authorization instance) {
        return instance.extractAmount();
      }
    },
    cardType {
      @Override
      public Object extractValue(Authorization instance) {
        return instance.extractCardType();
      }
    },
    last4 {
      @Override
      public Object extractValue(Authorization instance) {
        return instance.extractLast4();
      }
    },
    authcode {
      @Override
      public Object extractValue(Authorization instance) {
        return instance.extractAuthcode();
      }
    },
    type {
      @Override
      public Object extractValue(Authorization instance) {
        return instance.extractType();
      }
    },
    note {
      @Override
      public Object extractValue(Authorization instance) {
        return instance.extractNote();
      }
    },
    closingPayment {
      @Override
      public Object extractValue(Authorization instance) {
        return instance.extractClosingPayment();
      }
    },
    createdTime {
      @Override
      public Object extractValue(Authorization instance) {
        return instance.extractCreatedTime();
      }
    },
    ;

    public abstract Object extractValue(Authorization instance);
  }

  private org.json.JSONObject jsonObject = null;
  private android.os.Bundle bundle = null;
  private android.os.Bundle changeLog = null;
  private Object[] cache = null;
  private byte[] cacheState = null;

  private static final byte STATE_NOT_CACHED = 0;
  private static final byte STATE_CACHED_NO_VALUE = 1;
  private static final byte STATE_CACHED_VALUE = 2;

  /**
   * Constructs a new empty instance.
   */
  public Authorization() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public Authorization(String json) throws java.lang.IllegalArgumentException {
    try {
      this.jsonObject = new org.json.JSONObject(json);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public Authorization(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public Authorization(Authorization src) {
    if (src.jsonObject != null) {
      this.jsonObject = com.clover.sdk.v3.JsonHelper.deepCopy(src.getJSONObject());
    }
  }

  private <T> T cacheGet(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return (T) cache[index];
  }

  private boolean cacheValueIsNotNull(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cache[index] != null;
  }

  private boolean cacheHasKey(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cacheState[index] == STATE_CACHED_VALUE;
  }

  private void cacheRemoveValue(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    cache[index] = null;
    cacheState[index] = STATE_CACHED_NO_VALUE;
  }

  private void cacheMarkDirty(CacheKey key) {
    if (cache != null) {
      int index = key.ordinal();
      cache[index] = null;
      cacheState[index] = STATE_NOT_CACHED;
    }
  }

  private void populateCache(int index) {
    if (cache == null) {
      int size = CacheKey.values().length;
      cache = new Object[size];
      cacheState = new byte[size];
    }

    if (cacheState[index] == STATE_NOT_CACHED) {
      CacheKey key = CacheKey.values()[index];

      if (getJSONObject().has(key.name())) {
        cache[index] = key.extractValue(this);
        cacheState[index] = STATE_CACHED_VALUE;
      } else {
        cacheState[index] = STATE_CACHED_NO_VALUE;
      }
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    if (jsonObject == null) {
      jsonObject = new org.json.JSONObject();
    }
    return jsonObject;
  }


  @Override
  public void validate() {
    java.lang.String id = getId();
    if (id != null && id.length() > 13) { throw new IllegalArgumentException("Maximum string length exceeded for 'id'");}

    java.lang.String tabName = getTabName();
    if (tabName != null && tabName.length() > 127) { throw new IllegalArgumentException("Maximum string length exceeded for 'tabName'");}

    java.lang.String last4 = getLast4();
    if (last4 != null && last4.length() > 4) { throw new IllegalArgumentException("Maximum string length exceeded for 'last4'");}

    java.lang.String authcode = getAuthcode();
    if (authcode != null && authcode.length() > 255) { throw new IllegalArgumentException("Maximum string length exceeded for 'authcode'");}

    java.lang.String note = getNote();
    if (note != null && note.length() > 255) { throw new IllegalArgumentException("Maximum string length exceeded for 'note'");}
  }



  private java.lang.String extractId() {
    return getJSONObject().isNull("id") ? null :
      getJSONObject().optString("id");
  }


  private com.clover.sdk.v3.payments.Payment extractPayment() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("payment");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.payments.Payment(getJSONObject().optJSONObject("payment"));
    }
    return null;
  }


  private java.lang.String extractTabName() {
    return getJSONObject().isNull("tabName") ? null :
      getJSONObject().optString("tabName");
  }


  private java.lang.Long extractAmount() {
    return getJSONObject().isNull("amount") ? null :
      getJSONObject().optLong("amount");
  }


  private com.clover.sdk.v3.payments.CardType extractCardType() {
    if (!getJSONObject().isNull("cardType")) {
      try {
        return com.clover.sdk.v3.payments.CardType.valueOf(getJSONObject().optString("cardType"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private java.lang.String extractLast4() {
    return getJSONObject().isNull("last4") ? null :
      getJSONObject().optString("last4");
  }


  private java.lang.String extractAuthcode() {
    return getJSONObject().isNull("authcode") ? null :
      getJSONObject().optString("authcode");
  }


  private com.clover.sdk.v3.payments.Type extractType() {
    if (!getJSONObject().isNull("type")) {
      try {
        return com.clover.sdk.v3.payments.Type.valueOf(getJSONObject().optString("type"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private java.lang.String extractNote() {
    return getJSONObject().isNull("note") ? null :
      getJSONObject().optString("note");
  }


  private com.clover.sdk.v3.payments.Payment extractClosingPayment() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("closingPayment");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.payments.Payment(getJSONObject().optJSONObject("closingPayment"));
    }
    return null;
  }


  private java.lang.Long extractCreatedTime() {
    return getJSONObject().isNull("createdTime") ? null :
      getJSONObject().optLong("createdTime");
  }


  /** Checks whether the 'id' field is set and is not null */
  public boolean isNotNullId() {
    return cacheValueIsNotNull(CacheKey.id);
  }

  /** Checks whether the 'payment' field is set and is not null */
  public boolean isNotNullPayment() {
    return cacheValueIsNotNull(CacheKey.payment);
  }

  /** Checks whether the 'tabName' field is set and is not null */
  public boolean isNotNullTabName() {
    return cacheValueIsNotNull(CacheKey.tabName);
  }

  /** Checks whether the 'amount' field is set and is not null */
  public boolean isNotNullAmount() {
    return cacheValueIsNotNull(CacheKey.amount);
  }

  /** Checks whether the 'cardType' field is set and is not null */
  public boolean isNotNullCardType() {
    return cacheValueIsNotNull(CacheKey.cardType);
  }

  /** Checks whether the 'last4' field is set and is not null */
  public boolean isNotNullLast4() {
    return cacheValueIsNotNull(CacheKey.last4);
  }

  /** Checks whether the 'authcode' field is set and is not null */
  public boolean isNotNullAuthcode() {
    return cacheValueIsNotNull(CacheKey.authcode);
  }

  /** Checks whether the 'type' field is set and is not null */
  public boolean isNotNullType() {
    return cacheValueIsNotNull(CacheKey.type);
  }

  /** Checks whether the 'note' field is set and is not null */
  public boolean isNotNullNote() {
    return cacheValueIsNotNull(CacheKey.note);
  }

  /** Checks whether the 'closingPayment' field is set and is not null */
  public boolean isNotNullClosingPayment() {
    return cacheValueIsNotNull(CacheKey.closingPayment);
  }

  /** Checks whether the 'createdTime' field is set and is not null */
  public boolean isNotNullCreatedTime() {
    return cacheValueIsNotNull(CacheKey.createdTime);
  }


  /** Checks whether the 'id' field has been set, however the value could be null */
  public boolean hasId() {
    return cacheHasKey(CacheKey.id);
  }

  /** Checks whether the 'payment' field has been set, however the value could be null */
  public boolean hasPayment() {
    return cacheHasKey(CacheKey.payment);
  }

  /** Checks whether the 'tabName' field has been set, however the value could be null */
  public boolean hasTabName() {
    return cacheHasKey(CacheKey.tabName);
  }

  /** Checks whether the 'amount' field has been set, however the value could be null */
  public boolean hasAmount() {
    return cacheHasKey(CacheKey.amount);
  }

  /** Checks whether the 'cardType' field has been set, however the value could be null */
  public boolean hasCardType() {
    return cacheHasKey(CacheKey.cardType);
  }

  /** Checks whether the 'last4' field has been set, however the value could be null */
  public boolean hasLast4() {
    return cacheHasKey(CacheKey.last4);
  }

  /** Checks whether the 'authcode' field has been set, however the value could be null */
  public boolean hasAuthcode() {
    return cacheHasKey(CacheKey.authcode);
  }

  /** Checks whether the 'type' field has been set, however the value could be null */
  public boolean hasType() {
    return cacheHasKey(CacheKey.type);
  }

  /** Checks whether the 'note' field has been set, however the value could be null */
  public boolean hasNote() {
    return cacheHasKey(CacheKey.note);
  }

  /** Checks whether the 'closingPayment' field has been set, however the value could be null */
  public boolean hasClosingPayment() {
    return cacheHasKey(CacheKey.closingPayment);
  }

  /** Checks whether the 'createdTime' field has been set, however the value could be null */
  public boolean hasCreatedTime() {
    return cacheHasKey(CacheKey.createdTime);
  }


  /**
   * Sets the field 'id'.
   */
  public Authorization setId(java.lang.String id) {
    logChange("id");

    try {
      getJSONObject().put("id", id == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(id));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.id);
    return this;
  }

  /**
   * Sets the field 'payment'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public Authorization setPayment(com.clover.sdk.v3.payments.Payment payment) {
    logChange("payment");

    try {
      getJSONObject().put("payment",
          payment == null ? org.json.JSONObject.NULL : payment.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.payment);
    return this;
  }

  /**
   * Sets the field 'tabName'.
   */
  public Authorization setTabName(java.lang.String tabName) {
    logChange("tabName");

    try {
      getJSONObject().put("tabName", tabName == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(tabName));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.tabName);
    return this;
  }

  /**
   * Sets the field 'amount'.
   */
  public Authorization setAmount(java.lang.Long amount) {
    logChange("amount");

    try {
      getJSONObject().put("amount", amount == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(amount));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.amount);
    return this;
  }

  /**
   * Sets the field 'cardType'.
   */
  public Authorization setCardType(com.clover.sdk.v3.payments.CardType cardType) {
    logChange("cardType");

    try {
      getJSONObject().put("cardType", cardType == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(cardType));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.cardType);
    return this;
  }

  /**
   * Sets the field 'last4'.
   */
  public Authorization setLast4(java.lang.String last4) {
    logChange("last4");

    try {
      getJSONObject().put("last4", last4 == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(last4));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.last4);
    return this;
  }

  /**
   * Sets the field 'authcode'.
   */
  public Authorization setAuthcode(java.lang.String authcode) {
    logChange("authcode");

    try {
      getJSONObject().put("authcode", authcode == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(authcode));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.authcode);
    return this;
  }

  /**
   * Sets the field 'type'.
   */
  public Authorization setType(com.clover.sdk.v3.payments.Type type) {
    logChange("type");

    try {
      getJSONObject().put("type", type == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(type));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.type);
    return this;
  }

  /**
   * Sets the field 'note'.
   */
  public Authorization setNote(java.lang.String note) {
    logChange("note");

    try {
      getJSONObject().put("note", note == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(note));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.note);
    return this;
  }

  /**
   * Sets the field 'closingPayment'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public Authorization setClosingPayment(com.clover.sdk.v3.payments.Payment closingPayment) {
    logChange("closingPayment");

    try {
      getJSONObject().put("closingPayment",
          closingPayment == null ? org.json.JSONObject.NULL : closingPayment.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.closingPayment);
    return this;
  }

  /**
   * Sets the field 'createdTime'.
   */
  public Authorization setCreatedTime(java.lang.Long createdTime) {
    logChange("createdTime");

    try {
      getJSONObject().put("createdTime", createdTime == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(createdTime));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.createdTime);
    return this;
  }


  /** Clears the 'id' field, the 'has' method for this field will now return false */
  public void clearId() {
    unlogChange("id");
    getJSONObject().remove("id");
    cacheRemoveValue(CacheKey.id);
  }

  /** Clears the 'payment' field, the 'has' method for this field will now return false */
  public void clearPayment() {
    unlogChange("payment");
    getJSONObject().remove("payment");
    cacheRemoveValue(CacheKey.payment);
  }

  /** Clears the 'tabName' field, the 'has' method for this field will now return false */
  public void clearTabName() {
    unlogChange("tabName");
    getJSONObject().remove("tabName");
    cacheRemoveValue(CacheKey.tabName);
  }

  /** Clears the 'amount' field, the 'has' method for this field will now return false */
  public void clearAmount() {
    unlogChange("amount");
    getJSONObject().remove("amount");
    cacheRemoveValue(CacheKey.amount);
  }

  /** Clears the 'cardType' field, the 'has' method for this field will now return false */
  public void clearCardType() {
    unlogChange("cardType");
    getJSONObject().remove("cardType");
    cacheRemoveValue(CacheKey.cardType);
  }

  /** Clears the 'last4' field, the 'has' method for this field will now return false */
  public void clearLast4() {
    unlogChange("last4");
    getJSONObject().remove("last4");
    cacheRemoveValue(CacheKey.last4);
  }

  /** Clears the 'authcode' field, the 'has' method for this field will now return false */
  public void clearAuthcode() {
    unlogChange("authcode");
    getJSONObject().remove("authcode");
    cacheRemoveValue(CacheKey.authcode);
  }

  /** Clears the 'type' field, the 'has' method for this field will now return false */
  public void clearType() {
    unlogChange("type");
    getJSONObject().remove("type");
    cacheRemoveValue(CacheKey.type);
  }

  /** Clears the 'note' field, the 'has' method for this field will now return false */
  public void clearNote() {
    unlogChange("note");
    getJSONObject().remove("note");
    cacheRemoveValue(CacheKey.note);
  }

  /** Clears the 'closingPayment' field, the 'has' method for this field will now return false */
  public void clearClosingPayment() {
    unlogChange("closingPayment");
    getJSONObject().remove("closingPayment");
    cacheRemoveValue(CacheKey.closingPayment);
  }

  /** Clears the 'createdTime' field, the 'has' method for this field will now return false */
  public void clearCreatedTime() {
    unlogChange("createdTime");
    getJSONObject().remove("createdTime");
    cacheRemoveValue(CacheKey.createdTime);
  }


  private void logChange(java.lang.String field) {
    if (changeLog == null) {
      changeLog = new android.os.Bundle();
    }
    changeLog.putString(field, null);
  }

  private void unlogChange(java.lang.String field) {
    if (changeLog != null) {
      changeLog.remove(field);
    }
  }

  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return changeLog != null;
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    changeLog = null;
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public Authorization copyChanges() {
    Authorization copy = new Authorization();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(Authorization src) {
    if (src.changeLog != null) {
      try {
        // Make a copy of the source so the destination fields are copies
        org.json.JSONObject srcObj = new Authorization(src).getJSONObject();
        org.json.JSONObject dstObj = getJSONObject();
        for (java.lang.String field : src.changeLog.keySet()) {
          dstObj.put(field, srcObj.get(field));
          logChange(field);
        }
      } catch (org.json.JSONException e) {
        throw new java.lang.IllegalArgumentException(e);
      }
    }
  }


  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    if (bundle == null) {
      bundle = new android.os.Bundle();
    }
    return bundle;
  }

  @Override
  public String toString() {
    String json = getJSONObject().toString();

    if (bundle != null) {
      bundle.isEmpty(); // Triggers unparcel
    }

    if (changeLog != null) {
      changeLog.isEmpty(); // Triggers unparcel
    }

    return "Authorization{" +
        "json='" + json + "'" +
        ", bundle=" + bundle +
        ", changeLog=" + changeLog +
        '}';
  }

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
	  com.clover.sdk.v3.JsonParcelHelper.wrap(getJSONObject()).writeToParcel(dest, 0);
    dest.writeBundle(bundle);
    dest.writeBundle(changeLog);
  }

  public static final android.os.Parcelable.Creator<Authorization> CREATOR = new android.os.Parcelable.Creator<Authorization>() {
    @Override
    public Authorization createFromParcel(android.os.Parcel in) {
      Authorization instance = new Authorization(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.bundle = in.readBundle(getClass().getClassLoader());
      instance.changeLog = in.readBundle();
      return instance;
    }

    @Override
    public Authorization[] newArray(int size) {
      return new Authorization[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<Authorization> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<Authorization>() {
    @Override
    public Authorization create(org.json.JSONObject jsonObject) {
      return new Authorization(jsonObject);
    }
  };


  public interface Constraints {

    public static final boolean ID_IS_REQUIRED = false;
    public static final long ID_MAX_LEN = 13;

    public static final boolean PAYMENT_IS_REQUIRED = false;

    public static final boolean TABNAME_IS_REQUIRED = false;
    public static final long TABNAME_MAX_LEN = 127;

    public static final boolean AMOUNT_IS_REQUIRED = false;

    public static final boolean CARDTYPE_IS_REQUIRED = false;

    public static final boolean LAST4_IS_REQUIRED = false;
    public static final long LAST4_MAX_LEN = 4;

    public static final boolean AUTHCODE_IS_REQUIRED = false;
    public static final long AUTHCODE_MAX_LEN = 255;

    public static final boolean TYPE_IS_REQUIRED = false;

    public static final boolean NOTE_IS_REQUIRED = false;
    public static final long NOTE_MAX_LEN = 255;

    public static final boolean CLOSINGPAYMENT_IS_REQUIRED = false;

    public static final boolean CREATEDTIME_IS_REQUIRED = false;

  }

}
