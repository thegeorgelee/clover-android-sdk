/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */


/*
 * Copyright (C) 2015 Clover Network, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.clover.sdk.v3.payments;

@SuppressWarnings("all")
public final class GiftCardResponse implements android.os.Parcelable, com.clover.sdk.v3.Validator, com.clover.sdk.JSONifiable {

  public com.clover.sdk.v3.payments.TxType getTxType() {
    return cacheGet(CacheKey.txType);
  }
  public com.clover.sdk.v3.payments.GiftCardState getState() {
    return cacheGet(CacheKey.state);
  }
 /**
   * Transaction Amount
  */
  public java.lang.Long getRequestAmount() {
    return cacheGet(CacheKey.requestAmount);
  }
  public com.clover.sdk.v3.payments.Payment getPayment() {
    return cacheGet(CacheKey.payment);
  }
  public java.lang.String getResponseMessage() {
    return cacheGet(CacheKey.responseMessage);
  }
  public java.lang.Boolean getRequestSuccessful() {
    return cacheGet(CacheKey.requestSuccessful);
  }
  public java.lang.String getAccountNumber() {
    return cacheGet(CacheKey.accountNumber);
  }
  public java.lang.String getGiftCardTxUuid() {
    return cacheGet(CacheKey.giftCardTxUuid);
  }
  public java.lang.String getTransactionId() {
    return cacheGet(CacheKey.transactionId);
  }
  public java.lang.String getReferenceUuid() {
    return cacheGet(CacheKey.referenceUuid);
  }
  public java.lang.String getAuthCode() {
    return cacheGet(CacheKey.authCode);
  }
  public java.lang.Long getBegBal() {
    return cacheGet(CacheKey.begBal);
  }
  public java.lang.Long getEndBal() {
    return cacheGet(CacheKey.endBal);
  }
  public java.lang.Long getHoldBal() {
    return cacheGet(CacheKey.holdBal);
  }


  private enum CacheKey {
    txType {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractTxType();
      }
    },
    state {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractState();
      }
    },
    requestAmount {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractRequestAmount();
      }
    },
    payment {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractPayment();
      }
    },
    responseMessage {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractResponseMessage();
      }
    },
    requestSuccessful {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractRequestSuccessful();
      }
    },
    accountNumber {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractAccountNumber();
      }
    },
    giftCardTxUuid {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractGiftCardTxUuid();
      }
    },
    transactionId {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractTransactionId();
      }
    },
    referenceUuid {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractReferenceUuid();
      }
    },
    authCode {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractAuthCode();
      }
    },
    begBal {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractBegBal();
      }
    },
    endBal {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractEndBal();
      }
    },
    holdBal {
      @Override
      public Object extractValue(GiftCardResponse instance) {
        return instance.extractHoldBal();
      }
    },
    ;

    public abstract Object extractValue(GiftCardResponse instance);
  }

  private org.json.JSONObject jsonObject = null;
  private android.os.Bundle bundle = null;
  private android.os.Bundle changeLog = null;
  private Object[] cache = null;
  private byte[] cacheState = null;

  private static final byte STATE_NOT_CACHED = 0;
  private static final byte STATE_CACHED_NO_VALUE = 1;
  private static final byte STATE_CACHED_VALUE = 2;

  /**
   * Constructs a new empty instance.
   */
  public GiftCardResponse() { }

  /**
   * Constructs a new instance from the given JSON String.
   */
  public GiftCardResponse(String json) throws java.lang.IllegalArgumentException {
    try {
      this.jsonObject = new org.json.JSONObject(json);
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException("invalid json", e);
    }
  }

  /**
   * Construct a new instance backed by the given JSONObject, the parameter is not copied so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public GiftCardResponse(org.json.JSONObject jsonObject) {
    this.jsonObject = jsonObject;
  }

  /**
   * Constructs a new instance that is a deep copy of the source instance. It does not copy the bundle or changelog.
   */
  public GiftCardResponse(GiftCardResponse src) {
    if (src.jsonObject != null) {
      this.jsonObject = com.clover.sdk.v3.JsonHelper.deepCopy(src.getJSONObject());
    }
  }

  private <T> T cacheGet(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return (T) cache[index];
  }

  private boolean cacheValueIsNotNull(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cache[index] != null;
  }

  private boolean cacheHasKey(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    return cacheState[index] == STATE_CACHED_VALUE;
  }

  private void cacheRemoveValue(CacheKey key) {
    int index = key.ordinal();
    populateCache(index);
    cache[index] = null;
    cacheState[index] = STATE_CACHED_NO_VALUE;
  }

  private void cacheMarkDirty(CacheKey key) {
    if (cache != null) {
      int index = key.ordinal();
      cache[index] = null;
      cacheState[index] = STATE_NOT_CACHED;
    }
  }

  private void populateCache(int index) {
    if (cache == null) {
      int size = CacheKey.values().length;
      cache = new Object[size];
      cacheState = new byte[size];
    }

    if (cacheState[index] == STATE_NOT_CACHED) {
      CacheKey key = CacheKey.values()[index];

      if (getJSONObject().has(key.name())) {
        cache[index] = key.extractValue(this);
        cacheState[index] = STATE_CACHED_VALUE;
      } else {
        cacheState[index] = STATE_CACHED_NO_VALUE;
      }
    }
  }

  /**
   * Returns the internal JSONObject backing this instance, the return value is not a copy so changes to it will be
   * reflected in this instance and vice-versa.
   */
  public org.json.JSONObject getJSONObject() {
    if (jsonObject == null) {
      jsonObject = new org.json.JSONObject();
    }
    return jsonObject;
  }


  @Override
  public void validate() {
  }



  private com.clover.sdk.v3.payments.TxType extractTxType() {
    if (!getJSONObject().isNull("txType")) {
      try {
        return com.clover.sdk.v3.payments.TxType.valueOf(getJSONObject().optString("txType"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private com.clover.sdk.v3.payments.GiftCardState extractState() {
    if (!getJSONObject().isNull("state")) {
      try {
        return com.clover.sdk.v3.payments.GiftCardState.valueOf(getJSONObject().optString("state"));
      } catch(Exception e) {
        e.printStackTrace();
      }
    }

    return null;
  }


  private java.lang.Long extractRequestAmount() {
    return getJSONObject().isNull("requestAmount") ? null :
      getJSONObject().optLong("requestAmount");
  }


  private com.clover.sdk.v3.payments.Payment extractPayment() {
    org.json.JSONObject jsonObj = getJSONObject().optJSONObject("payment");
    if (jsonObj != null) {
      return new com.clover.sdk.v3.payments.Payment(getJSONObject().optJSONObject("payment"));
    }
    return null;
  }


  private java.lang.String extractResponseMessage() {
    return getJSONObject().isNull("responseMessage") ? null :
      getJSONObject().optString("responseMessage");
  }


  private java.lang.Boolean extractRequestSuccessful() {
    return getJSONObject().isNull("requestSuccessful") ? null :
      getJSONObject().optBoolean("requestSuccessful");
  }


  private java.lang.String extractAccountNumber() {
    return getJSONObject().isNull("accountNumber") ? null :
      getJSONObject().optString("accountNumber");
  }


  private java.lang.String extractGiftCardTxUuid() {
    return getJSONObject().isNull("giftCardTxUuid") ? null :
      getJSONObject().optString("giftCardTxUuid");
  }


  private java.lang.String extractTransactionId() {
    return getJSONObject().isNull("transactionId") ? null :
      getJSONObject().optString("transactionId");
  }


  private java.lang.String extractReferenceUuid() {
    return getJSONObject().isNull("referenceUuid") ? null :
      getJSONObject().optString("referenceUuid");
  }


  private java.lang.String extractAuthCode() {
    return getJSONObject().isNull("authCode") ? null :
      getJSONObject().optString("authCode");
  }


  private java.lang.Long extractBegBal() {
    return getJSONObject().isNull("begBal") ? null :
      getJSONObject().optLong("begBal");
  }


  private java.lang.Long extractEndBal() {
    return getJSONObject().isNull("endBal") ? null :
      getJSONObject().optLong("endBal");
  }


  private java.lang.Long extractHoldBal() {
    return getJSONObject().isNull("holdBal") ? null :
      getJSONObject().optLong("holdBal");
  }


  /** Checks whether the 'txType' field is set and is not null */
  public boolean isNotNullTxType() {
    return cacheValueIsNotNull(CacheKey.txType);
  }

  /** Checks whether the 'state' field is set and is not null */
  public boolean isNotNullState() {
    return cacheValueIsNotNull(CacheKey.state);
  }

  /** Checks whether the 'requestAmount' field is set and is not null */
  public boolean isNotNullRequestAmount() {
    return cacheValueIsNotNull(CacheKey.requestAmount);
  }

  /** Checks whether the 'payment' field is set and is not null */
  public boolean isNotNullPayment() {
    return cacheValueIsNotNull(CacheKey.payment);
  }

  /** Checks whether the 'responseMessage' field is set and is not null */
  public boolean isNotNullResponseMessage() {
    return cacheValueIsNotNull(CacheKey.responseMessage);
  }

  /** Checks whether the 'requestSuccessful' field is set and is not null */
  public boolean isNotNullRequestSuccessful() {
    return cacheValueIsNotNull(CacheKey.requestSuccessful);
  }

  /** Checks whether the 'accountNumber' field is set and is not null */
  public boolean isNotNullAccountNumber() {
    return cacheValueIsNotNull(CacheKey.accountNumber);
  }

  /** Checks whether the 'giftCardTxUuid' field is set and is not null */
  public boolean isNotNullGiftCardTxUuid() {
    return cacheValueIsNotNull(CacheKey.giftCardTxUuid);
  }

  /** Checks whether the 'transactionId' field is set and is not null */
  public boolean isNotNullTransactionId() {
    return cacheValueIsNotNull(CacheKey.transactionId);
  }

  /** Checks whether the 'referenceUuid' field is set and is not null */
  public boolean isNotNullReferenceUuid() {
    return cacheValueIsNotNull(CacheKey.referenceUuid);
  }

  /** Checks whether the 'authCode' field is set and is not null */
  public boolean isNotNullAuthCode() {
    return cacheValueIsNotNull(CacheKey.authCode);
  }

  /** Checks whether the 'begBal' field is set and is not null */
  public boolean isNotNullBegBal() {
    return cacheValueIsNotNull(CacheKey.begBal);
  }

  /** Checks whether the 'endBal' field is set and is not null */
  public boolean isNotNullEndBal() {
    return cacheValueIsNotNull(CacheKey.endBal);
  }

  /** Checks whether the 'holdBal' field is set and is not null */
  public boolean isNotNullHoldBal() {
    return cacheValueIsNotNull(CacheKey.holdBal);
  }


  /** Checks whether the 'txType' field has been set, however the value could be null */
  public boolean hasTxType() {
    return cacheHasKey(CacheKey.txType);
  }

  /** Checks whether the 'state' field has been set, however the value could be null */
  public boolean hasState() {
    return cacheHasKey(CacheKey.state);
  }

  /** Checks whether the 'requestAmount' field has been set, however the value could be null */
  public boolean hasRequestAmount() {
    return cacheHasKey(CacheKey.requestAmount);
  }

  /** Checks whether the 'payment' field has been set, however the value could be null */
  public boolean hasPayment() {
    return cacheHasKey(CacheKey.payment);
  }

  /** Checks whether the 'responseMessage' field has been set, however the value could be null */
  public boolean hasResponseMessage() {
    return cacheHasKey(CacheKey.responseMessage);
  }

  /** Checks whether the 'requestSuccessful' field has been set, however the value could be null */
  public boolean hasRequestSuccessful() {
    return cacheHasKey(CacheKey.requestSuccessful);
  }

  /** Checks whether the 'accountNumber' field has been set, however the value could be null */
  public boolean hasAccountNumber() {
    return cacheHasKey(CacheKey.accountNumber);
  }

  /** Checks whether the 'giftCardTxUuid' field has been set, however the value could be null */
  public boolean hasGiftCardTxUuid() {
    return cacheHasKey(CacheKey.giftCardTxUuid);
  }

  /** Checks whether the 'transactionId' field has been set, however the value could be null */
  public boolean hasTransactionId() {
    return cacheHasKey(CacheKey.transactionId);
  }

  /** Checks whether the 'referenceUuid' field has been set, however the value could be null */
  public boolean hasReferenceUuid() {
    return cacheHasKey(CacheKey.referenceUuid);
  }

  /** Checks whether the 'authCode' field has been set, however the value could be null */
  public boolean hasAuthCode() {
    return cacheHasKey(CacheKey.authCode);
  }

  /** Checks whether the 'begBal' field has been set, however the value could be null */
  public boolean hasBegBal() {
    return cacheHasKey(CacheKey.begBal);
  }

  /** Checks whether the 'endBal' field has been set, however the value could be null */
  public boolean hasEndBal() {
    return cacheHasKey(CacheKey.endBal);
  }

  /** Checks whether the 'holdBal' field has been set, however the value could be null */
  public boolean hasHoldBal() {
    return cacheHasKey(CacheKey.holdBal);
  }


  /**
   * Sets the field 'txType'.
   */
  public GiftCardResponse setTxType(com.clover.sdk.v3.payments.TxType txType) {
    logChange("txType");

    try {
      getJSONObject().put("txType", txType == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(txType));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.txType);
    return this;
  }

  /**
   * Sets the field 'state'.
   */
  public GiftCardResponse setState(com.clover.sdk.v3.payments.GiftCardState state) {
    logChange("state");

    try {
      getJSONObject().put("state", state == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(state));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.state);
    return this;
  }

  /**
   * Sets the field 'requestAmount'.
   */
  public GiftCardResponse setRequestAmount(java.lang.Long requestAmount) {
    logChange("requestAmount");

    try {
      getJSONObject().put("requestAmount", requestAmount == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(requestAmount));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.requestAmount);
    return this;
  }

  /**
   * Sets the field 'payment'.
   *
   * The parameter is not copied so changes to it will be reflected in this instance and vice-versa.
   */
  public GiftCardResponse setPayment(com.clover.sdk.v3.payments.Payment payment) {
    logChange("payment");

    try {
      getJSONObject().put("payment",
          payment == null ? org.json.JSONObject.NULL : payment.getJSONObject());
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.payment);
    return this;
  }

  /**
   * Sets the field 'responseMessage'.
   */
  public GiftCardResponse setResponseMessage(java.lang.String responseMessage) {
    logChange("responseMessage");

    try {
      getJSONObject().put("responseMessage", responseMessage == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(responseMessage));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.responseMessage);
    return this;
  }

  /**
   * Sets the field 'requestSuccessful'.
   */
  public GiftCardResponse setRequestSuccessful(java.lang.Boolean requestSuccessful) {
    logChange("requestSuccessful");

    try {
      getJSONObject().put("requestSuccessful", requestSuccessful == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(requestSuccessful));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.requestSuccessful);
    return this;
  }

  /**
   * Sets the field 'accountNumber'.
   */
  public GiftCardResponse setAccountNumber(java.lang.String accountNumber) {
    logChange("accountNumber");

    try {
      getJSONObject().put("accountNumber", accountNumber == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(accountNumber));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.accountNumber);
    return this;
  }

  /**
   * Sets the field 'giftCardTxUuid'.
   */
  public GiftCardResponse setGiftCardTxUuid(java.lang.String giftCardTxUuid) {
    logChange("giftCardTxUuid");

    try {
      getJSONObject().put("giftCardTxUuid", giftCardTxUuid == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(giftCardTxUuid));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.giftCardTxUuid);
    return this;
  }

  /**
   * Sets the field 'transactionId'.
   */
  public GiftCardResponse setTransactionId(java.lang.String transactionId) {
    logChange("transactionId");

    try {
      getJSONObject().put("transactionId", transactionId == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(transactionId));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.transactionId);
    return this;
  }

  /**
   * Sets the field 'referenceUuid'.
   */
  public GiftCardResponse setReferenceUuid(java.lang.String referenceUuid) {
    logChange("referenceUuid");

    try {
      getJSONObject().put("referenceUuid", referenceUuid == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(referenceUuid));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.referenceUuid);
    return this;
  }

  /**
   * Sets the field 'authCode'.
   */
  public GiftCardResponse setAuthCode(java.lang.String authCode) {
    logChange("authCode");

    try {
      getJSONObject().put("authCode", authCode == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(authCode));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.authCode);
    return this;
  }

  /**
   * Sets the field 'begBal'.
   */
  public GiftCardResponse setBegBal(java.lang.Long begBal) {
    logChange("begBal");

    try {
      getJSONObject().put("begBal", begBal == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(begBal));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.begBal);
    return this;
  }

  /**
   * Sets the field 'endBal'.
   */
  public GiftCardResponse setEndBal(java.lang.Long endBal) {
    logChange("endBal");

    try {
      getJSONObject().put("endBal", endBal == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(endBal));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.endBal);
    return this;
  }

  /**
   * Sets the field 'holdBal'.
   */
  public GiftCardResponse setHoldBal(java.lang.Long holdBal) {
    logChange("holdBal");

    try {
      getJSONObject().put("holdBal", holdBal == null ? org.json.JSONObject.NULL : com.clover.sdk.v3.JsonHelper.toJSON(holdBal));
    } catch (org.json.JSONException e) {
      throw new java.lang.IllegalArgumentException(e);
    }

    cacheMarkDirty(CacheKey.holdBal);
    return this;
  }


  /** Clears the 'txType' field, the 'has' method for this field will now return false */
  public void clearTxType() {
    unlogChange("txType");
    getJSONObject().remove("txType");
    cacheRemoveValue(CacheKey.txType);
  }

  /** Clears the 'state' field, the 'has' method for this field will now return false */
  public void clearState() {
    unlogChange("state");
    getJSONObject().remove("state");
    cacheRemoveValue(CacheKey.state);
  }

  /** Clears the 'requestAmount' field, the 'has' method for this field will now return false */
  public void clearRequestAmount() {
    unlogChange("requestAmount");
    getJSONObject().remove("requestAmount");
    cacheRemoveValue(CacheKey.requestAmount);
  }

  /** Clears the 'payment' field, the 'has' method for this field will now return false */
  public void clearPayment() {
    unlogChange("payment");
    getJSONObject().remove("payment");
    cacheRemoveValue(CacheKey.payment);
  }

  /** Clears the 'responseMessage' field, the 'has' method for this field will now return false */
  public void clearResponseMessage() {
    unlogChange("responseMessage");
    getJSONObject().remove("responseMessage");
    cacheRemoveValue(CacheKey.responseMessage);
  }

  /** Clears the 'requestSuccessful' field, the 'has' method for this field will now return false */
  public void clearRequestSuccessful() {
    unlogChange("requestSuccessful");
    getJSONObject().remove("requestSuccessful");
    cacheRemoveValue(CacheKey.requestSuccessful);
  }

  /** Clears the 'accountNumber' field, the 'has' method for this field will now return false */
  public void clearAccountNumber() {
    unlogChange("accountNumber");
    getJSONObject().remove("accountNumber");
    cacheRemoveValue(CacheKey.accountNumber);
  }

  /** Clears the 'giftCardTxUuid' field, the 'has' method for this field will now return false */
  public void clearGiftCardTxUuid() {
    unlogChange("giftCardTxUuid");
    getJSONObject().remove("giftCardTxUuid");
    cacheRemoveValue(CacheKey.giftCardTxUuid);
  }

  /** Clears the 'transactionId' field, the 'has' method for this field will now return false */
  public void clearTransactionId() {
    unlogChange("transactionId");
    getJSONObject().remove("transactionId");
    cacheRemoveValue(CacheKey.transactionId);
  }

  /** Clears the 'referenceUuid' field, the 'has' method for this field will now return false */
  public void clearReferenceUuid() {
    unlogChange("referenceUuid");
    getJSONObject().remove("referenceUuid");
    cacheRemoveValue(CacheKey.referenceUuid);
  }

  /** Clears the 'authCode' field, the 'has' method for this field will now return false */
  public void clearAuthCode() {
    unlogChange("authCode");
    getJSONObject().remove("authCode");
    cacheRemoveValue(CacheKey.authCode);
  }

  /** Clears the 'begBal' field, the 'has' method for this field will now return false */
  public void clearBegBal() {
    unlogChange("begBal");
    getJSONObject().remove("begBal");
    cacheRemoveValue(CacheKey.begBal);
  }

  /** Clears the 'endBal' field, the 'has' method for this field will now return false */
  public void clearEndBal() {
    unlogChange("endBal");
    getJSONObject().remove("endBal");
    cacheRemoveValue(CacheKey.endBal);
  }

  /** Clears the 'holdBal' field, the 'has' method for this field will now return false */
  public void clearHoldBal() {
    unlogChange("holdBal");
    getJSONObject().remove("holdBal");
    cacheRemoveValue(CacheKey.holdBal);
  }


  private void logChange(java.lang.String field) {
    if (changeLog == null) {
      changeLog = new android.os.Bundle();
    }
    changeLog.putString(field, null);
  }

  private void unlogChange(java.lang.String field) {
    if (changeLog != null) {
      changeLog.remove(field);
    }
  }

  /**
   * Returns true if this instance has any changes.
   */
  public boolean containsChanges() {
    return changeLog != null;
  }

  /**
   * Reset the log of changes made to this instance, calling copyChanges() after this would return an empty instance.
   */
  public void resetChangeLog() {
    changeLog = null;
  }

  /**
   * Create a copy of this instance that contains only fields that were set after the constructor was called.
   */
  public GiftCardResponse copyChanges() {
    GiftCardResponse copy = new GiftCardResponse();
    copy.mergeChanges(this);
    copy.resetChangeLog();
    return copy;
  }

  /**
   * Copy all the changed fields from the given source to this instance.
   */
  public void mergeChanges(GiftCardResponse src) {
    if (src.changeLog != null) {
      try {
        // Make a copy of the source so the destination fields are copies
        org.json.JSONObject srcObj = new GiftCardResponse(src).getJSONObject();
        org.json.JSONObject dstObj = getJSONObject();
        for (java.lang.String field : src.changeLog.keySet()) {
          dstObj.put(field, srcObj.get(field));
          logChange(field);
        }
      } catch (org.json.JSONException e) {
        throw new java.lang.IllegalArgumentException(e);
      }
    }
  }


  /**
   * Gets a Bundle which can be used to get and set data attached to this instance. The attached Bundle will be
   * parcelled but not jsonified.
   */
  public android.os.Bundle getBundle() {
    if (bundle == null) {
      bundle = new android.os.Bundle();
    }
    return bundle;
  }

  @Override
  public String toString() {
    String json = getJSONObject().toString();

    if (bundle != null) {
      bundle.isEmpty(); // Triggers unparcel
    }

    if (changeLog != null) {
      changeLog.isEmpty(); // Triggers unparcel
    }

    return "GiftCardResponse{" +
        "json='" + json + "'" +
        ", bundle=" + bundle +
        ", changeLog=" + changeLog +
        '}';
  }

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(android.os.Parcel dest, int flags) {
	  com.clover.sdk.v3.JsonParcelHelper.wrap(getJSONObject()).writeToParcel(dest, 0);
    dest.writeBundle(bundle);
    dest.writeBundle(changeLog);
  }

  public static final android.os.Parcelable.Creator<GiftCardResponse> CREATOR = new android.os.Parcelable.Creator<GiftCardResponse>() {
    @Override
    public GiftCardResponse createFromParcel(android.os.Parcel in) {
      GiftCardResponse instance = new GiftCardResponse(com.clover.sdk.v3.JsonParcelHelper.ObjectWrapper.CREATOR.createFromParcel(in).unwrap());
      instance.bundle = in.readBundle(getClass().getClassLoader());
      instance.changeLog = in.readBundle();
      return instance;
    }

    @Override
    public GiftCardResponse[] newArray(int size) {
      return new GiftCardResponse[size];
    }
  };

  public static final com.clover.sdk.JSONifiable.Creator<GiftCardResponse> JSON_CREATOR = new com.clover.sdk.JSONifiable.Creator<GiftCardResponse>() {
    @Override
    public GiftCardResponse create(org.json.JSONObject jsonObject) {
      return new GiftCardResponse(jsonObject);
    }
  };


  public interface Constraints {

    public static final boolean TXTYPE_IS_REQUIRED = false;

    public static final boolean STATE_IS_REQUIRED = false;

    public static final boolean REQUESTAMOUNT_IS_REQUIRED = false;

    public static final boolean PAYMENT_IS_REQUIRED = false;

    public static final boolean RESPONSEMESSAGE_IS_REQUIRED = false;

    public static final boolean REQUESTSUCCESSFUL_IS_REQUIRED = false;

    public static final boolean ACCOUNTNUMBER_IS_REQUIRED = false;

    public static final boolean GIFTCARDTXUUID_IS_REQUIRED = false;

    public static final boolean TRANSACTIONID_IS_REQUIRED = false;

    public static final boolean REFERENCEUUID_IS_REQUIRED = false;

    public static final boolean AUTHCODE_IS_REQUIRED = false;

    public static final boolean BEGBAL_IS_REQUIRED = false;

    public static final boolean ENDBAL_IS_REQUIRED = false;

    public static final boolean HOLDBAL_IS_REQUIRED = false;

  }

}
